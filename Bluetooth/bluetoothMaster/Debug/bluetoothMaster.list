
bluetoothMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003320  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003474  08003474  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003474  08003474  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003474  08003474  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800347c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003488  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003488  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbc0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d88  00000000  00000000  0002cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  0002e980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  0002f558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f0bd  00000000  00000000  00030038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b26  00000000  00000000  0003f0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000571fb  00000000  00000000  00048c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009fe16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  0009fe94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033c8 	.word	0x080033c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080033c8 	.word	0x080033c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbe0 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f840 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f94c 	bl	80004c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f89e 	bl	8000370 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f918 	bl	8000468 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(buffer, 0, sizeof(buffer)); //clear buffer
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <main+0x70>)
 800023a:	2232      	movs	r2, #50	; 0x32
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f003 f8ba 	bl	80033b8 <memset>
  HAL_TIM_Base_Start_IT(&htim2);//start timer
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <main+0x74>)
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fc7e 	bl	8001b48 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart1, (uint8_t*)"GREEN LED\r\n", strlen("GREEN LED\r\n") + 1, 500);
 800024c:	23fa      	movs	r3, #250	; 0xfa
 800024e:	005b      	lsls	r3, r3, #1
 8000250:	4911      	ldr	r1, [pc, #68]	; (8000298 <main+0x78>)
 8000252:	4812      	ldr	r0, [pc, #72]	; (800029c <main+0x7c>)
 8000254:	220c      	movs	r2, #12
 8000256:	f002 fa67 	bl	8002728 <HAL_UART_Transmit>
	HAL_Delay(5000);
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <main+0x80>)
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fc27 	bl	8000ab0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)"RED LED\r\n", strlen("RED LED\r\n") + 1, 500);
 8000262:	23fa      	movs	r3, #250	; 0xfa
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	490f      	ldr	r1, [pc, #60]	; (80002a4 <main+0x84>)
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <main+0x7c>)
 800026a:	220a      	movs	r2, #10
 800026c:	f002 fa5c 	bl	8002728 <HAL_UART_Transmit>
	HAL_Delay(5000);
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x80>)
 8000272:	0018      	movs	r0, r3
 8000274:	f000 fc1c 	bl	8000ab0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)"CLEAR\r\n", strlen("CLEAR\r\n") + 1, 500);
 8000278:	23fa      	movs	r3, #250	; 0xfa
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	490a      	ldr	r1, [pc, #40]	; (80002a8 <main+0x88>)
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <main+0x7c>)
 8000280:	2208      	movs	r2, #8
 8000282:	f002 fa51 	bl	8002728 <HAL_UART_Transmit>
	HAL_Delay(5000);
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0x80>)
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fc11 	bl	8000ab0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)"GREEN LED\r\n", strlen("GREEN LED\r\n") + 1, 500);
 800028e:	e7dd      	b.n	800024c <main+0x2c>
 8000290:	200000ec 	.word	0x200000ec
 8000294:	200000ac 	.word	0x200000ac
 8000298:	080033e0 	.word	0x080033e0
 800029c:	2000002c 	.word	0x2000002c
 80002a0:	00001388 	.word	0x00001388
 80002a4:	080033ec 	.word	0x080033ec
 80002a8:	080033f8 	.word	0x080033f8

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b097      	sub	sp, #92	; 0x5c
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2428      	movs	r4, #40	; 0x28
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2330      	movs	r3, #48	; 0x30
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f003 f87b 	bl	80033b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	2318      	movs	r3, #24
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	0018      	movs	r0, r3
 80002c8:	2310      	movs	r3, #16
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f003 f873 	bl	80033b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	0018      	movs	r0, r3
 80002d6:	2314      	movs	r3, #20
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f003 f86c 	bl	80033b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e0:	0021      	movs	r1, r4
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2201      	movs	r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2210      	movs	r2, #16
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	22a0      	movs	r2, #160	; 0xa0
 8000304:	0392      	lsls	r2, r2, #14
 8000306:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	187b      	adds	r3, r7, r1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fea1 	bl	8001058 <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800031a:	f000 f95b 	bl	80005d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	2118      	movs	r1, #24
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2207      	movs	r2, #7
 8000324:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2101      	movs	r1, #1
 800033c:	0018      	movs	r0, r3
 800033e:	f001 f9a7 	bl	8001690 <HAL_RCC_ClockConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000346:	f000 f945 	bl	80005d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	f001 faeb 	bl	8001934 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000362:	f000 f937 	bl	80005d4 <Error_Handler>
  }
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b017      	add	sp, #92	; 0x5c
 800036c:	bd90      	pop	{r4, r7, pc}
	...

08000370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b08a      	sub	sp, #40	; 0x28
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000376:	2318      	movs	r3, #24
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	0018      	movs	r0, r3
 800037c:	2310      	movs	r3, #16
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f003 f819 	bl	80033b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000386:	2310      	movs	r3, #16
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	0018      	movs	r0, r3
 800038c:	2308      	movs	r3, #8
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f003 f811 	bl	80033b8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000396:	003b      	movs	r3, r7
 8000398:	0018      	movs	r0, r3
 800039a:	2310      	movs	r3, #16
 800039c:	001a      	movs	r2, r3
 800039e:	2100      	movs	r1, #0
 80003a0:	f003 f80a 	bl	80033b8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a4:	4b2e      	ldr	r3, [pc, #184]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	05d2      	lsls	r2, r2, #23
 80003aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003ae:	4a2d      	ldr	r2, [pc, #180]	; (8000464 <MX_TIM2_Init+0xf4>)
 80003b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b2:	4b2b      	ldr	r3, [pc, #172]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003ba:	22f4      	movs	r2, #244	; 0xf4
 80003bc:	32ff      	adds	r2, #255	; 0xff
 80003be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c0:	4b27      	ldr	r3, [pc, #156]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c6:	4b26      	ldr	r3, [pc, #152]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 fb8e 	bl	8001af0 <HAL_TIM_Base_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80003d8:	f000 f8fc 	bl	80005d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003dc:	2118      	movs	r1, #24
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	0152      	lsls	r2, r2, #5
 80003e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003e6:	187a      	adds	r2, r7, r1
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fdb5 	bl	8001f5c <HAL_TIM_ConfigClockSource>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80003f6:	f000 f8ed 	bl	80005d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_TIM2_Init+0xf0>)
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fbc5 	bl	8001b8c <HAL_TIM_IC_Init>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000406:	f000 f8e5 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040a:	2110      	movs	r1, #16
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000418:	187a      	adds	r2, r7, r1
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_TIM2_Init+0xf0>)
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f002 f8c0 	bl	80025a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000428:	f000 f8d4 	bl	80005d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800042c:	003b      	movs	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000432:	003b      	movs	r3, r7
 8000434:	2201      	movs	r2, #1
 8000436:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000438:	003b      	movs	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800043e:	003b      	movs	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000444:	0039      	movs	r1, r7
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_TIM2_Init+0xf0>)
 8000448:	2204      	movs	r2, #4
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fce8 	bl	8001e20 <HAL_TIM_IC_ConfigChannel>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000454:	f000 f8be 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b00a      	add	sp, #40	; 0x28
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200000ac 	.word	0x200000ac
 8000464:	0000bb80 	.word	0x0000bb80

08000468 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800046c:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800046e:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <MX_USART1_UART_Init+0x5c>)
 8000470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000474:	2296      	movs	r2, #150	; 0x96
 8000476:	0192      	lsls	r2, r2, #6
 8000478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800048e:	220c      	movs	r2, #12
 8000490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 f8e7 	bl	8002680 <HAL_UART_Init>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004b6:	f000 f88d 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	40013800 	.word	0x40013800

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	240c      	movs	r4, #12
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2314      	movs	r3, #20
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 ff6d 	bl	80033b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b39      	ldr	r3, [pc, #228]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	03c9      	lsls	r1, r1, #15
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	4b36      	ldr	r3, [pc, #216]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	03db      	lsls	r3, r3, #15
 80004f4:	4013      	ands	r3, r2
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b33      	ldr	r3, [pc, #204]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0289      	lsls	r1, r1, #10
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_GPIO_Init+0x100>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	029b      	lsls	r3, r3, #10
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_GPIO_Init+0x100>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	0309      	lsls	r1, r1, #12
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	031b      	lsls	r3, r3, #12
 800052c:	4013      	ands	r3, r2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000532:	2390      	movs	r3, #144	; 0x90
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	2200      	movs	r2, #0
 8000538:	2160      	movs	r1, #96	; 0x60
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fd6e 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000540:	23c0      	movs	r3, #192	; 0xc0
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	4821      	ldr	r0, [pc, #132]	; (80005cc <MX_GPIO_Init+0x104>)
 8000546:	2200      	movs	r2, #0
 8000548:	0019      	movs	r1, r3
 800054a:	f000 fd67 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <MX_GPIO_Init+0x108>)
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000560:	193a      	adds	r2, r7, r4
 8000562:	2390      	movs	r3, #144	; 0x90
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fbe7 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800056e:	0021      	movs	r1, r4
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2260      	movs	r2, #96	; 0x60
 8000574:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2201      	movs	r2, #1
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	000c      	movs	r4, r1
 800058a:	187a      	adds	r2, r7, r1
 800058c:	2390      	movs	r3, #144	; 0x90
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	0011      	movs	r1, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fbd2 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000598:	0021      	movs	r1, r4
 800059a:	187b      	adds	r3, r7, r1
 800059c:	22c0      	movs	r2, #192	; 0xc0
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2201      	movs	r2, #1
 80005a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <MX_GPIO_Init+0x104>)
 80005b8:	0019      	movs	r1, r3
 80005ba:	0010      	movs	r0, r2
 80005bc:	f000 fbbe 	bl	8000d3c <HAL_GPIO_Init>

}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b009      	add	sp, #36	; 0x24
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000800 	.word	0x48000800
 80005d0:	10120000 	.word	0x10120000

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <string_compare>:
//uint8_t buffer[50];
uint8_t timer_count = 0;
uint8_t buffer_index = 0;

uint8_t string_compare(char *array1, char *array2 , uint16_t length)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b086      	sub	sp, #24
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	1dbb      	adds	r3, r7, #6
 80005ea:	801a      	strh	r2, [r3, #0]
	 uint8_t comVAR=0, i;
 80005ec:	2317      	movs	r3, #23
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
	 for(i=0;i<length;i++)
 80005f4:	2316      	movs	r3, #22
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e01d      	b.n	800063a <string_compare+0x5c>
	   	{
	   		  if(array1[i]==array2[i])
 80005fe:	2116      	movs	r1, #22
 8000600:	187b      	adds	r3, r7, r1
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	18d3      	adds	r3, r2, r3
 8000608:	781a      	ldrb	r2, [r3, #0]
 800060a:	187b      	adds	r3, r7, r1
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	68b9      	ldr	r1, [r7, #8]
 8000610:	18cb      	adds	r3, r1, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d106      	bne.n	8000626 <string_compare+0x48>
	   	  		  comVAR++;
 8000618:	2117      	movs	r1, #23
 800061a:	187b      	adds	r3, r7, r1
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	187b      	adds	r3, r7, r1
 8000620:	3201      	adds	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e003      	b.n	800062e <string_compare+0x50>
	   	  	  else comVAR=0;
 8000626:	2317      	movs	r3, #23
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	 for(i=0;i<length;i++)
 800062e:	2116      	movs	r1, #22
 8000630:	187b      	adds	r3, r7, r1
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	187b      	adds	r3, r7, r1
 8000636:	3201      	adds	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	2316      	movs	r3, #22
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	1dba      	adds	r2, r7, #6
 8000644:	8812      	ldrh	r2, [r2, #0]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8d9      	bhi.n	80005fe <string_compare+0x20>
	   	}
	 if (comVAR==length)
 800064a:	2317      	movs	r3, #23
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b29b      	uxth	r3, r3
 8000652:	1dba      	adds	r2, r7, #6
 8000654:	8812      	ldrh	r2, [r2, #0]
 8000656:	429a      	cmp	r2, r3
 8000658:	d101      	bne.n	800065e <string_compare+0x80>
		 	return 1;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <string_compare+0x82>
	 else 	return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b006      	add	sp, #24
 8000666:	bd80      	pop	{r7, pc}

08000668 <Message_handler>:
void Message_handler()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "RED LED IS ON\r\n", strlen("RED LED IS ON\r\n")))
 800066c:	4928      	ldr	r1, [pc, #160]	; (8000710 <Message_handler+0xa8>)
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <Message_handler+0xac>)
 8000670:	220f      	movs	r2, #15
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff ffb3 	bl	80005de <string_compare>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d015      	beq.n	80006a8 <Message_handler+0x40>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800067c:	2390      	movs	r3, #144	; 0x90
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fcc9 	bl	800101c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800068a:	2390      	movs	r3, #144	; 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fcc2 	bl	800101c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)"GREEN LED\r\n", strlen("GREEN LED\r\n") + 1, 500);
 8000698:	23fa      	movs	r3, #250	; 0xfa
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	491e      	ldr	r1, [pc, #120]	; (8000718 <Message_handler+0xb0>)
 800069e:	481f      	ldr	r0, [pc, #124]	; (800071c <Message_handler+0xb4>)
 80006a0:	220c      	movs	r2, #12
 80006a2:	f002 f841 	bl	8002728 <HAL_UART_Transmit>
 80006a6:	e024      	b.n	80006f2 <Message_handler+0x8a>
	}
	else if (string_compare(buffer, "GREEN LED IS ON\r\n", strlen("GREEN LED IS ON\r\n")))
 80006a8:	491d      	ldr	r1, [pc, #116]	; (8000720 <Message_handler+0xb8>)
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <Message_handler+0xac>)
 80006ac:	2211      	movs	r2, #17
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff ff95 	bl	80005de <string_compare>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d015      	beq.n	80006e4 <Message_handler+0x7c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80006b8:	2390      	movs	r3, #144	; 0x90
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2201      	movs	r2, #1
 80006be:	2140      	movs	r1, #64	; 0x40
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fcab 	bl	800101c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006c6:	2390      	movs	r3, #144	; 0x90
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fca4 	bl	800101c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)"RED LED\r\n", strlen("RED LED\r\n") + 1, 500);
 80006d4:	23fa      	movs	r3, #250	; 0xfa
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4912      	ldr	r1, [pc, #72]	; (8000724 <Message_handler+0xbc>)
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <Message_handler+0xb4>)
 80006dc:	220a      	movs	r2, #10
 80006de:	f002 f823 	bl	8002728 <HAL_UART_Transmit>
 80006e2:	e006      	b.n	80006f2 <Message_handler+0x8a>
	}
	else
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"RED LED\r\n", strlen("RED LED\r\n") + 1, 500);
 80006e4:	23fa      	movs	r3, #250	; 0xfa
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	490e      	ldr	r1, [pc, #56]	; (8000724 <Message_handler+0xbc>)
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <Message_handler+0xb4>)
 80006ec:	220a      	movs	r2, #10
 80006ee:	f002 f81b 	bl	8002728 <HAL_UART_Transmit>
	}
	memset(buffer, 0, sizeof(buffer));
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <Message_handler+0xac>)
 80006f4:	2232      	movs	r2, #50	; 0x32
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 fe5d 	bl	80033b8 <memset>
	buffer_index = 0;
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <Message_handler+0xc0>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <Message_handler+0xc4>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	08003400 	.word	0x08003400
 8000714:	200000ec 	.word	0x200000ec
 8000718:	08003410 	.word	0x08003410
 800071c:	2000002c 	.word	0x2000002c
 8000720:	0800341c 	.word	0x0800341c
 8000724:	08003430 	.word	0x08003430
 8000728:	20000029 	.word	0x20000029
 800072c:	20000028 	.word	0x20000028

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	699a      	ldr	r2, [r3, #24]
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0549      	lsls	r1, r1, #21
 8000758:	430a      	orrs	r2, r1
 800075a:	61da      	str	r2, [r3, #28]
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_MspInit+0x44>)
 800075e:	69da      	ldr	r2, [r3, #28]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	055b      	lsls	r3, r3, #21
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	2314      	movs	r3, #20
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	0018      	movs	r0, r3
 8000786:	2314      	movs	r3, #20
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f002 fe14 	bl	80033b8 <memset>
  if(htim_base->Instance==TIM2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	429a      	cmp	r2, r3
 800079a:	d138      	bne.n	800080e <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <HAL_TIM_Base_MspInit+0xa0>)
 800079e:	69da      	ldr	r2, [r3, #28]
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_TIM_Base_MspInit+0xa0>)
 80007a2:	2101      	movs	r1, #1
 80007a4:	430a      	orrs	r2, r1
 80007a6:	61da      	str	r2, [r3, #28]
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_TIM_Base_MspInit+0xa0>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4013      	ands	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_TIM_Base_MspInit+0xa0>)
 80007b6:	695a      	ldr	r2, [r3, #20]
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_TIM_Base_MspInit+0xa0>)
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	0289      	lsls	r1, r1, #10
 80007be:	430a      	orrs	r2, r1
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_TIM_Base_MspInit+0xa0>)
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	029b      	lsls	r3, r3, #10
 80007ca:	4013      	ands	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007d0:	2114      	movs	r1, #20
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2202      	movs	r2, #2
 80007dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	187a      	adds	r2, r7, r1
 80007f2:	2390      	movs	r3, #144	; 0x90
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fa9f 	bl	8000d3c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200f      	movs	r0, #15
 8000804:	f000 fa22 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000808:	200f      	movs	r0, #15
 800080a:	f000 fa34 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b00a      	add	sp, #40	; 0x28
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	2314      	movs	r3, #20
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	0018      	movs	r0, r3
 800082a:	2314      	movs	r3, #20
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f002 fdc2 	bl	80033b8 <memset>
  if(huart->Instance==USART1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <HAL_UART_MspInit+0xa4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d13b      	bne.n	80008b6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <HAL_UART_MspInit+0xa8>)
 8000840:	699a      	ldr	r2, [r3, #24]
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <HAL_UART_MspInit+0xa8>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	01c9      	lsls	r1, r1, #7
 8000848:	430a      	orrs	r2, r1
 800084a:	619a      	str	r2, [r3, #24]
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <HAL_UART_MspInit+0xa8>)
 800084e:	699a      	ldr	r2, [r3, #24]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	01db      	lsls	r3, r3, #7
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_UART_MspInit+0xa8>)
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_UART_MspInit+0xa8>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0289      	lsls	r1, r1, #10
 8000864:	430a      	orrs	r2, r1
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_UART_MspInit+0xa8>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	029b      	lsls	r3, r3, #10
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000876:	2114      	movs	r1, #20
 8000878:	187b      	adds	r3, r7, r1
 800087a:	22c0      	movs	r2, #192	; 0xc0
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2202      	movs	r2, #2
 8000884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2203      	movs	r2, #3
 8000890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2201      	movs	r2, #1
 8000896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	187a      	adds	r2, r7, r1
 800089a:	2390      	movs	r3, #144	; 0x90
 800089c:	05db      	lsls	r3, r3, #23
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fa4b 	bl	8000d3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	201b      	movs	r0, #27
 80008ac:	f000 f9ce 	bl	8000c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b0:	201b      	movs	r0, #27
 80008b2:	f000 f9e0 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b00a      	add	sp, #40	; 0x28
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40013800 	.word	0x40013800
 80008c4:	40021000 	.word	0x40021000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f8c2 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer) > 0)
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <TIM2_IRQHandler+0x34>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d005      	beq.n	8000914 <TIM2_IRQHandler+0x18>
		timer_count++;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <TIM2_IRQHandler+0x38>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <TIM2_IRQHandler+0x38>)
 8000912:	701a      	strb	r2, [r3, #0]
	if (timer_count > 5) //if receiving takes more than 100 ms, messages are short, dont need alot of time
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <TIM2_IRQHandler+0x38>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b05      	cmp	r3, #5
 800091a:	d901      	bls.n	8000920 <TIM2_IRQHandler+0x24>
		Message_handler();
 800091c:	f7ff fea4 	bl	8000668 <Message_handler>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <TIM2_IRQHandler+0x3c>)
 8000922:	0018      	movs	r0, r3
 8000924:	f001 f966 	bl	8001bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	200000ec 	.word	0x200000ec
 8000934:	20000028 	.word	0x20000028
 8000938:	200000ac 	.word	0x200000ac

0800093c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <USART1_IRQHandler+0x40>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	b2d1      	uxtb	r1, r2
 8000948:	4a0c      	ldr	r2, [pc, #48]	; (800097c <USART1_IRQHandler+0x40>)
 800094a:	7011      	strb	r1, [r2, #0]
 800094c:	001a      	movs	r2, r3
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <USART1_IRQHandler+0x44>)
 8000950:	18d1      	adds	r1, r2, r3
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <USART1_IRQHandler+0x48>)
 8000954:	230a      	movs	r3, #10
 8000956:	2201      	movs	r2, #1
 8000958:	f001 ff8e 	bl	8002878 <HAL_UART_Receive>
	//HAL_UART_R

	if(buffer[buffer_index] == '\n')
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <USART1_IRQHandler+0x40>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	001a      	movs	r2, r3
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <USART1_IRQHandler+0x44>)
 8000964:	5c9b      	ldrb	r3, [r3, r2]
 8000966:	2b0a      	cmp	r3, #10
 8000968:	d101      	bne.n	800096e <USART1_IRQHandler+0x32>
			Message_handler();
 800096a:	f7ff fe7d 	bl	8000668 <Message_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <USART1_IRQHandler+0x48>)
 8000970:	0018      	movs	r0, r3
 8000972:	f002 f859 	bl	8002a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000029 	.word	0x20000029
 8000980:	200000ec 	.word	0x200000ec
 8000984:	2000002c 	.word	0x2000002c

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009be:	f7ff ffe3 	bl	8000988 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009c2:	f002 fcd5 	bl	8003370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fc2b 	bl	8000220 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d8:	0800347c 	.word	0x0800347c
  ldr r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e0:	20000124 	.word	0x20000124

080009e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_COMP_IRQHandler>
	...

080009e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_Init+0x24>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_Init+0x24>)
 80009f2:	2110      	movs	r1, #16
 80009f4:	430a      	orrs	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f809 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fe:	f7ff fe97 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x5c>)
 8000a1a:	681c      	ldr	r4, [r3, #0]
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_InitTick+0x60>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	0019      	movs	r1, r3
 8000a22:	23fa      	movs	r3, #250	; 0xfa
 8000a24:	0098      	lsls	r0, r3, #2
 8000a26:	f7ff fb6f 	bl	8000108 <__udivsi3>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0020      	movs	r0, r4
 8000a30:	f7ff fb6a 	bl	8000108 <__udivsi3>
 8000a34:	0003      	movs	r3, r0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f92d 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e00f      	b.n	8000a64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d80b      	bhi.n	8000a62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	2200      	movs	r2, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 f8fa 	bl	8000c4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_InitTick+0x64>)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b003      	add	sp, #12
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	001a      	movs	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	18d2      	adds	r2, r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000120 	.word	0x20000120

08000a9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000120 	.word	0x20000120

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff fff0 	bl	8000a9c <HAL_GetTick>
 8000abc:	0003      	movs	r3, r0
 8000abe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_Delay+0x40>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	001a      	movs	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	189b      	adds	r3, r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	f7ff ffe0 	bl	8000a9c <HAL_GetTick>
 8000adc:	0002      	movs	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b004      	add	sp, #16
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000008 	.word	0x20000008

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b7f      	cmp	r3, #127	; 0x7f
 8000b06:	d809      	bhi.n	8000b1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	231f      	movs	r3, #31
 8000b10:	401a      	ands	r2, r3
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_EnableIRQ+0x30>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	4091      	lsls	r1, r2
 8000b18:	000a      	movs	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
  }
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3c:	d828      	bhi.n	8000b90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	33c0      	adds	r3, #192	; 0xc0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	589b      	ldr	r3, [r3, r2]
 8000b4e:	1dfa      	adds	r2, r7, #7
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	0011      	movs	r1, r2
 8000b54:	2203      	movs	r2, #3
 8000b56:	400a      	ands	r2, r1
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	21ff      	movs	r1, #255	; 0xff
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	2303      	movs	r3, #3
 8000b76:	4003      	ands	r3, r0
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	481f      	ldr	r0, [pc, #124]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	430a      	orrs	r2, r1
 8000b88:	33c0      	adds	r3, #192	; 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b8e:	e031      	b.n	8000bf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0019      	movs	r1, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	400b      	ands	r3, r1
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3306      	adds	r3, #6
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001c      	movs	r4, r3
 8000be0:	230f      	movs	r3, #15
 8000be2:	4023      	ands	r3, r4
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	430a      	orrs	r2, r1
 8000bea:	3306      	adds	r3, #6
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	18c3      	adds	r3, r0, r3
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <SysTick_Config+0x40>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d901      	bls.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e010      	b.n	8000c3c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <SysTick_Config+0x44>)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	3a01      	subs	r2, #1
 8000c20:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	2301      	movs	r3, #1
 8000c24:	425b      	negs	r3, r3
 8000c26:	2103      	movs	r1, #3
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff ff7d 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SysTick_Config+0x44>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x44>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	00ffffff 	.word	0x00ffffff
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	210f      	movs	r1, #15
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ff33 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ffaf 	bl	8000c04 <SysTick_Config>
 8000ca6:	0003      	movs	r3, r0
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2221      	movs	r2, #33	; 0x21
 8000cc4:	5c9b      	ldrb	r3, [r3, r2]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d007      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2204      	movs	r2, #4
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e028      	b.n	8000d2e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	210e      	movs	r1, #14
 8000ce8:	438a      	bics	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	438a      	bics	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d04:	2101      	movs	r1, #1
 8000d06:	4091      	lsls	r1, r2
 8000d08:	000a      	movs	r2, r1
 8000d0a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2221      	movs	r2, #33	; 0x21
 8000d10:	2101      	movs	r1, #1
 8000d12:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2220      	movs	r2, #32
 8000d18:	2100      	movs	r1, #0
 8000d1a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d004      	beq.n	8000d2e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	0010      	movs	r0, r2
 8000d2c:	4798      	blx	r3
    } 
  }
  return status;
 8000d2e:	230f      	movs	r3, #15
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	781b      	ldrb	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e14f      	b.n	8000fec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4091      	lsls	r1, r2
 8000d56:	000a      	movs	r2, r1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d100      	bne.n	8000d64 <HAL_GPIO_Init+0x28>
 8000d62:	e140      	b.n	8000fe6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d00b      	beq.n	8000d84 <HAL_GPIO_Init+0x48>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d007      	beq.n	8000d84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d78:	2b11      	cmp	r3, #17
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b12      	cmp	r3, #18
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0xea>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d123      	bne.n	8000e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	0092      	lsls	r2, r2, #2
 8000e30:	58d3      	ldr	r3, [r2, r3]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2207      	movs	r2, #7
 8000e38:	4013      	ands	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2107      	movs	r1, #7
 8000e52:	400b      	ands	r3, r1
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	409a      	lsls	r2, r3
 8000e58:	0013      	movs	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	6939      	ldr	r1, [r7, #16]
 8000e6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	055b      	lsls	r3, r3, #21
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d100      	bne.n	8000eb0 <HAL_GPIO_Init+0x174>
 8000eae:	e09a      	b.n	8000fe6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb0:	4b54      	ldr	r3, [pc, #336]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000eb2:	699a      	ldr	r2, [r3, #24]
 8000eb4:	4b53      	ldr	r3, [pc, #332]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	619a      	str	r2, [r3, #24]
 8000ebc:	4b51      	ldr	r3, [pc, #324]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec8:	4a4f      	ldr	r2, [pc, #316]	; (8001008 <HAL_GPIO_Init+0x2cc>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	589b      	ldr	r3, [r3, r2]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	4013      	ands	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	2390      	movs	r3, #144	; 0x90
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x1e2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a44      	ldr	r2, [pc, #272]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x1de>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a43      	ldr	r2, [pc, #268]	; (8001010 <HAL_GPIO_Init+0x2d4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x1da>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a42      	ldr	r2, [pc, #264]	; (8001014 <HAL_GPIO_Init+0x2d8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x1d6>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e004      	b.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e002      	b.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	2103      	movs	r1, #3
 8000f24:	400a      	ands	r2, r1
 8000f26:	0092      	lsls	r2, r2, #2
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f30:	4935      	ldr	r1, [pc, #212]	; (8001008 <HAL_GPIO_Init+0x2cc>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	025b      	lsls	r3, r3, #9
 8000f56:	4013      	ands	r3, r2
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	029b      	lsls	r3, r3, #10
 8000f80:	4013      	ands	r3, r2
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	035b      	lsls	r3, r3, #13
 8000faa:	4013      	ands	r3, r2
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	039b      	lsls	r3, r3, #14
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_GPIO_Init+0x2dc>)
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	40da      	lsrs	r2, r3
 8000ff4:	1e13      	subs	r3, r2, #0
 8000ff6:	d000      	beq.n	8000ffa <HAL_GPIO_Init+0x2be>
 8000ff8:	e6a8      	b.n	8000d4c <HAL_GPIO_Init+0x10>
  } 
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b006      	add	sp, #24
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	48000400 	.word	0x48000400
 8001010:	48000800 	.word	0x48000800
 8001014:	48000c00 	.word	0x48000c00
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	0008      	movs	r0, r1
 8001026:	0011      	movs	r1, r2
 8001028:	1cbb      	adds	r3, r7, #2
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	801a      	strh	r2, [r3, #0]
 800102e:	1c7b      	adds	r3, r7, #1
 8001030:	1c0a      	adds	r2, r1, #0
 8001032:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001034:	1c7b      	adds	r3, r7, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d004      	beq.n	8001046 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800103c:	1cbb      	adds	r3, r7, #2
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001044:	e003      	b.n	800104e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001046:	1cbb      	adds	r3, r7, #2
 8001048:	881a      	ldrh	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e303      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	d100      	bne.n	8001076 <HAL_RCC_OscConfig+0x1e>
 8001074:	e08d      	b.n	8001192 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001076:	4bc4      	ldr	r3, [pc, #784]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	220c      	movs	r2, #12
 800107c:	4013      	ands	r3, r2
 800107e:	2b04      	cmp	r3, #4
 8001080:	d00e      	beq.n	80010a0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001082:	4bc1      	ldr	r3, [pc, #772]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	220c      	movs	r2, #12
 8001088:	4013      	ands	r3, r2
 800108a:	2b08      	cmp	r3, #8
 800108c:	d116      	bne.n	80010bc <HAL_RCC_OscConfig+0x64>
 800108e:	4bbe      	ldr	r3, [pc, #760]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	401a      	ands	r2, r3
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	025b      	lsls	r3, r3, #9
 800109c:	429a      	cmp	r2, r3
 800109e:	d10d      	bne.n	80010bc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4bb9      	ldr	r3, [pc, #740]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	029b      	lsls	r3, r3, #10
 80010a8:	4013      	ands	r3, r2
 80010aa:	d100      	bne.n	80010ae <HAL_RCC_OscConfig+0x56>
 80010ac:	e070      	b.n	8001190 <HAL_RCC_OscConfig+0x138>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <HAL_RCC_OscConfig+0x60>
 80010b6:	e06b      	b.n	8001190 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e2da      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <HAL_RCC_OscConfig+0x7c>
 80010c4:	4bb0      	ldr	r3, [pc, #704]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4baf      	ldr	r3, [pc, #700]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	0249      	lsls	r1, r1, #9
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e02f      	b.n	8001134 <HAL_RCC_OscConfig+0xdc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10c      	bne.n	80010f6 <HAL_RCC_OscConfig+0x9e>
 80010dc:	4baa      	ldr	r3, [pc, #680]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4ba9      	ldr	r3, [pc, #676]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80010e2:	49aa      	ldr	r1, [pc, #680]	; (800138c <HAL_RCC_OscConfig+0x334>)
 80010e4:	400a      	ands	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	4ba7      	ldr	r3, [pc, #668]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4ba6      	ldr	r3, [pc, #664]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80010ee:	49a8      	ldr	r1, [pc, #672]	; (8001390 <HAL_RCC_OscConfig+0x338>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e01e      	b.n	8001134 <HAL_RCC_OscConfig+0xdc>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d10e      	bne.n	800111c <HAL_RCC_OscConfig+0xc4>
 80010fe:	4ba2      	ldr	r3, [pc, #648]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4ba1      	ldr	r3, [pc, #644]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	02c9      	lsls	r1, r1, #11
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4b9e      	ldr	r3, [pc, #632]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b9d      	ldr	r3, [pc, #628]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	0249      	lsls	r1, r1, #9
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0xdc>
 800111c:	4b9a      	ldr	r3, [pc, #616]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b99      	ldr	r3, [pc, #612]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001122:	499a      	ldr	r1, [pc, #616]	; (800138c <HAL_RCC_OscConfig+0x334>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	4b97      	ldr	r3, [pc, #604]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b96      	ldr	r3, [pc, #600]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800112e:	4998      	ldr	r1, [pc, #608]	; (8001390 <HAL_RCC_OscConfig+0x338>)
 8001130:	400a      	ands	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d014      	beq.n	8001166 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fcae 	bl	8000a9c <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fca9 	bl	8000a9c <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e28c      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001158:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	4013      	ands	r3, r2
 8001162:	d0f0      	beq.n	8001146 <HAL_RCC_OscConfig+0xee>
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fc99 	bl	8000a9c <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fc94 	bl	8000a9c <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e277      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b81      	ldr	r3, [pc, #516]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	029b      	lsls	r3, r3, #10
 800118a:	4013      	ands	r3, r2
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x118>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2202      	movs	r2, #2
 8001198:	4013      	ands	r3, r2
 800119a:	d100      	bne.n	800119e <HAL_RCC_OscConfig+0x146>
 800119c:	e069      	b.n	8001272 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800119e:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	220c      	movs	r2, #12
 80011a4:	4013      	ands	r3, r2
 80011a6:	d00b      	beq.n	80011c0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011a8:	4b77      	ldr	r3, [pc, #476]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	220c      	movs	r2, #12
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d11c      	bne.n	80011ee <HAL_RCC_OscConfig+0x196>
 80011b4:	4b74      	ldr	r3, [pc, #464]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	025b      	lsls	r3, r3, #9
 80011bc:	4013      	ands	r3, r2
 80011be:	d116      	bne.n	80011ee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c0:	4b71      	ldr	r3, [pc, #452]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2202      	movs	r2, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x17e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e24d      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	22f8      	movs	r2, #248	; 0xf8
 80011dc:	4393      	bics	r3, r2
 80011de:	0019      	movs	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	00da      	lsls	r2, r3, #3
 80011e6:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ec:	e041      	b.n	8001272 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d024      	beq.n	8001240 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f6:	4b64      	ldr	r3, [pc, #400]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fc4b 	bl	8000a9c <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff fc46 	bl	8000a9c <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e229      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d0f1      	beq.n	800120c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b57      	ldr	r3, [pc, #348]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	22f8      	movs	r2, #248	; 0xf8
 800122e:	4393      	bics	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	00da      	lsls	r2, r3, #3
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e018      	b.n	8001272 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001240:	4b51      	ldr	r3, [pc, #324]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b50      	ldr	r3, [pc, #320]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc26 	bl	8000a9c <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fc21 	bl	8000a9c <HAL_GetTick>
 800125a:	0002      	movs	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e204      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d1f1      	bne.n	8001256 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2208      	movs	r2, #8
 8001278:	4013      	ands	r3, r2
 800127a:	d036      	beq.n	80012ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d019      	beq.n	80012b8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001288:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800128a:	2101      	movs	r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff fc04 	bl	8000a9c <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fbff 	bl	8000a9c <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e1e2      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
 80012b4:	d0f1      	beq.n	800129a <HAL_RCC_OscConfig+0x242>
 80012b6:	e018      	b.n	80012ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80012ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80012be:	2101      	movs	r1, #1
 80012c0:	438a      	bics	r2, r1
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fbea 	bl	8000a9c <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fbe5 	bl	8000a9c <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1c8      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	2202      	movs	r2, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f1      	bne.n	80012ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2204      	movs	r2, #4
 80012f0:	4013      	ands	r3, r2
 80012f2:	d100      	bne.n	80012f6 <HAL_RCC_OscConfig+0x29e>
 80012f4:	e0b6      	b.n	8001464 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	231f      	movs	r3, #31
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	055b      	lsls	r3, r3, #21
 8001306:	4013      	ands	r3, r2
 8001308:	d111      	bne.n	800132e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0549      	lsls	r1, r1, #21
 8001314:	430a      	orrs	r2, r1
 8001316:	61da      	str	r2, [r3, #28]
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	055b      	lsls	r3, r3, #21
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001326:	231f      	movs	r3, #31
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_RCC_OscConfig+0x33c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4013      	ands	r3, r2
 8001338:	d11a      	bne.n	8001370 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_RCC_OscConfig+0x33c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_RCC_OscConfig+0x33c>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0049      	lsls	r1, r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001348:	f7ff fba8 	bl	8000a9c <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fba3 	bl	8000a9c <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e186      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_RCC_OscConfig+0x33c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4013      	ands	r3, r2
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d10f      	bne.n	8001398 <HAL_RCC_OscConfig+0x340>
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <HAL_RCC_OscConfig+0x330>)
 800137e:	2101      	movs	r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	621a      	str	r2, [r3, #32]
 8001384:	e036      	b.n	80013f4 <HAL_RCC_OscConfig+0x39c>
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40021000 	.word	0x40021000
 800138c:	fffeffff 	.word	0xfffeffff
 8001390:	fffbffff 	.word	0xfffbffff
 8001394:	40007000 	.word	0x40007000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10c      	bne.n	80013ba <HAL_RCC_OscConfig+0x362>
 80013a0:	4bb6      	ldr	r3, [pc, #728]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4bb5      	ldr	r3, [pc, #724]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	438a      	bics	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
 80013ac:	4bb3      	ldr	r3, [pc, #716]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	4bb2      	ldr	r3, [pc, #712]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013b2:	2104      	movs	r1, #4
 80013b4:	438a      	bics	r2, r1
 80013b6:	621a      	str	r2, [r3, #32]
 80013b8:	e01c      	b.n	80013f4 <HAL_RCC_OscConfig+0x39c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x384>
 80013c2:	4bae      	ldr	r3, [pc, #696]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	4bad      	ldr	r3, [pc, #692]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013c8:	2104      	movs	r1, #4
 80013ca:	430a      	orrs	r2, r1
 80013cc:	621a      	str	r2, [r3, #32]
 80013ce:	4bab      	ldr	r3, [pc, #684]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013d0:	6a1a      	ldr	r2, [r3, #32]
 80013d2:	4baa      	ldr	r3, [pc, #680]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013d4:	2101      	movs	r1, #1
 80013d6:	430a      	orrs	r2, r1
 80013d8:	621a      	str	r2, [r3, #32]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0x39c>
 80013dc:	4ba7      	ldr	r3, [pc, #668]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013de:	6a1a      	ldr	r2, [r3, #32]
 80013e0:	4ba6      	ldr	r3, [pc, #664]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	438a      	bics	r2, r1
 80013e6:	621a      	str	r2, [r3, #32]
 80013e8:	4ba4      	ldr	r3, [pc, #656]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013ea:	6a1a      	ldr	r2, [r3, #32]
 80013ec:	4ba3      	ldr	r3, [pc, #652]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80013ee:	2104      	movs	r1, #4
 80013f0:	438a      	bics	r2, r1
 80013f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d014      	beq.n	8001426 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fb4e 	bl	8000a9c <HAL_GetTick>
 8001400:	0003      	movs	r3, r0
 8001402:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	e009      	b.n	800141a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff fb49 	bl	8000a9c <HAL_GetTick>
 800140a:	0002      	movs	r2, r0
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	4a9b      	ldr	r2, [pc, #620]	; (8001680 <HAL_RCC_OscConfig+0x628>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e12b      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	4b98      	ldr	r3, [pc, #608]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	2202      	movs	r2, #2
 8001420:	4013      	ands	r3, r2
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x3ae>
 8001424:	e013      	b.n	800144e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb39 	bl	8000a9c <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142e:	e009      	b.n	8001444 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff fb34 	bl	8000a9c <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	4a91      	ldr	r2, [pc, #580]	; (8001680 <HAL_RCC_OscConfig+0x628>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e116      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	4b8d      	ldr	r3, [pc, #564]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800144e:	231f      	movs	r3, #31
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001458:	4b88      	ldr	r3, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800145a:	69da      	ldr	r2, [r3, #28]
 800145c:	4b87      	ldr	r3, [pc, #540]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800145e:	4989      	ldr	r1, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x62c>)
 8001460:	400a      	ands	r2, r1
 8001462:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2210      	movs	r2, #16
 800146a:	4013      	ands	r3, r2
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d12a      	bne.n	80014cc <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001476:	4b81      	ldr	r3, [pc, #516]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147a:	4b80      	ldr	r3, [pc, #512]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800147c:	2104      	movs	r1, #4
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001482:	4b7e      	ldr	r3, [pc, #504]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001486:	4b7d      	ldr	r3, [pc, #500]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001488:	2101      	movs	r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fb05 	bl	8000a9c <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001498:	f7ff fb00 	bl	8000a9c <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e0e3      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014aa:	4b74      	ldr	r3, [pc, #464]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	2202      	movs	r2, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d0f1      	beq.n	8001498 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014b4:	4b71      	ldr	r3, [pc, #452]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	22f8      	movs	r2, #248	; 0xf8
 80014ba:	4393      	bics	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	4b6d      	ldr	r3, [pc, #436]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ca:	e034      	b.n	8001536 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	3305      	adds	r3, #5
 80014d2:	d111      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014d4:	4b69      	ldr	r3, [pc, #420]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d8:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014da:	2104      	movs	r1, #4
 80014dc:	438a      	bics	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014e0:	4b66      	ldr	r3, [pc, #408]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e4:	22f8      	movs	r2, #248	; 0xf8
 80014e6:	4393      	bics	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	00da      	lsls	r2, r3, #3
 80014f0:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
 80014f6:	e01e      	b.n	8001536 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f8:	4b60      	ldr	r3, [pc, #384]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fc:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80014fe:	2104      	movs	r1, #4
 8001500:	430a      	orrs	r2, r1
 8001502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001504:	4b5d      	ldr	r3, [pc, #372]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800150a:	2101      	movs	r1, #1
 800150c:	438a      	bics	r2, r1
 800150e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fac4 	bl	8000a9c <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800151a:	f7ff fabf 	bl	8000a9c <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0a2      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d1f1      	bne.n	800151a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d100      	bne.n	8001540 <HAL_RCC_OscConfig+0x4e8>
 800153e:	e097      	b.n	8001670 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001540:	4b4e      	ldr	r3, [pc, #312]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	220c      	movs	r2, #12
 8001546:	4013      	ands	r3, r2
 8001548:	2b08      	cmp	r3, #8
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x4f6>
 800154c:	e06b      	b.n	8001626 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d14c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b48      	ldr	r3, [pc, #288]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800155c:	494a      	ldr	r1, [pc, #296]	; (8001688 <HAL_RCC_OscConfig+0x630>)
 800155e:	400a      	ands	r2, r1
 8001560:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fa9b 	bl	8000a9c <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff fa96 	bl	8000a9c <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e079      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	049b      	lsls	r3, r3, #18
 8001586:	4013      	ands	r3, r2
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	220f      	movs	r2, #15
 8001590:	4393      	bics	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
 800159e:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a3a      	ldr	r2, [pc, #232]	; (800168c <HAL_RCC_OscConfig+0x634>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	431a      	orrs	r2, r3
 80015b2:	4b32      	ldr	r3, [pc, #200]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b2f      	ldr	r3, [pc, #188]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	0449      	lsls	r1, r1, #17
 80015c2:	430a      	orrs	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa69 	bl	8000a9c <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fa64 	bl	8000a9c <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e047      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	049b      	lsls	r3, r3, #18
 80015ea:	4013      	ands	r3, r2
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x578>
 80015ee:	e03f      	b.n	8001670 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_RCC_OscConfig+0x624>)
 80015f6:	4924      	ldr	r1, [pc, #144]	; (8001688 <HAL_RCC_OscConfig+0x630>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fa4e 	bl	8000a9c <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fa49 	bl	8000a9c <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e02c      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	049b      	lsls	r3, r3, #18
 8001620:	4013      	ands	r3, r2
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x5ae>
 8001624:	e024      	b.n	8001670 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e01f      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_RCC_OscConfig+0x624>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_RCC_OscConfig+0x624>)
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	429a      	cmp	r2, r3
 800164c:	d10e      	bne.n	800166c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	220f      	movs	r2, #15
 8001652:	401a      	ands	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	23f0      	movs	r3, #240	; 0xf0
 8001660:	039b      	lsls	r3, r3, #14
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b008      	add	sp, #32
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40021000 	.word	0x40021000
 8001680:	00001388 	.word	0x00001388
 8001684:	efffffff 	.word	0xefffffff
 8001688:	feffffff 	.word	0xfeffffff
 800168c:	ffc2ffff 	.word	0xffc2ffff

08001690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0b3      	b.n	800180c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d911      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b58      	ldr	r3, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4393      	bics	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e09a      	b.n	800180c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d015      	beq.n	800170c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2204      	movs	r2, #4
 80016e6:	4013      	ands	r3, r2
 80016e8:	d006      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016ea:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 80016f0:	21e0      	movs	r1, #224	; 0xe0
 80016f2:	00c9      	lsls	r1, r1, #3
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	22f0      	movs	r2, #240	; 0xf0
 80016fe:	4393      	bics	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4b44      	ldr	r3, [pc, #272]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2201      	movs	r2, #1
 8001712:	4013      	ands	r3, r2
 8001714:	d040      	beq.n	8001798 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d114      	bne.n	8001754 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06e      	b.n	800180c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	049b      	lsls	r3, r3, #18
 800173e:	4013      	ands	r3, r2
 8001740:	d108      	bne.n	8001754 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e062      	b.n	800180c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2202      	movs	r2, #2
 800174c:	4013      	ands	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e05b      	b.n	800180c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	4393      	bics	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff f998 	bl	8000a9c <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001770:	e009      	b.n	8001786 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001772:	f7ff f993 	bl	8000a9c <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_RCC_ClockConfig+0x18c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e042      	b.n	800180c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	220c      	movs	r2, #12
 800178c:	401a      	ands	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1ec      	bne.n	8001772 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d211      	bcs.n	80017ca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4393      	bics	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_RCC_ClockConfig+0x184>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e020      	b.n	800180c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2204      	movs	r2, #4
 80017d0:	4013      	ands	r3, r2
 80017d2:	d009      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_RCC_ClockConfig+0x190>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017e8:	f000 f820 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ec:	0001      	movs	r1, r0
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x188>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	220f      	movs	r2, #15
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x194>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	000a      	movs	r2, r1
 80017fe:	40da      	lsrs	r2, r3
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x198>)
 8001802:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff f903 	bl	8000a10 <HAL_InitTick>
  
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40022000 	.word	0x40022000
 8001818:	40021000 	.word	0x40021000
 800181c:	00001388 	.word	0x00001388
 8001820:	fffff8ff 	.word	0xfffff8ff
 8001824:	0800345c 	.word	0x0800345c
 8001828:	20000000 	.word	0x20000000

0800182c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b08f      	sub	sp, #60	; 0x3c
 8001830:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001832:	2314      	movs	r3, #20
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001838:	ca13      	ldmia	r2!, {r0, r1, r4}
 800183a:	c313      	stmia	r3!, {r0, r1, r4}
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001844:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001846:	c313      	stmia	r3!, {r0, r1, r4}
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b04      	cmp	r3, #4
 800186e:	d002      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x4a>
 8001870:	2b08      	cmp	r3, #8
 8001872:	d003      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x50>
 8001874:	e02d      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800187a:	e02d      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187e:	0c9b      	lsrs	r3, r3, #18
 8001880:	220f      	movs	r2, #15
 8001882:	4013      	ands	r3, r2
 8001884:	2214      	movs	r2, #20
 8001886:	18ba      	adds	r2, r7, r2
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_RCC_GetSysClockFreq+0xc0>)
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	220f      	movs	r2, #15
 8001892:	4013      	ands	r3, r2
 8001894:	1d3a      	adds	r2, r7, #4
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800189a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	025b      	lsls	r3, r3, #9
 80018a0:	4013      	ands	r3, r2
 80018a2:	d009      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018a6:	4812      	ldr	r0, [pc, #72]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018a8:	f7fe fc2e 	bl	8000108 <__udivsi3>
 80018ac:	0003      	movs	r3, r0
 80018ae:	001a      	movs	r2, r3
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	4353      	muls	r3, r2
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
 80018b6:	e009      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80018b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ba:	000a      	movs	r2, r1
 80018bc:	0152      	lsls	r2, r2, #5
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	0193      	lsls	r3, r2, #6
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	185b      	adds	r3, r3, r1
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80018cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018d0:	e002      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b00f      	add	sp, #60	; 0x3c
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	0800343c 	.word	0x0800343c
 80018e8:	0800344c 	.word	0x0800344c
 80018ec:	40021000 	.word	0x40021000
 80018f0:	007a1200 	.word	0x007a1200

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	0001      	movs	r1, r0
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	2207      	movs	r2, #7
 800191a:	4013      	ands	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	40d9      	lsrs	r1, r3
 8001922:	000b      	movs	r3, r1
}    
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	40021000 	.word	0x40021000
 8001930:	0800346c 	.word	0x0800346c

08001934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	025b      	lsls	r3, r3, #9
 800194c:	4013      	ands	r3, r2
 800194e:	d100      	bne.n	8001952 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001950:	e08f      	b.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001952:	2317      	movs	r3, #23
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	055b      	lsls	r3, r3, #21
 8001962:	4013      	ands	r3, r2
 8001964:	d111      	bne.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0549      	lsls	r1, r1, #21
 8001970:	430a      	orrs	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
 8001974:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001976:	69da      	ldr	r2, [r3, #28]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	055b      	lsls	r3, r3, #21
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001982:	2317      	movs	r3, #23
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d11a      	bne.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4b51      	ldr	r3, [pc, #324]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	0049      	lsls	r1, r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a4:	f7ff f87a 	bl	8000a9c <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	e008      	b.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ae:	f7ff f875 	bl	8000a9c <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d901      	bls.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e087      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	23c0      	movs	r3, #192	; 0xc0
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d034      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	23c0      	movs	r3, #192	; 0xc0
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d02c      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019fa:	6a1a      	ldr	r2, [r3, #32]
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0249      	lsls	r1, r1, #9
 8001a02:	430a      	orrs	r2, r1
 8001a04:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a0c:	4935      	ldr	r1, [pc, #212]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f83c 	bl	8000a9c <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	e009      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f837 	bl	8000a9c <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a2c      	ldr	r2, [pc, #176]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e048      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a5c:	2317      	movs	r3, #23
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a6c:	491f      	ldr	r1, [pc, #124]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	2203      	movs	r2, #3
 8001a82:	4393      	bics	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2220      	movs	r2, #32
 8001a96:	4013      	ands	r3, r2
 8001a98:	d009      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d009      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	4393      	bics	r3, r2
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001aca:	430a      	orrs	r2, r1
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b006      	add	sp, #24
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	fffffcff 	.word	0xfffffcff
 8001ae4:	fffeffff 	.word	0xfffeffff
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	efffffff 	.word	0xefffffff

08001af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e01e      	b.n	8001b40 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	223d      	movs	r2, #61	; 0x3d
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d107      	bne.n	8001b1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	223c      	movs	r2, #60	; 0x3c
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7fe fe2d 	bl	8000778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	223d      	movs	r2, #61	; 0x3d
 8001b22:	2102      	movs	r1, #2
 8001b24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	0019      	movs	r1, r3
 8001b30:	0010      	movs	r0, r2
 8001b32:	f000 faf9 	bl	8002128 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	223d      	movs	r2, #61	; 0x3d
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2207      	movs	r2, #7
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d007      	beq.n	8001b82 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b004      	add	sp, #16
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e01e      	b.n	8001bdc <HAL_TIM_IC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	223d      	movs	r2, #61	; 0x3d
 8001ba2:	5c9b      	ldrb	r3, [r3, r2]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d107      	bne.n	8001bba <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	223c      	movs	r2, #60	; 0x3c
 8001bae:	2100      	movs	r1, #0
 8001bb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f815 	bl	8001be4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	223d      	movs	r2, #61	; 0x3d
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	0019      	movs	r1, r3
 8001bcc:	0010      	movs	r0, r2
 8001bce:	f000 faab 	bl	8002128 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223d      	movs	r2, #61	; 0x3d
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d124      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d11d      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4252      	negs	r2, r2
 8001c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	4013      	ands	r3, r2
 8001c32:	d004      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 fa5e 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001c3c:	e007      	b.n	8001c4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fa51 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 fa5d 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d125      	bne.n	8001cae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d11e      	bne.n	8001cae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2205      	movs	r2, #5
 8001c76:	4252      	negs	r2, r2
 8001c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 fa31 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001c96:	e007      	b.n	8001ca8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fa24 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fa30 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d124      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11d      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2209      	movs	r2, #9
 8001cd0:	4252      	negs	r2, r2
 8001cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 fa05 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001cee:	e007      	b.n	8001d00 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 f9f8 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f000 fa04 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d125      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d11e      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2211      	movs	r2, #17
 8001d28:	4252      	negs	r2, r2
 8001d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2208      	movs	r2, #8
 8001d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 f9d8 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e007      	b.n	8001d5a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 f9cb 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f000 f9d7 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10f      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d108      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2202      	movs	r2, #2
 8001d82:	4252      	negs	r2, r2
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f9a5 	bl	80020d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d10f      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d108      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2281      	movs	r2, #129	; 0x81
 8001db0:	4252      	negs	r2, r2
 8001db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 fc5a 	bl	8002670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d10f      	bne.n	8001dea <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d108      	bne.n	8001dea <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2241      	movs	r2, #65	; 0x41
 8001dde:	4252      	negs	r2, r2
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f997 	bl	8002118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2220      	movs	r2, #32
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d10f      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d108      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2221      	movs	r2, #33	; 0x21
 8001e0c:	4252      	negs	r2, r2
 8001e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 fc24 	bl	8002660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	223c      	movs	r2, #60	; 0x3c
 8001e30:	5c9b      	ldrb	r3, [r3, r2]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_IC_ConfigChannel+0x1a>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e08a      	b.n	8001f50 <HAL_TIM_IC_ConfigChannel+0x130>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	223c      	movs	r2, #60	; 0x3c
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	223d      	movs	r2, #61	; 0x3d
 8001e46:	2102      	movs	r1, #2
 8001e48:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	6819      	ldr	r1, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f000 f9e2 	bl	8002228 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	210c      	movs	r1, #12
 8001e70:	438a      	bics	r2, r1
 8001e72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6999      	ldr	r1, [r3, #24]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	619a      	str	r2, [r3, #24]
 8001e86:	e05a      	b.n	8001f3e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f000 fa4d 	bl	800233c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	492a      	ldr	r1, [pc, #168]	; (8001f58 <HAL_TIM_IC_ConfigChannel+0x138>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6999      	ldr	r1, [r3, #24]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	021a      	lsls	r2, r3, #8
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	e03a      	b.n	8001f3e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11b      	bne.n	8001f06 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	6819      	ldr	r1, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f000 faa1 	bl	8002424 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	210c      	movs	r1, #12
 8001eee:	438a      	bics	r2, r1
 8001ef0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69d9      	ldr	r1, [r3, #28]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	61da      	str	r2, [r3, #28]
 8001f04:	e01b      	b.n	8001f3e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f000 fac5 	bl	80024a4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <HAL_TIM_IC_ConfigChannel+0x138>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69d9      	ldr	r1, [r3, #28]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	021a      	lsls	r2, r3, #8
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	223d      	movs	r2, #61	; 0x3d
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	223c      	movs	r2, #60	; 0x3c
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b004      	add	sp, #16
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	fffff3ff 	.word	0xfffff3ff

08001f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223c      	movs	r2, #60	; 0x3c
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_TIM_ConfigClockSource+0x18>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0ab      	b.n	80020cc <HAL_TIM_ConfigClockSource+0x170>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	223c      	movs	r2, #60	; 0x3c
 8001f78:	2101      	movs	r1, #1
 8001f7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	223d      	movs	r2, #61	; 0x3d
 8001f80:	2102      	movs	r1, #2
 8001f82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2277      	movs	r2, #119	; 0x77
 8001f90:	4393      	bics	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a4f      	ldr	r2, [pc, #316]	; (80020d4 <HAL_TIM_ConfigClockSource+0x178>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d100      	bne.n	8001fae <HAL_TIM_ConfigClockSource+0x52>
 8001fac:	e06b      	b.n	8002086 <HAL_TIM_ConfigClockSource+0x12a>
 8001fae:	d80e      	bhi.n	8001fce <HAL_TIM_ConfigClockSource+0x72>
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d100      	bne.n	8001fb6 <HAL_TIM_ConfigClockSource+0x5a>
 8001fb4:	e077      	b.n	80020a6 <HAL_TIM_ConfigClockSource+0x14a>
 8001fb6:	d803      	bhi.n	8001fc0 <HAL_TIM_ConfigClockSource+0x64>
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <HAL_TIM_ConfigClockSource+0x62>
 8001fbc:	e073      	b.n	80020a6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001fbe:	e07c      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d100      	bne.n	8001fc6 <HAL_TIM_ConfigClockSource+0x6a>
 8001fc4:	e06f      	b.n	80020a6 <HAL_TIM_ConfigClockSource+0x14a>
 8001fc6:	2b30      	cmp	r3, #48	; 0x30
 8001fc8:	d100      	bne.n	8001fcc <HAL_TIM_ConfigClockSource+0x70>
 8001fca:	e06c      	b.n	80020a6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001fcc:	e075      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001fce:	2b70      	cmp	r3, #112	; 0x70
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_TIM_ConfigClockSource+0x94>
 8001fd2:	d804      	bhi.n	8001fde <HAL_TIM_ConfigClockSource+0x82>
 8001fd4:	2b50      	cmp	r3, #80	; 0x50
 8001fd6:	d036      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0xea>
 8001fd8:	2b60      	cmp	r3, #96	; 0x60
 8001fda:	d044      	beq.n	8002066 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001fdc:	e06d      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	0152      	lsls	r2, r2, #5
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d068      	beq.n	80020b8 <HAL_TIM_ConfigClockSource+0x15c>
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	0192      	lsls	r2, r2, #6
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d017      	beq.n	800201e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001fee:	e064      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f000 fab0 	bl	8002564 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2277      	movs	r2, #119	; 0x77
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]
      break;
 800201c:	e04d      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6899      	ldr	r1, [r3, #8]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f000 fa99 	bl	8002564 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	430a      	orrs	r2, r1
 8002042:	609a      	str	r2, [r3, #8]
      break;
 8002044:	e039      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	001a      	movs	r2, r3
 8002054:	f000 f944 	bl	80022e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2150      	movs	r1, #80	; 0x50
 800205e:	0018      	movs	r0, r3
 8002060:	f000 fa66 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 8002064:	e029      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	001a      	movs	r2, r3
 8002074:	f000 f9a4 	bl	80023c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2160      	movs	r1, #96	; 0x60
 800207e:	0018      	movs	r0, r3
 8002080:	f000 fa56 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 8002084:	e019      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	001a      	movs	r2, r3
 8002094:	f000 f924 	bl	80022e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2140      	movs	r1, #64	; 0x40
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 fa46 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 80020a4:	e009      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0019      	movs	r1, r3
 80020b0:	0010      	movs	r0, r2
 80020b2:	f000 fa3d 	bl	8002530 <TIM_ITRx_SetConfig>
      break;
 80020b6:	e000      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80020b8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223d      	movs	r2, #61	; 0x3d
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223c      	movs	r2, #60	; 0x3c
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	ffff00ff 	.word	0xffff00ff

080020d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a34      	ldr	r2, [pc, #208]	; (800220c <TIM_Base_SetConfig+0xe4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d008      	beq.n	8002152 <TIM_Base_SetConfig+0x2a>
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	05db      	lsls	r3, r3, #23
 8002146:	429a      	cmp	r2, r3
 8002148:	d003      	beq.n	8002152 <TIM_Base_SetConfig+0x2a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <TIM_Base_SetConfig+0xe8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2270      	movs	r2, #112	; 0x70
 8002156:	4393      	bics	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <TIM_Base_SetConfig+0xe4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <TIM_Base_SetConfig+0x76>
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	05db      	lsls	r3, r3, #23
 8002172:	429a      	cmp	r2, r3
 8002174:	d013      	beq.n	800219e <TIM_Base_SetConfig+0x76>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a25      	ldr	r2, [pc, #148]	; (8002210 <TIM_Base_SetConfig+0xe8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00f      	beq.n	800219e <TIM_Base_SetConfig+0x76>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a24      	ldr	r2, [pc, #144]	; (8002214 <TIM_Base_SetConfig+0xec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00b      	beq.n	800219e <TIM_Base_SetConfig+0x76>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <TIM_Base_SetConfig+0xf0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <TIM_Base_SetConfig+0x76>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <TIM_Base_SetConfig+0xf4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d003      	beq.n	800219e <TIM_Base_SetConfig+0x76>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a21      	ldr	r2, [pc, #132]	; (8002220 <TIM_Base_SetConfig+0xf8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <TIM_Base_SetConfig+0xfc>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	4393      	bics	r3, r2
 80021b6:	001a      	movs	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <TIM_Base_SetConfig+0xe4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <TIM_Base_SetConfig+0xce>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <TIM_Base_SetConfig+0xf0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <TIM_Base_SetConfig+0xce>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a0c      	ldr	r2, [pc, #48]	; (800221c <TIM_Base_SetConfig+0xf4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0xce>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <TIM_Base_SetConfig+0xf8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d103      	bne.n	80021fe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	615a      	str	r2, [r3, #20]
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b004      	add	sp, #16
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40000400 	.word	0x40000400
 8002214:	40002000 	.word	0x40002000
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800
 8002224:	fffffcff 	.word	0xfffffcff

08002228 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	2201      	movs	r2, #1
 800223c:	4393      	bics	r3, r2
 800223e:	001a      	movs	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <TIM_TI1_SetConfig+0xac>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00c      	beq.n	8002272 <TIM_TI1_SetConfig+0x4a>
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	05db      	lsls	r3, r3, #23
 800225e:	429a      	cmp	r2, r3
 8002260:	d007      	beq.n	8002272 <TIM_TI1_SetConfig+0x4a>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <TIM_TI1_SetConfig+0xb0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_TI1_SetConfig+0x4a>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <TIM_TI1_SetConfig+0xb4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <TIM_TI1_SetConfig+0x4e>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <TIM_TI1_SetConfig+0x50>
 8002276:	2300      	movs	r3, #0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2203      	movs	r2, #3
 8002280:	4393      	bics	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e003      	b.n	8002296 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2201      	movs	r2, #1
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	22f0      	movs	r2, #240	; 0xf0
 800229a:	4393      	bics	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	4013      	ands	r3, r2
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	220a      	movs	r2, #10
 80022b0:	4393      	bics	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	220a      	movs	r2, #10
 80022b8:	4013      	ands	r3, r2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	621a      	str	r2, [r3, #32]
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40012c00 	.word	0x40012c00
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40014000 	.word	0x40014000

080022e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4393      	bics	r3, r2
 80022fa:	001a      	movs	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	22f0      	movs	r2, #240	; 0xf0
 800230a:	4393      	bics	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	220a      	movs	r2, #10
 800231c:	4393      	bics	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	621a      	str	r2, [r3, #32]
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b006      	add	sp, #24
 800233a:	bd80      	pop	{r7, pc}

0800233c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	2210      	movs	r2, #16
 8002350:	4393      	bics	r3, r2
 8002352:	001a      	movs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <TIM_TI2_SetConfig+0x7c>)
 8002368:	4013      	ands	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4a10      	ldr	r2, [pc, #64]	; (80023bc <TIM_TI2_SetConfig+0x80>)
 800237a:	4013      	ands	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	031b      	lsls	r3, r3, #12
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	22a0      	movs	r2, #160	; 0xa0
 8002390:	4393      	bics	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	22a0      	movs	r2, #160	; 0xa0
 800239a:	4013      	ands	r3, r2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	621a      	str	r2, [r3, #32]
}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b006      	add	sp, #24
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	fffffcff 	.word	0xfffffcff
 80023bc:	ffff0fff 	.word	0xffff0fff

080023c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	2210      	movs	r2, #16
 80023d2:	4393      	bics	r3, r2
 80023d4:	001a      	movs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <TIM_TI2_ConfigInputStage+0x60>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	031b      	lsls	r3, r3, #12
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	22a0      	movs	r2, #160	; 0xa0
 80023fc:	4393      	bics	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	621a      	str	r2, [r3, #32]
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b006      	add	sp, #24
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	ffff0fff 	.word	0xffff0fff

08002424 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a19      	ldr	r2, [pc, #100]	; (800249c <TIM_TI3_SetConfig+0x78>)
 8002438:	401a      	ands	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2203      	movs	r2, #3
 800244e:	4393      	bics	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	22f0      	movs	r2, #240	; 0xf0
 800245e:	4393      	bics	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	22ff      	movs	r2, #255	; 0xff
 8002468:	4013      	ands	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <TIM_TI3_SetConfig+0x7c>)
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	021a      	lsls	r2, r3, #8
 800247c:	23a0      	movs	r3, #160	; 0xa0
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4013      	ands	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	621a      	str	r2, [r3, #32]
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b006      	add	sp, #24
 800249a:	bd80      	pop	{r7, pc}
 800249c:	fffffeff 	.word	0xfffffeff
 80024a0:	fffff5ff 	.word	0xfffff5ff

080024a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <TIM_TI4_SetConfig+0x7c>)
 80024b8:	401a      	ands	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <TIM_TI4_SetConfig+0x80>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <TIM_TI4_SetConfig+0x84>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	031b      	lsls	r3, r3, #12
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <TIM_TI4_SetConfig+0x88>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	031a      	lsls	r2, r3, #12
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	4013      	ands	r3, r2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b006      	add	sp, #24
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	ffffefff 	.word	0xffffefff
 8002524:	fffffcff 	.word	0xfffffcff
 8002528:	ffff0fff 	.word	0xffff0fff
 800252c:	ffff5fff 	.word	0xffff5fff

08002530 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2270      	movs	r2, #112	; 0x70
 8002544:	4393      	bics	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	2207      	movs	r2, #7
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <TIM_ETR_SetConfig+0x3c>)
 800257c:	4013      	ands	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	021a      	lsls	r2, r3, #8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	431a      	orrs	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b006      	add	sp, #24
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	ffff00ff 	.word	0xffff00ff

080025a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223c      	movs	r2, #60	; 0x3c
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e047      	b.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	223c      	movs	r2, #60	; 0x3c
 80025c0:	2101      	movs	r1, #1
 80025c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	223d      	movs	r2, #61	; 0x3d
 80025c8:	2102      	movs	r1, #2
 80025ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2270      	movs	r2, #112	; 0x70
 80025e0:	4393      	bics	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a16      	ldr	r2, [pc, #88]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00f      	beq.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	05db      	lsls	r3, r3, #23
 8002608:	429a      	cmp	r2, r3
 800260a:	d009      	beq.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d10c      	bne.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	4393      	bics	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	4313      	orrs	r3, r2
 8002630:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223d      	movs	r2, #61	; 0x3d
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223c      	movs	r2, #60	; 0x3c
 8002646:	2100      	movs	r1, #0
 8002648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40000400 	.word	0x40000400
 800265c:	40014000 	.word	0x40014000

08002660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b002      	add	sp, #8
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e044      	b.n	800271c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	2b00      	cmp	r3, #0
 8002698:	d107      	bne.n	80026aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2270      	movs	r2, #112	; 0x70
 800269e:	2100      	movs	r1, #0
 80026a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7fe f8b9 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2224      	movs	r2, #36	; 0x24
 80026ae:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	438a      	bics	r2, r1
 80026be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fafc 	bl	8002cc0 <UART_SetConfig>
 80026c8:	0003      	movs	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e024      	b.n	800271c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fc75 	bl	8002fcc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	490d      	ldr	r1, [pc, #52]	; (8002724 <HAL_UART_Init+0xa4>)
 80026ee:	400a      	ands	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	212a      	movs	r1, #42	; 0x2a
 80026fe:	438a      	bics	r2, r1
 8002700:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fd0d 	bl	8003134 <UART_CheckIdleState>
 800271a:	0003      	movs	r3, r0
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	ffffb7ff 	.word	0xffffb7ff

08002728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	1dbb      	adds	r3, r7, #6
 8002736:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	2b20      	cmp	r3, #32
 800273e:	d000      	beq.n	8002742 <HAL_UART_Transmit+0x1a>
 8002740:	e095      	b.n	800286e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_UART_Transmit+0x28>
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e08d      	b.n	8002870 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	429a      	cmp	r2, r3
 800275e:	d109      	bne.n	8002774 <HAL_UART_Transmit+0x4c>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2201      	movs	r2, #1
 800276c:	4013      	ands	r3, r2
 800276e:	d001      	beq.n	8002774 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e07d      	b.n	8002870 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2270      	movs	r2, #112	; 0x70
 8002778:	5c9b      	ldrb	r3, [r3, r2]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_UART_Transmit+0x5a>
 800277e:	2302      	movs	r3, #2
 8002780:	e076      	b.n	8002870 <HAL_UART_Transmit+0x148>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2270      	movs	r2, #112	; 0x70
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002796:	f7fe f981 	bl	8000a9c <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1dba      	adds	r2, r7, #6
 80027a2:	2150      	movs	r1, #80	; 0x50
 80027a4:	8812      	ldrh	r2, [r2, #0]
 80027a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1dba      	adds	r2, r7, #6
 80027ac:	2152      	movs	r1, #82	; 0x52
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	015b      	lsls	r3, r3, #5
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d108      	bne.n	80027d0 <HAL_UART_Transmit+0xa8>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027d8:	e02d      	b.n	8002836 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	0013      	movs	r3, r2
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	f000 fcea 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e03d      	b.n	8002870 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	05d2      	lsls	r2, r2, #23
 8002804:	0dd2      	lsrs	r2, r2, #23
 8002806:	b292      	uxth	r2, r2
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3302      	adds	r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	e008      	b.n	8002824 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	b292      	uxth	r2, r2
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3301      	adds	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2252      	movs	r2, #82	; 0x52
 8002828:	5a9b      	ldrh	r3, [r3, r2]
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b299      	uxth	r1, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2252      	movs	r2, #82	; 0x52
 8002834:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2252      	movs	r2, #82	; 0x52
 800283a:	5a9b      	ldrh	r3, [r3, r2]
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1cb      	bne.n	80027da <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	0013      	movs	r3, r2
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	f000 fcb6 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e009      	b.n	8002870 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2270      	movs	r2, #112	; 0x70
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b008      	add	sp, #32
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	1dbb      	adds	r3, r7, #6
 8002886:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288c:	2b20      	cmp	r3, #32
 800288e:	d000      	beq.n	8002892 <HAL_UART_Receive+0x1a>
 8002890:	e0c2      	b.n	8002a18 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_UART_Receive+0x28>
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0ba      	b.n	8002a1a <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d109      	bne.n	80028c4 <HAL_UART_Receive+0x4c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d001      	beq.n	80028c4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0aa      	b.n	8002a1a <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2270      	movs	r2, #112	; 0x70
 80028c8:	5c9b      	ldrb	r3, [r3, r2]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Receive+0x5a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0a3      	b.n	8002a1a <HAL_UART_Receive+0x1a2>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2270      	movs	r2, #112	; 0x70
 80028d6:	2101      	movs	r1, #1
 80028d8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2222      	movs	r2, #34	; 0x22
 80028e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80028e6:	f7fe f8d9 	bl	8000a9c <HAL_GetTick>
 80028ea:	0003      	movs	r3, r0
 80028ec:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1dba      	adds	r2, r7, #6
 80028f2:	2158      	movs	r1, #88	; 0x58
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1dba      	adds	r2, r7, #6
 80028fc:	215a      	movs	r1, #90	; 0x5a
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	429a      	cmp	r2, r3
 800290c:	d10d      	bne.n	800292a <HAL_UART_Receive+0xb2>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Receive+0xa8>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	225c      	movs	r2, #92	; 0x5c
 800291a:	4942      	ldr	r1, [pc, #264]	; (8002a24 <HAL_UART_Receive+0x1ac>)
 800291c:	5299      	strh	r1, [r3, r2]
 800291e:	e01a      	b.n	8002956 <HAL_UART_Receive+0xde>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	225c      	movs	r2, #92	; 0x5c
 8002924:	21ff      	movs	r1, #255	; 0xff
 8002926:	5299      	strh	r1, [r3, r2]
 8002928:	e015      	b.n	8002956 <HAL_UART_Receive+0xde>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_UART_Receive+0xd6>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <HAL_UART_Receive+0xcc>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	225c      	movs	r2, #92	; 0x5c
 800293e:	21ff      	movs	r1, #255	; 0xff
 8002940:	5299      	strh	r1, [r3, r2]
 8002942:	e008      	b.n	8002956 <HAL_UART_Receive+0xde>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	225c      	movs	r2, #92	; 0x5c
 8002948:	217f      	movs	r1, #127	; 0x7f
 800294a:	5299      	strh	r1, [r3, r2]
 800294c:	e003      	b.n	8002956 <HAL_UART_Receive+0xde>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	225c      	movs	r2, #92	; 0x5c
 8002952:	2100      	movs	r1, #0
 8002954:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002956:	2312      	movs	r3, #18
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	215c      	movs	r1, #92	; 0x5c
 800295e:	5a52      	ldrh	r2, [r2, r1]
 8002960:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	015b      	lsls	r3, r3, #5
 800296a:	429a      	cmp	r2, r3
 800296c:	d108      	bne.n	8002980 <HAL_UART_Receive+0x108>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e003      	b.n	8002988 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002988:	e037      	b.n	80029fa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	0013      	movs	r3, r2
 8002994:	2200      	movs	r2, #0
 8002996:	2120      	movs	r1, #32
 8002998:	f000 fc12 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e03a      	b.n	8002a1a <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2212      	movs	r2, #18
 80029b4:	18ba      	adds	r2, r7, r2
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	3302      	adds	r3, #2
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e00f      	b.n	80029e8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2212      	movs	r2, #18
 80029d4:	18ba      	adds	r2, r7, r2
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	4013      	ands	r3, r2
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3301      	adds	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	225a      	movs	r2, #90	; 0x5a
 80029ec:	5a9b      	ldrh	r3, [r3, r2]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b299      	uxth	r1, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	225a      	movs	r2, #90	; 0x5a
 80029f8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	225a      	movs	r2, #90	; 0x5a
 80029fe:	5a9b      	ldrh	r3, [r3, r2]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1c1      	bne.n	800298a <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2270      	movs	r2, #112	; 0x70
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
  }
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b008      	add	sp, #32
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	000001ff 	.word	0x000001ff

08002a28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4a93      	ldr	r2, [pc, #588]	; (8002c98 <HAL_UART_IRQHandler+0x270>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d112      	bne.n	8002a7c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2220      	movs	r2, #32
 8002a62:	4013      	ands	r3, r2
 8002a64:	d00a      	beq.n	8002a7c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d100      	bne.n	8002a70 <HAL_UART_IRQHandler+0x48>
 8002a6e:	e10b      	b.n	8002c88 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	0010      	movs	r0, r2
 8002a78:	4798      	blx	r3
      }
      return;
 8002a7a:	e105      	b.n	8002c88 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d100      	bne.n	8002a84 <HAL_UART_IRQHandler+0x5c>
 8002a82:	e0cd      	b.n	8002c20 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2201      	movs	r2, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d105      	bne.n	8002a98 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	2390      	movs	r3, #144	; 0x90
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	d100      	bne.n	8002a98 <HAL_UART_IRQHandler+0x70>
 8002a96:	e0c3      	b.n	8002c20 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_UART_IRQHandler+0x96>
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xba>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ada:	2204      	movs	r2, #4
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_UART_IRQHandler+0xde>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2204      	movs	r2, #4
 8002af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afe:	2202      	movs	r2, #2
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d011      	beq.n	8002b32 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2220      	movs	r2, #32
 8002b12:	4013      	ands	r3, r2
 8002b14:	d103      	bne.n	8002b1e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b1c:	d009      	beq.n	8002b32 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2208      	movs	r2, #8
 8002b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d00f      	beq.n	8002b5c <HAL_UART_IRQHandler+0x134>
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	04db      	lsls	r3, r3, #19
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00a      	beq.n	8002b5c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b54:	2220      	movs	r2, #32
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d100      	bne.n	8002b66 <HAL_UART_IRQHandler+0x13e>
 8002b64:	e092      	b.n	8002c8c <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d00c      	beq.n	8002b88 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2220      	movs	r2, #32
 8002b72:	4013      	ands	r3, r2
 8002b74:	d008      	beq.n	8002b88 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	0010      	movs	r0, r2
 8002b86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d003      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2228      	movs	r2, #40	; 0x28
 8002ba0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba2:	d033      	beq.n	8002c0c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fb88 	bl	80032bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2240      	movs	r2, #64	; 0x40
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d123      	bne.n	8002c02 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2140      	movs	r1, #64	; 0x40
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd6:	4a31      	ldr	r2, [pc, #196]	; (8002c9c <HAL_UART_IRQHandler+0x274>)
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fe f866 	bl	8000cb0 <HAL_DMA_Abort_IT>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d019      	beq.n	8002c1c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf6:	e011      	b.n	8002c1c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f858 	bl	8002cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	e00c      	b.n	8002c1c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 f853 	bl	8002cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	e007      	b.n	8002c1c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f84e 	bl	8002cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002c1a:	e037      	b.n	8002c8c <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	46c0      	nop			; (mov r8, r8)
    return;
 8002c1e:	e035      	b.n	8002c8c <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	035b      	lsls	r3, r3, #13
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00e      	beq.n	8002c48 <HAL_UART_IRQHandler+0x220>
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	03db      	lsls	r3, r3, #15
 8002c30:	4013      	ands	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0352      	lsls	r2, r2, #13
 8002c3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 fb8c 	bl	800335e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c46:	e024      	b.n	8002c92 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d00d      	beq.n	8002c6c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	4013      	ands	r3, r2
 8002c56:	d009      	beq.n	8002c6c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	0010      	movs	r0, r2
 8002c68:	4798      	blx	r3
    }
    return;
 8002c6a:	e011      	b.n	8002c90 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	4013      	ands	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_UART_IRQHandler+0x26a>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d00a      	beq.n	8002c92 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 fb53 	bl	800332a <UART_EndTransmit_IT>
    return;
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	e004      	b.n	8002c92 <HAL_UART_IRQHandler+0x26a>
      return;
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	e002      	b.n	8002c92 <HAL_UART_IRQHandler+0x26a>
    return;
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	e000      	b.n	8002c92 <HAL_UART_IRQHandler+0x26a>
    return;
 8002c90:	46c0      	nop			; (mov r8, r8)
  }

}
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b008      	add	sp, #32
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	0000080f 	.word	0x0000080f
 8002c9c:	080032fd 	.word	0x080032fd

08002ca0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ccc:	2317      	movs	r3, #23
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4aad      	ldr	r2, [pc, #692]	; (8002fa8 <UART_SetConfig+0x2e8>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4aa8      	ldr	r2, [pc, #672]	; (8002fac <UART_SetConfig+0x2ec>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a9f      	ldr	r2, [pc, #636]	; (8002fb0 <UART_SetConfig+0x2f0>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a9b      	ldr	r2, [pc, #620]	; (8002fb4 <UART_SetConfig+0x2f4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d125      	bne.n	8002d96 <UART_SetConfig+0xd6>
 8002d4a:	4b9b      	ldr	r3, [pc, #620]	; (8002fb8 <UART_SetConfig+0x2f8>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	2203      	movs	r2, #3
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d00f      	beq.n	8002d76 <UART_SetConfig+0xb6>
 8002d56:	d304      	bcc.n	8002d62 <UART_SetConfig+0xa2>
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d011      	beq.n	8002d80 <UART_SetConfig+0xc0>
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d005      	beq.n	8002d6c <UART_SetConfig+0xac>
 8002d60:	e013      	b.n	8002d8a <UART_SetConfig+0xca>
 8002d62:	231f      	movs	r3, #31
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e022      	b.n	8002db2 <UART_SetConfig+0xf2>
 8002d6c:	231f      	movs	r3, #31
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2202      	movs	r2, #2
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e01d      	b.n	8002db2 <UART_SetConfig+0xf2>
 8002d76:	231f      	movs	r3, #31
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e018      	b.n	8002db2 <UART_SetConfig+0xf2>
 8002d80:	231f      	movs	r3, #31
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2208      	movs	r2, #8
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e013      	b.n	8002db2 <UART_SetConfig+0xf2>
 8002d8a:	231f      	movs	r3, #31
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2210      	movs	r2, #16
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	e00d      	b.n	8002db2 <UART_SetConfig+0xf2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a88      	ldr	r2, [pc, #544]	; (8002fbc <UART_SetConfig+0x2fc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d104      	bne.n	8002daa <UART_SetConfig+0xea>
 8002da0:	231f      	movs	r3, #31
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e003      	b.n	8002db2 <UART_SetConfig+0xf2>
 8002daa:	231f      	movs	r3, #31
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2210      	movs	r2, #16
 8002db0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d000      	beq.n	8002dc0 <UART_SetConfig+0x100>
 8002dbe:	e07d      	b.n	8002ebc <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002dc0:	231f      	movs	r3, #31
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d01c      	beq.n	8002e04 <UART_SetConfig+0x144>
 8002dca:	dc02      	bgt.n	8002dd2 <UART_SetConfig+0x112>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <UART_SetConfig+0x11c>
 8002dd0:	e04b      	b.n	8002e6a <UART_SetConfig+0x1aa>
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d025      	beq.n	8002e22 <UART_SetConfig+0x162>
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d037      	beq.n	8002e4a <UART_SetConfig+0x18a>
 8002dda:	e046      	b.n	8002e6a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f7fe fd94 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002de0:	0003      	movs	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	005a      	lsls	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	18d2      	adds	r2, r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0019      	movs	r1, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	f7fd f986 	bl	8000108 <__udivsi3>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	61bb      	str	r3, [r7, #24]
        break;
 8002e02:	e037      	b.n	8002e74 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	4a6d      	ldr	r2, [pc, #436]	; (8002fc0 <UART_SetConfig+0x300>)
 8002e0c:	189a      	adds	r2, r3, r2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0019      	movs	r1, r3
 8002e14:	0010      	movs	r0, r2
 8002e16:	f7fd f977 	bl	8000108 <__udivsi3>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e028      	b.n	8002e74 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e22:	f7fe fd03 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8002e26:	0003      	movs	r3, r0
 8002e28:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	005a      	lsls	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	18d2      	adds	r2, r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	f7fd f963 	bl	8000108 <__udivsi3>
 8002e42:	0003      	movs	r3, r0
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	61bb      	str	r3, [r7, #24]
        break;
 8002e48:	e014      	b.n	8002e74 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	0252      	lsls	r2, r2, #9
 8002e54:	189a      	adds	r2, r3, r2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	0010      	movs	r0, r2
 8002e5e:	f7fd f953 	bl	8000108 <__udivsi3>
 8002e62:	0003      	movs	r3, r0
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	61bb      	str	r3, [r7, #24]
        break;
 8002e68:	e004      	b.n	8002e74 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002e6a:	2317      	movs	r3, #23
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
        break;
 8002e72:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	d91b      	bls.n	8002eb2 <UART_SetConfig+0x1f2>
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	; (8002fc4 <UART_SetConfig+0x304>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d817      	bhi.n	8002eb2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	200a      	movs	r0, #10
 8002e88:	183b      	adds	r3, r7, r0
 8002e8a:	210f      	movs	r1, #15
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2207      	movs	r2, #7
 8002e98:	4013      	ands	r3, r2
 8002e9a:	b299      	uxth	r1, r3
 8002e9c:	183b      	adds	r3, r7, r0
 8002e9e:	183a      	adds	r2, r7, r0
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	183a      	adds	r2, r7, r0
 8002eac:	8812      	ldrh	r2, [r2, #0]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	e06c      	b.n	8002f8c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002eb2:	2317      	movs	r3, #23
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e067      	b.n	8002f8c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002ebc:	231f      	movs	r3, #31
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d01b      	beq.n	8002efe <UART_SetConfig+0x23e>
 8002ec6:	dc02      	bgt.n	8002ece <UART_SetConfig+0x20e>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <UART_SetConfig+0x218>
 8002ecc:	e049      	b.n	8002f62 <UART_SetConfig+0x2a2>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d024      	beq.n	8002f1c <UART_SetConfig+0x25c>
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d035      	beq.n	8002f42 <UART_SetConfig+0x282>
 8002ed6:	e044      	b.n	8002f62 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f7fe fd16 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002edc:	0003      	movs	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	085a      	lsrs	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	18d2      	adds	r2, r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0019      	movs	r1, r3
 8002ef0:	0010      	movs	r0, r2
 8002ef2:	f7fd f909 	bl	8000108 <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	61bb      	str	r3, [r7, #24]
        break;
 8002efc:	e036      	b.n	8002f6c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <UART_SetConfig+0x308>)
 8002f06:	189a      	adds	r2, r3, r2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	0010      	movs	r0, r2
 8002f10:	f7fd f8fa 	bl	8000108 <__udivsi3>
 8002f14:	0003      	movs	r3, r0
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	61bb      	str	r3, [r7, #24]
        break;
 8002f1a:	e027      	b.n	8002f6c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1c:	f7fe fc86 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8002f20:	0003      	movs	r3, r0
 8002f22:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	085a      	lsrs	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	18d2      	adds	r2, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0019      	movs	r1, r3
 8002f34:	0010      	movs	r0, r2
 8002f36:	f7fd f8e7 	bl	8000108 <__udivsi3>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	61bb      	str	r3, [r7, #24]
        break;
 8002f40:	e014      	b.n	8002f6c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	0212      	lsls	r2, r2, #8
 8002f4c:	189a      	adds	r2, r3, r2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0019      	movs	r1, r3
 8002f54:	0010      	movs	r0, r2
 8002f56:	f7fd f8d7 	bl	8000108 <__udivsi3>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	61bb      	str	r3, [r7, #24]
        break;
 8002f60:	e004      	b.n	8002f6c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002f62:	2317      	movs	r3, #23
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
        break;
 8002f6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d908      	bls.n	8002f84 <UART_SetConfig+0x2c4>
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <UART_SetConfig+0x304>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d804      	bhi.n	8002f84 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	e003      	b.n	8002f8c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002f84:	2317      	movs	r3, #23
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f98:	2317      	movs	r3, #23
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	781b      	ldrb	r3, [r3, #0]
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b008      	add	sp, #32
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	ffff69f3 	.word	0xffff69f3
 8002fac:	ffffcfff 	.word	0xffffcfff
 8002fb0:	fffff4ff 	.word	0xfffff4ff
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40004400 	.word	0x40004400
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	0000ffff 	.word	0x0000ffff
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <UART_AdvFeatureConfig+0x144>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a43      	ldr	r2, [pc, #268]	; (8003114 <UART_AdvFeatureConfig+0x148>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2204      	movs	r2, #4
 800301e:	4013      	ands	r3, r2
 8003020:	d00b      	beq.n	800303a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a3b      	ldr	r2, [pc, #236]	; (8003118 <UART_AdvFeatureConfig+0x14c>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2208      	movs	r2, #8
 8003040:	4013      	ands	r3, r2
 8003042:	d00b      	beq.n	800305c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a34      	ldr	r2, [pc, #208]	; (800311c <UART_AdvFeatureConfig+0x150>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2210      	movs	r2, #16
 8003062:	4013      	ands	r3, r2
 8003064:	d00b      	beq.n	800307e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <UART_AdvFeatureConfig+0x154>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2220      	movs	r2, #32
 8003084:	4013      	ands	r3, r2
 8003086:	d00b      	beq.n	80030a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4a25      	ldr	r2, [pc, #148]	; (8003124 <UART_AdvFeatureConfig+0x158>)
 8003090:	4013      	ands	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2240      	movs	r2, #64	; 0x40
 80030a6:	4013      	ands	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <UART_AdvFeatureConfig+0x15c>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	035b      	lsls	r3, r3, #13
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d10b      	bne.n	80030e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a15      	ldr	r2, [pc, #84]	; (800312c <UART_AdvFeatureConfig+0x160>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	4013      	ands	r3, r2
 80030ee:	d00b      	beq.n	8003108 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <UART_AdvFeatureConfig+0x164>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
  }
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}
 8003110:	fffdffff 	.word	0xfffdffff
 8003114:	fffeffff 	.word	0xfffeffff
 8003118:	fffbffff 	.word	0xfffbffff
 800311c:	ffff7fff 	.word	0xffff7fff
 8003120:	ffffefff 	.word	0xffffefff
 8003124:	ffffdfff 	.word	0xffffdfff
 8003128:	ffefffff 	.word	0xffefffff
 800312c:	ff9fffff 	.word	0xff9fffff
 8003130:	fff7ffff 	.word	0xfff7ffff

08003134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003142:	f7fd fcab 	bl	8000a9c <HAL_GetTick>
 8003146:	0003      	movs	r3, r0
 8003148:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2208      	movs	r2, #8
 8003152:	4013      	ands	r3, r2
 8003154:	2b08      	cmp	r3, #8
 8003156:	d10d      	bne.n	8003174 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	0399      	lsls	r1, r3, #14
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <UART_CheckIdleState+0x88>)
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	0013      	movs	r3, r2
 8003166:	2200      	movs	r2, #0
 8003168:	f000 f82a 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 800316c:	1e03      	subs	r3, r0, #0
 800316e:	d001      	beq.n	8003174 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e01f      	b.n	80031b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2204      	movs	r2, #4
 800317c:	4013      	ands	r3, r2
 800317e:	2b04      	cmp	r3, #4
 8003180:	d10d      	bne.n	800319e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	03d9      	lsls	r1, r3, #15
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <UART_CheckIdleState+0x88>)
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	0013      	movs	r3, r2
 8003190:	2200      	movs	r2, #0
 8003192:	f000 f815 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e00a      	b.n	80031b4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2270      	movs	r2, #112	; 0x70
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b004      	add	sp, #16
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	01ffffff 	.word	0x01ffffff

080031c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d0:	e05d      	b.n	800328e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	3301      	adds	r3, #1
 80031d6:	d05a      	beq.n	800328e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d8:	f7fd fc60 	bl	8000a9c <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d302      	bcc.n	80031ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11b      	bne.n	8003226 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	492f      	ldr	r1, [pc, #188]	; (80032b8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	438a      	bics	r2, r1
 800320c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2270      	movs	r2, #112	; 0x70
 800321e:	2100      	movs	r1, #0
 8003220:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e043      	b.n	80032ae <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2204      	movs	r2, #4
 800322e:	4013      	ands	r3, r2
 8003230:	d02d      	beq.n	800328e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	401a      	ands	r2, r3
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	429a      	cmp	r2, r3
 8003244:	d123      	bne.n	800328e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	0112      	lsls	r2, r2, #4
 800324e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4917      	ldr	r1, [pc, #92]	; (80032b8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800325c:	400a      	ands	r2, r1
 800325e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2101      	movs	r1, #1
 800326c:	438a      	bics	r2, r1
 800326e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2270      	movs	r2, #112	; 0x70
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e00f      	b.n	80032ae <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	4013      	ands	r3, r2
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	425a      	negs	r2, r3
 800329e:	4153      	adcs	r3, r2
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	001a      	movs	r2, r3
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d092      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	fffffe5f 	.word	0xfffffe5f

080032bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <UART_EndRxTransfer+0x3c>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2101      	movs	r1, #1
 80032e0:	438a      	bics	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	fffffedf 	.word	0xfffffedf

080032fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	225a      	movs	r2, #90	; 0x5a
 800330e:	2100      	movs	r1, #0
 8003310:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2252      	movs	r2, #82	; 0x52
 8003316:	2100      	movs	r1, #0
 8003318:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff fcc7 	bl	8002cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}

0800332a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	438a      	bics	r2, r1
 8003340:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff fca5 	bl	8002ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b002      	add	sp, #8
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <__libc_init_array>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	2600      	movs	r6, #0
 8003374:	4d0c      	ldr	r5, [pc, #48]	; (80033a8 <__libc_init_array+0x38>)
 8003376:	4c0d      	ldr	r4, [pc, #52]	; (80033ac <__libc_init_array+0x3c>)
 8003378:	1b64      	subs	r4, r4, r5
 800337a:	10a4      	asrs	r4, r4, #2
 800337c:	42a6      	cmp	r6, r4
 800337e:	d109      	bne.n	8003394 <__libc_init_array+0x24>
 8003380:	2600      	movs	r6, #0
 8003382:	f000 f821 	bl	80033c8 <_init>
 8003386:	4d0a      	ldr	r5, [pc, #40]	; (80033b0 <__libc_init_array+0x40>)
 8003388:	4c0a      	ldr	r4, [pc, #40]	; (80033b4 <__libc_init_array+0x44>)
 800338a:	1b64      	subs	r4, r4, r5
 800338c:	10a4      	asrs	r4, r4, #2
 800338e:	42a6      	cmp	r6, r4
 8003390:	d105      	bne.n	800339e <__libc_init_array+0x2e>
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	00b3      	lsls	r3, r6, #2
 8003396:	58eb      	ldr	r3, [r5, r3]
 8003398:	4798      	blx	r3
 800339a:	3601      	adds	r6, #1
 800339c:	e7ee      	b.n	800337c <__libc_init_array+0xc>
 800339e:	00b3      	lsls	r3, r6, #2
 80033a0:	58eb      	ldr	r3, [r5, r3]
 80033a2:	4798      	blx	r3
 80033a4:	3601      	adds	r6, #1
 80033a6:	e7f2      	b.n	800338e <__libc_init_array+0x1e>
 80033a8:	08003474 	.word	0x08003474
 80033ac:	08003474 	.word	0x08003474
 80033b0:	08003474 	.word	0x08003474
 80033b4:	08003478 	.word	0x08003478

080033b8 <memset>:
 80033b8:	0003      	movs	r3, r0
 80033ba:	1812      	adds	r2, r2, r0
 80033bc:	4293      	cmp	r3, r2
 80033be:	d100      	bne.n	80033c2 <memset+0xa>
 80033c0:	4770      	bx	lr
 80033c2:	7019      	strb	r1, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	e7f9      	b.n	80033bc <memset+0x4>

080033c8 <_init>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr

080033d4 <_fini>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr
