
DexTires_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003640  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080037c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080037c4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008186  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014ad  00000000  00000000  000281ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  00029668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002a000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000013c7  00000000  00000000  0002a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000071e2  00000000  00000000  0002bca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00052734  00000000  00000000  00032e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000855bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002304  00000000  00000000  00085638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036e8 	.word	0x080036e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080036e8 	.word	0x080036e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	46de      	mov	lr, fp
 8000226:	464e      	mov	r6, r9
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4683      	mov	fp, r0
 800022e:	0007      	movs	r7, r0
 8000230:	030e      	lsls	r6, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	b085      	sub	sp, #20
 8000236:	4692      	mov	sl, r2
 8000238:	001c      	movs	r4, r3
 800023a:	0b36      	lsrs	r6, r6, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fcd      	lsrs	r5, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d100      	bne.n	8000246 <__aeabi_ddiv+0x26>
 8000244:	e09d      	b.n	8000382 <__aeabi_ddiv+0x162>
 8000246:	4b95      	ldr	r3, [pc, #596]	; (800049c <__aeabi_ddiv+0x27c>)
 8000248:	4298      	cmp	r0, r3
 800024a:	d039      	beq.n	80002c0 <__aeabi_ddiv+0xa0>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	00f6      	lsls	r6, r6, #3
 8000250:	041b      	lsls	r3, r3, #16
 8000252:	431e      	orrs	r6, r3
 8000254:	4a92      	ldr	r2, [pc, #584]	; (80004a0 <__aeabi_ddiv+0x280>)
 8000256:	0f7b      	lsrs	r3, r7, #29
 8000258:	4333      	orrs	r3, r6
 800025a:	4699      	mov	r9, r3
 800025c:	4694      	mov	ip, r2
 800025e:	0003      	movs	r3, r0
 8000260:	4463      	add	r3, ip
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2300      	movs	r3, #0
 8000266:	2600      	movs	r6, #0
 8000268:	00ff      	lsls	r7, r7, #3
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	0323      	lsls	r3, r4, #12
 800026e:	0b1b      	lsrs	r3, r3, #12
 8000270:	4698      	mov	r8, r3
 8000272:	0063      	lsls	r3, r4, #1
 8000274:	0fe4      	lsrs	r4, r4, #31
 8000276:	4652      	mov	r2, sl
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	9401      	str	r4, [sp, #4]
 800027c:	d100      	bne.n	8000280 <__aeabi_ddiv+0x60>
 800027e:	e0b3      	b.n	80003e8 <__aeabi_ddiv+0x1c8>
 8000280:	4986      	ldr	r1, [pc, #536]	; (800049c <__aeabi_ddiv+0x27c>)
 8000282:	428b      	cmp	r3, r1
 8000284:	d100      	bne.n	8000288 <__aeabi_ddiv+0x68>
 8000286:	e09e      	b.n	80003c6 <__aeabi_ddiv+0x1a6>
 8000288:	4642      	mov	r2, r8
 800028a:	00d1      	lsls	r1, r2, #3
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	430a      	orrs	r2, r1
 8000292:	4651      	mov	r1, sl
 8000294:	0f49      	lsrs	r1, r1, #29
 8000296:	4311      	orrs	r1, r2
 8000298:	468b      	mov	fp, r1
 800029a:	4981      	ldr	r1, [pc, #516]	; (80004a0 <__aeabi_ddiv+0x280>)
 800029c:	4652      	mov	r2, sl
 800029e:	468c      	mov	ip, r1
 80002a0:	9900      	ldr	r1, [sp, #0]
 80002a2:	4463      	add	r3, ip
 80002a4:	1acb      	subs	r3, r1, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	00d2      	lsls	r2, r2, #3
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	002b      	movs	r3, r5
 80002ae:	4063      	eors	r3, r4
 80002b0:	469a      	mov	sl, r3
 80002b2:	2e0f      	cmp	r6, #15
 80002b4:	d900      	bls.n	80002b8 <__aeabi_ddiv+0x98>
 80002b6:	e105      	b.n	80004c4 <__aeabi_ddiv+0x2a4>
 80002b8:	4b7a      	ldr	r3, [pc, #488]	; (80004a4 <__aeabi_ddiv+0x284>)
 80002ba:	00b6      	lsls	r6, r6, #2
 80002bc:	599b      	ldr	r3, [r3, r6]
 80002be:	469f      	mov	pc, r3
 80002c0:	465b      	mov	r3, fp
 80002c2:	4333      	orrs	r3, r6
 80002c4:	4699      	mov	r9, r3
 80002c6:	d000      	beq.n	80002ca <__aeabi_ddiv+0xaa>
 80002c8:	e0b8      	b.n	800043c <__aeabi_ddiv+0x21c>
 80002ca:	2302      	movs	r3, #2
 80002cc:	2608      	movs	r6, #8
 80002ce:	2700      	movs	r7, #0
 80002d0:	9000      	str	r0, [sp, #0]
 80002d2:	9302      	str	r3, [sp, #8]
 80002d4:	e7ca      	b.n	800026c <__aeabi_ddiv+0x4c>
 80002d6:	46cb      	mov	fp, r9
 80002d8:	003a      	movs	r2, r7
 80002da:	9902      	ldr	r1, [sp, #8]
 80002dc:	9501      	str	r5, [sp, #4]
 80002de:	9b01      	ldr	r3, [sp, #4]
 80002e0:	469a      	mov	sl, r3
 80002e2:	2902      	cmp	r1, #2
 80002e4:	d027      	beq.n	8000336 <__aeabi_ddiv+0x116>
 80002e6:	2903      	cmp	r1, #3
 80002e8:	d100      	bne.n	80002ec <__aeabi_ddiv+0xcc>
 80002ea:	e280      	b.n	80007ee <__aeabi_ddiv+0x5ce>
 80002ec:	2901      	cmp	r1, #1
 80002ee:	d044      	beq.n	800037a <__aeabi_ddiv+0x15a>
 80002f0:	496d      	ldr	r1, [pc, #436]	; (80004a8 <__aeabi_ddiv+0x288>)
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	468c      	mov	ip, r1
 80002f6:	4463      	add	r3, ip
 80002f8:	001c      	movs	r4, r3
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	dd38      	ble.n	8000370 <__aeabi_ddiv+0x150>
 80002fe:	0753      	lsls	r3, r2, #29
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xe4>
 8000302:	e213      	b.n	800072c <__aeabi_ddiv+0x50c>
 8000304:	08d2      	lsrs	r2, r2, #3
 8000306:	465b      	mov	r3, fp
 8000308:	01db      	lsls	r3, r3, #7
 800030a:	d509      	bpl.n	8000320 <__aeabi_ddiv+0x100>
 800030c:	4659      	mov	r1, fp
 800030e:	4b67      	ldr	r3, [pc, #412]	; (80004ac <__aeabi_ddiv+0x28c>)
 8000310:	4019      	ands	r1, r3
 8000312:	468b      	mov	fp, r1
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	00c9      	lsls	r1, r1, #3
 8000318:	468c      	mov	ip, r1
 800031a:	9b00      	ldr	r3, [sp, #0]
 800031c:	4463      	add	r3, ip
 800031e:	001c      	movs	r4, r3
 8000320:	4b63      	ldr	r3, [pc, #396]	; (80004b0 <__aeabi_ddiv+0x290>)
 8000322:	429c      	cmp	r4, r3
 8000324:	dc07      	bgt.n	8000336 <__aeabi_ddiv+0x116>
 8000326:	465b      	mov	r3, fp
 8000328:	0564      	lsls	r4, r4, #21
 800032a:	075f      	lsls	r7, r3, #29
 800032c:	025b      	lsls	r3, r3, #9
 800032e:	4317      	orrs	r7, r2
 8000330:	0b1b      	lsrs	r3, r3, #12
 8000332:	0d62      	lsrs	r2, r4, #21
 8000334:	e002      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000336:	2300      	movs	r3, #0
 8000338:	2700      	movs	r7, #0
 800033a:	4a58      	ldr	r2, [pc, #352]	; (800049c <__aeabi_ddiv+0x27c>)
 800033c:	2100      	movs	r1, #0
 800033e:	031b      	lsls	r3, r3, #12
 8000340:	0b1c      	lsrs	r4, r3, #12
 8000342:	0d0b      	lsrs	r3, r1, #20
 8000344:	051b      	lsls	r3, r3, #20
 8000346:	4323      	orrs	r3, r4
 8000348:	0514      	lsls	r4, r2, #20
 800034a:	4a5a      	ldr	r2, [pc, #360]	; (80004b4 <__aeabi_ddiv+0x294>)
 800034c:	0038      	movs	r0, r7
 800034e:	4013      	ands	r3, r2
 8000350:	431c      	orrs	r4, r3
 8000352:	4653      	mov	r3, sl
 8000354:	0064      	lsls	r4, r4, #1
 8000356:	07db      	lsls	r3, r3, #31
 8000358:	0864      	lsrs	r4, r4, #1
 800035a:	431c      	orrs	r4, r3
 800035c:	0021      	movs	r1, r4
 800035e:	b005      	add	sp, #20
 8000360:	bc3c      	pop	{r2, r3, r4, r5}
 8000362:	4690      	mov	r8, r2
 8000364:	4699      	mov	r9, r3
 8000366:	46a2      	mov	sl, r4
 8000368:	46ab      	mov	fp, r5
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	2201      	movs	r2, #1
 800036e:	4252      	negs	r2, r2
 8000370:	2301      	movs	r3, #1
 8000372:	1b1b      	subs	r3, r3, r4
 8000374:	2b38      	cmp	r3, #56	; 0x38
 8000376:	dc00      	bgt.n	800037a <__aeabi_ddiv+0x15a>
 8000378:	e1ad      	b.n	80006d6 <__aeabi_ddiv+0x4b6>
 800037a:	2200      	movs	r2, #0
 800037c:	2300      	movs	r3, #0
 800037e:	2700      	movs	r7, #0
 8000380:	e7dc      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000382:	465b      	mov	r3, fp
 8000384:	4333      	orrs	r3, r6
 8000386:	4699      	mov	r9, r3
 8000388:	d05e      	beq.n	8000448 <__aeabi_ddiv+0x228>
 800038a:	2e00      	cmp	r6, #0
 800038c:	d100      	bne.n	8000390 <__aeabi_ddiv+0x170>
 800038e:	e18a      	b.n	80006a6 <__aeabi_ddiv+0x486>
 8000390:	0030      	movs	r0, r6
 8000392:	f000 fd21 	bl	8000dd8 <__clzsi2>
 8000396:	0003      	movs	r3, r0
 8000398:	3b0b      	subs	r3, #11
 800039a:	2b1c      	cmp	r3, #28
 800039c:	dd00      	ble.n	80003a0 <__aeabi_ddiv+0x180>
 800039e:	e17b      	b.n	8000698 <__aeabi_ddiv+0x478>
 80003a0:	221d      	movs	r2, #29
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	465a      	mov	r2, fp
 80003a6:	0001      	movs	r1, r0
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	3908      	subs	r1, #8
 80003ac:	408e      	lsls	r6, r1
 80003ae:	0013      	movs	r3, r2
 80003b0:	465f      	mov	r7, fp
 80003b2:	4333      	orrs	r3, r6
 80003b4:	4699      	mov	r9, r3
 80003b6:	408f      	lsls	r7, r1
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <__aeabi_ddiv+0x298>)
 80003ba:	2600      	movs	r6, #0
 80003bc:	1a1b      	subs	r3, r3, r0
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	9302      	str	r3, [sp, #8]
 80003c4:	e752      	b.n	800026c <__aeabi_ddiv+0x4c>
 80003c6:	4641      	mov	r1, r8
 80003c8:	4653      	mov	r3, sl
 80003ca:	430b      	orrs	r3, r1
 80003cc:	493b      	ldr	r1, [pc, #236]	; (80004bc <__aeabi_ddiv+0x29c>)
 80003ce:	469b      	mov	fp, r3
 80003d0:	468c      	mov	ip, r1
 80003d2:	9b00      	ldr	r3, [sp, #0]
 80003d4:	4463      	add	r3, ip
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	465b      	mov	r3, fp
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d13b      	bne.n	8000456 <__aeabi_ddiv+0x236>
 80003de:	2302      	movs	r3, #2
 80003e0:	2200      	movs	r2, #0
 80003e2:	431e      	orrs	r6, r3
 80003e4:	2102      	movs	r1, #2
 80003e6:	e761      	b.n	80002ac <__aeabi_ddiv+0x8c>
 80003e8:	4643      	mov	r3, r8
 80003ea:	4313      	orrs	r3, r2
 80003ec:	469b      	mov	fp, r3
 80003ee:	d037      	beq.n	8000460 <__aeabi_ddiv+0x240>
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d100      	bne.n	80003f8 <__aeabi_ddiv+0x1d8>
 80003f6:	e162      	b.n	80006be <__aeabi_ddiv+0x49e>
 80003f8:	4640      	mov	r0, r8
 80003fa:	f000 fced 	bl	8000dd8 <__clzsi2>
 80003fe:	0003      	movs	r3, r0
 8000400:	3b0b      	subs	r3, #11
 8000402:	2b1c      	cmp	r3, #28
 8000404:	dd00      	ble.n	8000408 <__aeabi_ddiv+0x1e8>
 8000406:	e153      	b.n	80006b0 <__aeabi_ddiv+0x490>
 8000408:	0002      	movs	r2, r0
 800040a:	4641      	mov	r1, r8
 800040c:	3a08      	subs	r2, #8
 800040e:	4091      	lsls	r1, r2
 8000410:	4688      	mov	r8, r1
 8000412:	211d      	movs	r1, #29
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	4651      	mov	r1, sl
 8000418:	40d9      	lsrs	r1, r3
 800041a:	000b      	movs	r3, r1
 800041c:	4641      	mov	r1, r8
 800041e:	430b      	orrs	r3, r1
 8000420:	469b      	mov	fp, r3
 8000422:	4653      	mov	r3, sl
 8000424:	4093      	lsls	r3, r2
 8000426:	001a      	movs	r2, r3
 8000428:	9b00      	ldr	r3, [sp, #0]
 800042a:	4925      	ldr	r1, [pc, #148]	; (80004c0 <__aeabi_ddiv+0x2a0>)
 800042c:	469c      	mov	ip, r3
 800042e:	4460      	add	r0, ip
 8000430:	0003      	movs	r3, r0
 8000432:	468c      	mov	ip, r1
 8000434:	4463      	add	r3, ip
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2100      	movs	r1, #0
 800043a:	e737      	b.n	80002ac <__aeabi_ddiv+0x8c>
 800043c:	2303      	movs	r3, #3
 800043e:	46b1      	mov	r9, r6
 8000440:	9000      	str	r0, [sp, #0]
 8000442:	260c      	movs	r6, #12
 8000444:	9302      	str	r3, [sp, #8]
 8000446:	e711      	b.n	800026c <__aeabi_ddiv+0x4c>
 8000448:	2300      	movs	r3, #0
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	2604      	movs	r6, #4
 8000450:	2700      	movs	r7, #0
 8000452:	9302      	str	r3, [sp, #8]
 8000454:	e70a      	b.n	800026c <__aeabi_ddiv+0x4c>
 8000456:	2303      	movs	r3, #3
 8000458:	46c3      	mov	fp, r8
 800045a:	431e      	orrs	r6, r3
 800045c:	2103      	movs	r1, #3
 800045e:	e725      	b.n	80002ac <__aeabi_ddiv+0x8c>
 8000460:	3301      	adds	r3, #1
 8000462:	431e      	orrs	r6, r3
 8000464:	2200      	movs	r2, #0
 8000466:	2101      	movs	r1, #1
 8000468:	e720      	b.n	80002ac <__aeabi_ddiv+0x8c>
 800046a:	2300      	movs	r3, #0
 800046c:	469a      	mov	sl, r3
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	2700      	movs	r7, #0
 8000472:	031b      	lsls	r3, r3, #12
 8000474:	4a09      	ldr	r2, [pc, #36]	; (800049c <__aeabi_ddiv+0x27c>)
 8000476:	e761      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	4649      	mov	r1, r9
 800047c:	031b      	lsls	r3, r3, #12
 800047e:	4219      	tst	r1, r3
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x264>
 8000482:	e0e2      	b.n	800064a <__aeabi_ddiv+0x42a>
 8000484:	4659      	mov	r1, fp
 8000486:	4219      	tst	r1, r3
 8000488:	d000      	beq.n	800048c <__aeabi_ddiv+0x26c>
 800048a:	e0de      	b.n	800064a <__aeabi_ddiv+0x42a>
 800048c:	430b      	orrs	r3, r1
 800048e:	031b      	lsls	r3, r3, #12
 8000490:	0017      	movs	r7, r2
 8000492:	0b1b      	lsrs	r3, r3, #12
 8000494:	46a2      	mov	sl, r4
 8000496:	4a01      	ldr	r2, [pc, #4]	; (800049c <__aeabi_ddiv+0x27c>)
 8000498:	e750      	b.n	800033c <__aeabi_ddiv+0x11c>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	000007ff 	.word	0x000007ff
 80004a0:	fffffc01 	.word	0xfffffc01
 80004a4:	08003720 	.word	0x08003720
 80004a8:	000003ff 	.word	0x000003ff
 80004ac:	feffffff 	.word	0xfeffffff
 80004b0:	000007fe 	.word	0x000007fe
 80004b4:	800fffff 	.word	0x800fffff
 80004b8:	fffffc0d 	.word	0xfffffc0d
 80004bc:	fffff801 	.word	0xfffff801
 80004c0:	000003f3 	.word	0x000003f3
 80004c4:	45d9      	cmp	r9, fp
 80004c6:	d900      	bls.n	80004ca <__aeabi_ddiv+0x2aa>
 80004c8:	e0cb      	b.n	8000662 <__aeabi_ddiv+0x442>
 80004ca:	d100      	bne.n	80004ce <__aeabi_ddiv+0x2ae>
 80004cc:	e0c6      	b.n	800065c <__aeabi_ddiv+0x43c>
 80004ce:	003c      	movs	r4, r7
 80004d0:	4648      	mov	r0, r9
 80004d2:	2700      	movs	r7, #0
 80004d4:	9b00      	ldr	r3, [sp, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	465b      	mov	r3, fp
 80004dc:	0e16      	lsrs	r6, r2, #24
 80004de:	021b      	lsls	r3, r3, #8
 80004e0:	431e      	orrs	r6, r3
 80004e2:	0213      	lsls	r3, r2, #8
 80004e4:	4698      	mov	r8, r3
 80004e6:	0433      	lsls	r3, r6, #16
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	4699      	mov	r9, r3
 80004ec:	0c31      	lsrs	r1, r6, #16
 80004ee:	9101      	str	r1, [sp, #4]
 80004f0:	f7ff fe90 	bl	8000214 <__aeabi_uidivmod>
 80004f4:	464a      	mov	r2, r9
 80004f6:	4342      	muls	r2, r0
 80004f8:	040b      	lsls	r3, r1, #16
 80004fa:	0c21      	lsrs	r1, r4, #16
 80004fc:	0005      	movs	r5, r0
 80004fe:	4319      	orrs	r1, r3
 8000500:	428a      	cmp	r2, r1
 8000502:	d907      	bls.n	8000514 <__aeabi_ddiv+0x2f4>
 8000504:	1989      	adds	r1, r1, r6
 8000506:	3d01      	subs	r5, #1
 8000508:	428e      	cmp	r6, r1
 800050a:	d803      	bhi.n	8000514 <__aeabi_ddiv+0x2f4>
 800050c:	428a      	cmp	r2, r1
 800050e:	d901      	bls.n	8000514 <__aeabi_ddiv+0x2f4>
 8000510:	1e85      	subs	r5, r0, #2
 8000512:	1989      	adds	r1, r1, r6
 8000514:	1a88      	subs	r0, r1, r2
 8000516:	9901      	ldr	r1, [sp, #4]
 8000518:	f7ff fe7c 	bl	8000214 <__aeabi_uidivmod>
 800051c:	0409      	lsls	r1, r1, #16
 800051e:	468c      	mov	ip, r1
 8000520:	464a      	mov	r2, r9
 8000522:	0421      	lsls	r1, r4, #16
 8000524:	4664      	mov	r4, ip
 8000526:	4342      	muls	r2, r0
 8000528:	0c09      	lsrs	r1, r1, #16
 800052a:	0003      	movs	r3, r0
 800052c:	4321      	orrs	r1, r4
 800052e:	428a      	cmp	r2, r1
 8000530:	d904      	bls.n	800053c <__aeabi_ddiv+0x31c>
 8000532:	1989      	adds	r1, r1, r6
 8000534:	3b01      	subs	r3, #1
 8000536:	428e      	cmp	r6, r1
 8000538:	d800      	bhi.n	800053c <__aeabi_ddiv+0x31c>
 800053a:	e0f1      	b.n	8000720 <__aeabi_ddiv+0x500>
 800053c:	042d      	lsls	r5, r5, #16
 800053e:	431d      	orrs	r5, r3
 8000540:	46ab      	mov	fp, r5
 8000542:	4643      	mov	r3, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	4642      	mov	r2, r8
 8000548:	0c28      	lsrs	r0, r5, #16
 800054a:	0412      	lsls	r2, r2, #16
 800054c:	0c1d      	lsrs	r5, r3, #16
 800054e:	465b      	mov	r3, fp
 8000550:	0c14      	lsrs	r4, r2, #16
 8000552:	0022      	movs	r2, r4
 8000554:	041b      	lsls	r3, r3, #16
 8000556:	0c1b      	lsrs	r3, r3, #16
 8000558:	435a      	muls	r2, r3
 800055a:	9403      	str	r4, [sp, #12]
 800055c:	436b      	muls	r3, r5
 800055e:	4344      	muls	r4, r0
 8000560:	9502      	str	r5, [sp, #8]
 8000562:	4368      	muls	r0, r5
 8000564:	191b      	adds	r3, r3, r4
 8000566:	0c15      	lsrs	r5, r2, #16
 8000568:	18eb      	adds	r3, r5, r3
 800056a:	429c      	cmp	r4, r3
 800056c:	d903      	bls.n	8000576 <__aeabi_ddiv+0x356>
 800056e:	2480      	movs	r4, #128	; 0x80
 8000570:	0264      	lsls	r4, r4, #9
 8000572:	46a4      	mov	ip, r4
 8000574:	4460      	add	r0, ip
 8000576:	0c1c      	lsrs	r4, r3, #16
 8000578:	0415      	lsls	r5, r2, #16
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	0c2d      	lsrs	r5, r5, #16
 800057e:	1820      	adds	r0, r4, r0
 8000580:	195d      	adds	r5, r3, r5
 8000582:	4281      	cmp	r1, r0
 8000584:	d377      	bcc.n	8000676 <__aeabi_ddiv+0x456>
 8000586:	d073      	beq.n	8000670 <__aeabi_ddiv+0x450>
 8000588:	1a0c      	subs	r4, r1, r0
 800058a:	4aa2      	ldr	r2, [pc, #648]	; (8000814 <__aeabi_ddiv+0x5f4>)
 800058c:	1b7d      	subs	r5, r7, r5
 800058e:	42af      	cmp	r7, r5
 8000590:	41bf      	sbcs	r7, r7
 8000592:	4694      	mov	ip, r2
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	427f      	negs	r7, r7
 8000598:	4463      	add	r3, ip
 800059a:	1be0      	subs	r0, r4, r7
 800059c:	001c      	movs	r4, r3
 800059e:	4286      	cmp	r6, r0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_ddiv+0x384>
 80005a2:	e0db      	b.n	800075c <__aeabi_ddiv+0x53c>
 80005a4:	9901      	ldr	r1, [sp, #4]
 80005a6:	f7ff fe35 	bl	8000214 <__aeabi_uidivmod>
 80005aa:	464a      	mov	r2, r9
 80005ac:	4342      	muls	r2, r0
 80005ae:	040b      	lsls	r3, r1, #16
 80005b0:	0c29      	lsrs	r1, r5, #16
 80005b2:	0007      	movs	r7, r0
 80005b4:	4319      	orrs	r1, r3
 80005b6:	428a      	cmp	r2, r1
 80005b8:	d907      	bls.n	80005ca <__aeabi_ddiv+0x3aa>
 80005ba:	1989      	adds	r1, r1, r6
 80005bc:	3f01      	subs	r7, #1
 80005be:	428e      	cmp	r6, r1
 80005c0:	d803      	bhi.n	80005ca <__aeabi_ddiv+0x3aa>
 80005c2:	428a      	cmp	r2, r1
 80005c4:	d901      	bls.n	80005ca <__aeabi_ddiv+0x3aa>
 80005c6:	1e87      	subs	r7, r0, #2
 80005c8:	1989      	adds	r1, r1, r6
 80005ca:	1a88      	subs	r0, r1, r2
 80005cc:	9901      	ldr	r1, [sp, #4]
 80005ce:	f7ff fe21 	bl	8000214 <__aeabi_uidivmod>
 80005d2:	0409      	lsls	r1, r1, #16
 80005d4:	464a      	mov	r2, r9
 80005d6:	4689      	mov	r9, r1
 80005d8:	0429      	lsls	r1, r5, #16
 80005da:	464d      	mov	r5, r9
 80005dc:	4342      	muls	r2, r0
 80005de:	0c09      	lsrs	r1, r1, #16
 80005e0:	0003      	movs	r3, r0
 80005e2:	4329      	orrs	r1, r5
 80005e4:	428a      	cmp	r2, r1
 80005e6:	d907      	bls.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005e8:	1989      	adds	r1, r1, r6
 80005ea:	3b01      	subs	r3, #1
 80005ec:	428e      	cmp	r6, r1
 80005ee:	d803      	bhi.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005f0:	428a      	cmp	r2, r1
 80005f2:	d901      	bls.n	80005f8 <__aeabi_ddiv+0x3d8>
 80005f4:	1e83      	subs	r3, r0, #2
 80005f6:	1989      	adds	r1, r1, r6
 80005f8:	043f      	lsls	r7, r7, #16
 80005fa:	1a89      	subs	r1, r1, r2
 80005fc:	003a      	movs	r2, r7
 80005fe:	9f03      	ldr	r7, [sp, #12]
 8000600:	431a      	orrs	r2, r3
 8000602:	0038      	movs	r0, r7
 8000604:	0413      	lsls	r3, r2, #16
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	4358      	muls	r0, r3
 800060a:	4681      	mov	r9, r0
 800060c:	9802      	ldr	r0, [sp, #8]
 800060e:	0c15      	lsrs	r5, r2, #16
 8000610:	436f      	muls	r7, r5
 8000612:	4343      	muls	r3, r0
 8000614:	4345      	muls	r5, r0
 8000616:	4648      	mov	r0, r9
 8000618:	0c00      	lsrs	r0, r0, #16
 800061a:	4684      	mov	ip, r0
 800061c:	19db      	adds	r3, r3, r7
 800061e:	4463      	add	r3, ip
 8000620:	429f      	cmp	r7, r3
 8000622:	d903      	bls.n	800062c <__aeabi_ddiv+0x40c>
 8000624:	2080      	movs	r0, #128	; 0x80
 8000626:	0240      	lsls	r0, r0, #9
 8000628:	4684      	mov	ip, r0
 800062a:	4465      	add	r5, ip
 800062c:	4648      	mov	r0, r9
 800062e:	0c1f      	lsrs	r7, r3, #16
 8000630:	0400      	lsls	r0, r0, #16
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	0c00      	lsrs	r0, r0, #16
 8000636:	197d      	adds	r5, r7, r5
 8000638:	1818      	adds	r0, r3, r0
 800063a:	42a9      	cmp	r1, r5
 800063c:	d200      	bcs.n	8000640 <__aeabi_ddiv+0x420>
 800063e:	e084      	b.n	800074a <__aeabi_ddiv+0x52a>
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x424>
 8000642:	e07f      	b.n	8000744 <__aeabi_ddiv+0x524>
 8000644:	2301      	movs	r3, #1
 8000646:	431a      	orrs	r2, r3
 8000648:	e657      	b.n	80002fa <__aeabi_ddiv+0xda>
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	464a      	mov	r2, r9
 800064e:	031b      	lsls	r3, r3, #12
 8000650:	4313      	orrs	r3, r2
 8000652:	031b      	lsls	r3, r3, #12
 8000654:	0b1b      	lsrs	r3, r3, #12
 8000656:	46aa      	mov	sl, r5
 8000658:	4a6f      	ldr	r2, [pc, #444]	; (8000818 <__aeabi_ddiv+0x5f8>)
 800065a:	e66f      	b.n	800033c <__aeabi_ddiv+0x11c>
 800065c:	42ba      	cmp	r2, r7
 800065e:	d900      	bls.n	8000662 <__aeabi_ddiv+0x442>
 8000660:	e735      	b.n	80004ce <__aeabi_ddiv+0x2ae>
 8000662:	464b      	mov	r3, r9
 8000664:	07dc      	lsls	r4, r3, #31
 8000666:	0858      	lsrs	r0, r3, #1
 8000668:	087b      	lsrs	r3, r7, #1
 800066a:	431c      	orrs	r4, r3
 800066c:	07ff      	lsls	r7, r7, #31
 800066e:	e734      	b.n	80004da <__aeabi_ddiv+0x2ba>
 8000670:	2400      	movs	r4, #0
 8000672:	42af      	cmp	r7, r5
 8000674:	d289      	bcs.n	800058a <__aeabi_ddiv+0x36a>
 8000676:	4447      	add	r7, r8
 8000678:	4547      	cmp	r7, r8
 800067a:	41a4      	sbcs	r4, r4
 800067c:	465b      	mov	r3, fp
 800067e:	4264      	negs	r4, r4
 8000680:	19a4      	adds	r4, r4, r6
 8000682:	1864      	adds	r4, r4, r1
 8000684:	3b01      	subs	r3, #1
 8000686:	42a6      	cmp	r6, r4
 8000688:	d21e      	bcs.n	80006c8 <__aeabi_ddiv+0x4a8>
 800068a:	42a0      	cmp	r0, r4
 800068c:	d86d      	bhi.n	800076a <__aeabi_ddiv+0x54a>
 800068e:	d100      	bne.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e0b6      	b.n	8000800 <__aeabi_ddiv+0x5e0>
 8000692:	1a24      	subs	r4, r4, r0
 8000694:	469b      	mov	fp, r3
 8000696:	e778      	b.n	800058a <__aeabi_ddiv+0x36a>
 8000698:	0003      	movs	r3, r0
 800069a:	465a      	mov	r2, fp
 800069c:	3b28      	subs	r3, #40	; 0x28
 800069e:	409a      	lsls	r2, r3
 80006a0:	2700      	movs	r7, #0
 80006a2:	4691      	mov	r9, r2
 80006a4:	e688      	b.n	80003b8 <__aeabi_ddiv+0x198>
 80006a6:	4658      	mov	r0, fp
 80006a8:	f000 fb96 	bl	8000dd8 <__clzsi2>
 80006ac:	3020      	adds	r0, #32
 80006ae:	e672      	b.n	8000396 <__aeabi_ddiv+0x176>
 80006b0:	0003      	movs	r3, r0
 80006b2:	4652      	mov	r2, sl
 80006b4:	3b28      	subs	r3, #40	; 0x28
 80006b6:	409a      	lsls	r2, r3
 80006b8:	4693      	mov	fp, r2
 80006ba:	2200      	movs	r2, #0
 80006bc:	e6b4      	b.n	8000428 <__aeabi_ddiv+0x208>
 80006be:	4650      	mov	r0, sl
 80006c0:	f000 fb8a 	bl	8000dd8 <__clzsi2>
 80006c4:	3020      	adds	r0, #32
 80006c6:	e69a      	b.n	80003fe <__aeabi_ddiv+0x1de>
 80006c8:	42a6      	cmp	r6, r4
 80006ca:	d1e2      	bne.n	8000692 <__aeabi_ddiv+0x472>
 80006cc:	45b8      	cmp	r8, r7
 80006ce:	d9dc      	bls.n	800068a <__aeabi_ddiv+0x46a>
 80006d0:	1a34      	subs	r4, r6, r0
 80006d2:	469b      	mov	fp, r3
 80006d4:	e759      	b.n	800058a <__aeabi_ddiv+0x36a>
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	dc65      	bgt.n	80007a6 <__aeabi_ddiv+0x586>
 80006da:	4c50      	ldr	r4, [pc, #320]	; (800081c <__aeabi_ddiv+0x5fc>)
 80006dc:	9900      	ldr	r1, [sp, #0]
 80006de:	46a4      	mov	ip, r4
 80006e0:	465c      	mov	r4, fp
 80006e2:	4461      	add	r1, ip
 80006e4:	0008      	movs	r0, r1
 80006e6:	408c      	lsls	r4, r1
 80006e8:	0011      	movs	r1, r2
 80006ea:	4082      	lsls	r2, r0
 80006ec:	40d9      	lsrs	r1, r3
 80006ee:	1e50      	subs	r0, r2, #1
 80006f0:	4182      	sbcs	r2, r0
 80006f2:	430c      	orrs	r4, r1
 80006f4:	4314      	orrs	r4, r2
 80006f6:	465a      	mov	r2, fp
 80006f8:	40da      	lsrs	r2, r3
 80006fa:	0013      	movs	r3, r2
 80006fc:	0762      	lsls	r2, r4, #29
 80006fe:	d009      	beq.n	8000714 <__aeabi_ddiv+0x4f4>
 8000700:	220f      	movs	r2, #15
 8000702:	4022      	ands	r2, r4
 8000704:	2a04      	cmp	r2, #4
 8000706:	d005      	beq.n	8000714 <__aeabi_ddiv+0x4f4>
 8000708:	0022      	movs	r2, r4
 800070a:	1d14      	adds	r4, r2, #4
 800070c:	4294      	cmp	r4, r2
 800070e:	4189      	sbcs	r1, r1
 8000710:	4249      	negs	r1, r1
 8000712:	185b      	adds	r3, r3, r1
 8000714:	021a      	lsls	r2, r3, #8
 8000716:	d562      	bpl.n	80007de <__aeabi_ddiv+0x5be>
 8000718:	2201      	movs	r2, #1
 800071a:	2300      	movs	r3, #0
 800071c:	2700      	movs	r7, #0
 800071e:	e60d      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000720:	428a      	cmp	r2, r1
 8000722:	d800      	bhi.n	8000726 <__aeabi_ddiv+0x506>
 8000724:	e70a      	b.n	800053c <__aeabi_ddiv+0x31c>
 8000726:	1e83      	subs	r3, r0, #2
 8000728:	1989      	adds	r1, r1, r6
 800072a:	e707      	b.n	800053c <__aeabi_ddiv+0x31c>
 800072c:	230f      	movs	r3, #15
 800072e:	4013      	ands	r3, r2
 8000730:	2b04      	cmp	r3, #4
 8000732:	d100      	bne.n	8000736 <__aeabi_ddiv+0x516>
 8000734:	e5e6      	b.n	8000304 <__aeabi_ddiv+0xe4>
 8000736:	1d17      	adds	r7, r2, #4
 8000738:	4297      	cmp	r7, r2
 800073a:	4192      	sbcs	r2, r2
 800073c:	4253      	negs	r3, r2
 800073e:	449b      	add	fp, r3
 8000740:	08fa      	lsrs	r2, r7, #3
 8000742:	e5e0      	b.n	8000306 <__aeabi_ddiv+0xe6>
 8000744:	2800      	cmp	r0, #0
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0x52a>
 8000748:	e5d7      	b.n	80002fa <__aeabi_ddiv+0xda>
 800074a:	1871      	adds	r1, r6, r1
 800074c:	1e53      	subs	r3, r2, #1
 800074e:	42b1      	cmp	r1, r6
 8000750:	d327      	bcc.n	80007a2 <__aeabi_ddiv+0x582>
 8000752:	42a9      	cmp	r1, r5
 8000754:	d315      	bcc.n	8000782 <__aeabi_ddiv+0x562>
 8000756:	d058      	beq.n	800080a <__aeabi_ddiv+0x5ea>
 8000758:	001a      	movs	r2, r3
 800075a:	e773      	b.n	8000644 <__aeabi_ddiv+0x424>
 800075c:	2b00      	cmp	r3, #0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_ddiv+0x542>
 8000760:	e604      	b.n	800036c <__aeabi_ddiv+0x14c>
 8000762:	2301      	movs	r3, #1
 8000764:	2200      	movs	r2, #0
 8000766:	449b      	add	fp, r3
 8000768:	e5cd      	b.n	8000306 <__aeabi_ddiv+0xe6>
 800076a:	2302      	movs	r3, #2
 800076c:	4447      	add	r7, r8
 800076e:	4547      	cmp	r7, r8
 8000770:	4189      	sbcs	r1, r1
 8000772:	425b      	negs	r3, r3
 8000774:	469c      	mov	ip, r3
 8000776:	4249      	negs	r1, r1
 8000778:	1989      	adds	r1, r1, r6
 800077a:	190c      	adds	r4, r1, r4
 800077c:	44e3      	add	fp, ip
 800077e:	1a24      	subs	r4, r4, r0
 8000780:	e703      	b.n	800058a <__aeabi_ddiv+0x36a>
 8000782:	4643      	mov	r3, r8
 8000784:	005f      	lsls	r7, r3, #1
 8000786:	4547      	cmp	r7, r8
 8000788:	419b      	sbcs	r3, r3
 800078a:	46b8      	mov	r8, r7
 800078c:	425b      	negs	r3, r3
 800078e:	199e      	adds	r6, r3, r6
 8000790:	3a02      	subs	r2, #2
 8000792:	1989      	adds	r1, r1, r6
 8000794:	42a9      	cmp	r1, r5
 8000796:	d000      	beq.n	800079a <__aeabi_ddiv+0x57a>
 8000798:	e754      	b.n	8000644 <__aeabi_ddiv+0x424>
 800079a:	4540      	cmp	r0, r8
 800079c:	d000      	beq.n	80007a0 <__aeabi_ddiv+0x580>
 800079e:	e751      	b.n	8000644 <__aeabi_ddiv+0x424>
 80007a0:	e5ab      	b.n	80002fa <__aeabi_ddiv+0xda>
 80007a2:	001a      	movs	r2, r3
 80007a4:	e7f6      	b.n	8000794 <__aeabi_ddiv+0x574>
 80007a6:	211f      	movs	r1, #31
 80007a8:	465f      	mov	r7, fp
 80007aa:	4249      	negs	r1, r1
 80007ac:	1b0c      	subs	r4, r1, r4
 80007ae:	40e7      	lsrs	r7, r4
 80007b0:	2b20      	cmp	r3, #32
 80007b2:	d007      	beq.n	80007c4 <__aeabi_ddiv+0x5a4>
 80007b4:	491a      	ldr	r1, [pc, #104]	; (8000820 <__aeabi_ddiv+0x600>)
 80007b6:	9b00      	ldr	r3, [sp, #0]
 80007b8:	468c      	mov	ip, r1
 80007ba:	4463      	add	r3, ip
 80007bc:	0018      	movs	r0, r3
 80007be:	465b      	mov	r3, fp
 80007c0:	4083      	lsls	r3, r0
 80007c2:	431a      	orrs	r2, r3
 80007c4:	1e50      	subs	r0, r2, #1
 80007c6:	4182      	sbcs	r2, r0
 80007c8:	433a      	orrs	r2, r7
 80007ca:	2707      	movs	r7, #7
 80007cc:	2300      	movs	r3, #0
 80007ce:	4017      	ands	r7, r2
 80007d0:	d009      	beq.n	80007e6 <__aeabi_ddiv+0x5c6>
 80007d2:	210f      	movs	r1, #15
 80007d4:	2300      	movs	r3, #0
 80007d6:	4011      	ands	r1, r2
 80007d8:	0014      	movs	r4, r2
 80007da:	2904      	cmp	r1, #4
 80007dc:	d195      	bne.n	800070a <__aeabi_ddiv+0x4ea>
 80007de:	0022      	movs	r2, r4
 80007e0:	075f      	lsls	r7, r3, #29
 80007e2:	025b      	lsls	r3, r3, #9
 80007e4:	0b1b      	lsrs	r3, r3, #12
 80007e6:	08d2      	lsrs	r2, r2, #3
 80007e8:	4317      	orrs	r7, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	e5a6      	b.n	800033c <__aeabi_ddiv+0x11c>
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	4659      	mov	r1, fp
 80007f2:	031b      	lsls	r3, r3, #12
 80007f4:	430b      	orrs	r3, r1
 80007f6:	031b      	lsls	r3, r3, #12
 80007f8:	0017      	movs	r7, r2
 80007fa:	0b1b      	lsrs	r3, r3, #12
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <__aeabi_ddiv+0x5f8>)
 80007fe:	e59d      	b.n	800033c <__aeabi_ddiv+0x11c>
 8000800:	42bd      	cmp	r5, r7
 8000802:	d8b2      	bhi.n	800076a <__aeabi_ddiv+0x54a>
 8000804:	469b      	mov	fp, r3
 8000806:	2400      	movs	r4, #0
 8000808:	e6bf      	b.n	800058a <__aeabi_ddiv+0x36a>
 800080a:	4580      	cmp	r8, r0
 800080c:	d3b9      	bcc.n	8000782 <__aeabi_ddiv+0x562>
 800080e:	001a      	movs	r2, r3
 8000810:	e7c3      	b.n	800079a <__aeabi_ddiv+0x57a>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000003ff 	.word	0x000003ff
 8000818:	000007ff 	.word	0x000007ff
 800081c:	0000041e 	.word	0x0000041e
 8000820:	0000043e 	.word	0x0000043e

08000824 <__aeabi_dmul>:
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	4657      	mov	r7, sl
 8000828:	46de      	mov	lr, fp
 800082a:	464e      	mov	r6, r9
 800082c:	4645      	mov	r5, r8
 800082e:	b5e0      	push	{r5, r6, r7, lr}
 8000830:	4683      	mov	fp, r0
 8000832:	0006      	movs	r6, r0
 8000834:	030f      	lsls	r7, r1, #12
 8000836:	0048      	lsls	r0, r1, #1
 8000838:	b087      	sub	sp, #28
 800083a:	4692      	mov	sl, r2
 800083c:	001d      	movs	r5, r3
 800083e:	0b3f      	lsrs	r7, r7, #12
 8000840:	0d40      	lsrs	r0, r0, #21
 8000842:	0fcc      	lsrs	r4, r1, #31
 8000844:	2800      	cmp	r0, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dmul+0x26>
 8000848:	e06f      	b.n	800092a <__aeabi_dmul+0x106>
 800084a:	4bde      	ldr	r3, [pc, #888]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 800084c:	4298      	cmp	r0, r3
 800084e:	d038      	beq.n	80008c2 <__aeabi_dmul+0x9e>
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	00ff      	lsls	r7, r7, #3
 8000854:	041b      	lsls	r3, r3, #16
 8000856:	431f      	orrs	r7, r3
 8000858:	0f73      	lsrs	r3, r6, #29
 800085a:	433b      	orrs	r3, r7
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	4bda      	ldr	r3, [pc, #872]	; (8000bc8 <__aeabi_dmul+0x3a4>)
 8000860:	2700      	movs	r7, #0
 8000862:	4699      	mov	r9, r3
 8000864:	2300      	movs	r3, #0
 8000866:	469b      	mov	fp, r3
 8000868:	00f6      	lsls	r6, r6, #3
 800086a:	4481      	add	r9, r0
 800086c:	032b      	lsls	r3, r5, #12
 800086e:	0069      	lsls	r1, r5, #1
 8000870:	0b1b      	lsrs	r3, r3, #12
 8000872:	4652      	mov	r2, sl
 8000874:	4698      	mov	r8, r3
 8000876:	0d49      	lsrs	r1, r1, #21
 8000878:	0fed      	lsrs	r5, r5, #31
 800087a:	2900      	cmp	r1, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dmul+0x5c>
 800087e:	e085      	b.n	800098c <__aeabi_dmul+0x168>
 8000880:	4bd0      	ldr	r3, [pc, #832]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 8000882:	4299      	cmp	r1, r3
 8000884:	d100      	bne.n	8000888 <__aeabi_dmul+0x64>
 8000886:	e073      	b.n	8000970 <__aeabi_dmul+0x14c>
 8000888:	4643      	mov	r3, r8
 800088a:	00da      	lsls	r2, r3, #3
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	041b      	lsls	r3, r3, #16
 8000890:	4313      	orrs	r3, r2
 8000892:	4652      	mov	r2, sl
 8000894:	48cc      	ldr	r0, [pc, #816]	; (8000bc8 <__aeabi_dmul+0x3a4>)
 8000896:	0f52      	lsrs	r2, r2, #29
 8000898:	4684      	mov	ip, r0
 800089a:	4313      	orrs	r3, r2
 800089c:	4652      	mov	r2, sl
 800089e:	2000      	movs	r0, #0
 80008a0:	4461      	add	r1, ip
 80008a2:	00d2      	lsls	r2, r2, #3
 80008a4:	4489      	add	r9, r1
 80008a6:	0021      	movs	r1, r4
 80008a8:	4069      	eors	r1, r5
 80008aa:	9100      	str	r1, [sp, #0]
 80008ac:	468c      	mov	ip, r1
 80008ae:	2101      	movs	r1, #1
 80008b0:	4449      	add	r1, r9
 80008b2:	468a      	mov	sl, r1
 80008b4:	2f0f      	cmp	r7, #15
 80008b6:	d900      	bls.n	80008ba <__aeabi_dmul+0x96>
 80008b8:	e090      	b.n	80009dc <__aeabi_dmul+0x1b8>
 80008ba:	49c4      	ldr	r1, [pc, #784]	; (8000bcc <__aeabi_dmul+0x3a8>)
 80008bc:	00bf      	lsls	r7, r7, #2
 80008be:	59cf      	ldr	r7, [r1, r7]
 80008c0:	46bf      	mov	pc, r7
 80008c2:	465b      	mov	r3, fp
 80008c4:	433b      	orrs	r3, r7
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	d000      	beq.n	80008cc <__aeabi_dmul+0xa8>
 80008ca:	e16a      	b.n	8000ba2 <__aeabi_dmul+0x37e>
 80008cc:	2302      	movs	r3, #2
 80008ce:	2708      	movs	r7, #8
 80008d0:	2600      	movs	r6, #0
 80008d2:	4681      	mov	r9, r0
 80008d4:	469b      	mov	fp, r3
 80008d6:	e7c9      	b.n	800086c <__aeabi_dmul+0x48>
 80008d8:	0032      	movs	r2, r6
 80008da:	4658      	mov	r0, fp
 80008dc:	9b01      	ldr	r3, [sp, #4]
 80008de:	4661      	mov	r1, ip
 80008e0:	9100      	str	r1, [sp, #0]
 80008e2:	2802      	cmp	r0, #2
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dmul+0xc4>
 80008e6:	e075      	b.n	80009d4 <__aeabi_dmul+0x1b0>
 80008e8:	2803      	cmp	r0, #3
 80008ea:	d100      	bne.n	80008ee <__aeabi_dmul+0xca>
 80008ec:	e1fe      	b.n	8000cec <__aeabi_dmul+0x4c8>
 80008ee:	2801      	cmp	r0, #1
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dmul+0xd0>
 80008f2:	e12c      	b.n	8000b4e <__aeabi_dmul+0x32a>
 80008f4:	2300      	movs	r3, #0
 80008f6:	2700      	movs	r7, #0
 80008f8:	2600      	movs	r6, #0
 80008fa:	2500      	movs	r5, #0
 80008fc:	033f      	lsls	r7, r7, #12
 80008fe:	0d2a      	lsrs	r2, r5, #20
 8000900:	0b3f      	lsrs	r7, r7, #12
 8000902:	48b3      	ldr	r0, [pc, #716]	; (8000bd0 <__aeabi_dmul+0x3ac>)
 8000904:	0512      	lsls	r2, r2, #20
 8000906:	433a      	orrs	r2, r7
 8000908:	4002      	ands	r2, r0
 800090a:	051b      	lsls	r3, r3, #20
 800090c:	4313      	orrs	r3, r2
 800090e:	9a00      	ldr	r2, [sp, #0]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	07d1      	lsls	r1, r2, #31
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	430b      	orrs	r3, r1
 8000918:	0030      	movs	r0, r6
 800091a:	0019      	movs	r1, r3
 800091c:	b007      	add	sp, #28
 800091e:	bc3c      	pop	{r2, r3, r4, r5}
 8000920:	4690      	mov	r8, r2
 8000922:	4699      	mov	r9, r3
 8000924:	46a2      	mov	sl, r4
 8000926:	46ab      	mov	fp, r5
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092a:	465b      	mov	r3, fp
 800092c:	433b      	orrs	r3, r7
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	d100      	bne.n	8000934 <__aeabi_dmul+0x110>
 8000932:	e12f      	b.n	8000b94 <__aeabi_dmul+0x370>
 8000934:	2f00      	cmp	r7, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dmul+0x116>
 8000938:	e1a5      	b.n	8000c86 <__aeabi_dmul+0x462>
 800093a:	0038      	movs	r0, r7
 800093c:	f000 fa4c 	bl	8000dd8 <__clzsi2>
 8000940:	0003      	movs	r3, r0
 8000942:	3b0b      	subs	r3, #11
 8000944:	2b1c      	cmp	r3, #28
 8000946:	dd00      	ble.n	800094a <__aeabi_dmul+0x126>
 8000948:	e196      	b.n	8000c78 <__aeabi_dmul+0x454>
 800094a:	221d      	movs	r2, #29
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	465a      	mov	r2, fp
 8000950:	0001      	movs	r1, r0
 8000952:	40da      	lsrs	r2, r3
 8000954:	465e      	mov	r6, fp
 8000956:	3908      	subs	r1, #8
 8000958:	408f      	lsls	r7, r1
 800095a:	0013      	movs	r3, r2
 800095c:	408e      	lsls	r6, r1
 800095e:	433b      	orrs	r3, r7
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	4b9c      	ldr	r3, [pc, #624]	; (8000bd4 <__aeabi_dmul+0x3b0>)
 8000964:	2700      	movs	r7, #0
 8000966:	1a1b      	subs	r3, r3, r0
 8000968:	4699      	mov	r9, r3
 800096a:	2300      	movs	r3, #0
 800096c:	469b      	mov	fp, r3
 800096e:	e77d      	b.n	800086c <__aeabi_dmul+0x48>
 8000970:	4641      	mov	r1, r8
 8000972:	4653      	mov	r3, sl
 8000974:	430b      	orrs	r3, r1
 8000976:	4993      	ldr	r1, [pc, #588]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 8000978:	468c      	mov	ip, r1
 800097a:	44e1      	add	r9, ip
 800097c:	2b00      	cmp	r3, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dmul+0x15e>
 8000980:	e11a      	b.n	8000bb8 <__aeabi_dmul+0x394>
 8000982:	2202      	movs	r2, #2
 8000984:	2002      	movs	r0, #2
 8000986:	4317      	orrs	r7, r2
 8000988:	2200      	movs	r2, #0
 800098a:	e78c      	b.n	80008a6 <__aeabi_dmul+0x82>
 800098c:	4313      	orrs	r3, r2
 800098e:	d100      	bne.n	8000992 <__aeabi_dmul+0x16e>
 8000990:	e10d      	b.n	8000bae <__aeabi_dmul+0x38a>
 8000992:	4643      	mov	r3, r8
 8000994:	2b00      	cmp	r3, #0
 8000996:	d100      	bne.n	800099a <__aeabi_dmul+0x176>
 8000998:	e181      	b.n	8000c9e <__aeabi_dmul+0x47a>
 800099a:	4640      	mov	r0, r8
 800099c:	f000 fa1c 	bl	8000dd8 <__clzsi2>
 80009a0:	0002      	movs	r2, r0
 80009a2:	3a0b      	subs	r2, #11
 80009a4:	2a1c      	cmp	r2, #28
 80009a6:	dd00      	ble.n	80009aa <__aeabi_dmul+0x186>
 80009a8:	e172      	b.n	8000c90 <__aeabi_dmul+0x46c>
 80009aa:	0001      	movs	r1, r0
 80009ac:	4643      	mov	r3, r8
 80009ae:	3908      	subs	r1, #8
 80009b0:	408b      	lsls	r3, r1
 80009b2:	4698      	mov	r8, r3
 80009b4:	231d      	movs	r3, #29
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	4653      	mov	r3, sl
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	001a      	movs	r2, r3
 80009be:	4643      	mov	r3, r8
 80009c0:	4313      	orrs	r3, r2
 80009c2:	4652      	mov	r2, sl
 80009c4:	408a      	lsls	r2, r1
 80009c6:	4649      	mov	r1, r9
 80009c8:	1a08      	subs	r0, r1, r0
 80009ca:	4982      	ldr	r1, [pc, #520]	; (8000bd4 <__aeabi_dmul+0x3b0>)
 80009cc:	4689      	mov	r9, r1
 80009ce:	4481      	add	r9, r0
 80009d0:	2000      	movs	r0, #0
 80009d2:	e768      	b.n	80008a6 <__aeabi_dmul+0x82>
 80009d4:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <__aeabi_dmul+0x3a0>)
 80009d6:	2700      	movs	r7, #0
 80009d8:	2600      	movs	r6, #0
 80009da:	e78e      	b.n	80008fa <__aeabi_dmul+0xd6>
 80009dc:	0c14      	lsrs	r4, r2, #16
 80009de:	0412      	lsls	r2, r2, #16
 80009e0:	0c12      	lsrs	r2, r2, #16
 80009e2:	0011      	movs	r1, r2
 80009e4:	0c37      	lsrs	r7, r6, #16
 80009e6:	0436      	lsls	r6, r6, #16
 80009e8:	0c35      	lsrs	r5, r6, #16
 80009ea:	4379      	muls	r1, r7
 80009ec:	0028      	movs	r0, r5
 80009ee:	468c      	mov	ip, r1
 80009f0:	002e      	movs	r6, r5
 80009f2:	4360      	muls	r0, r4
 80009f4:	4460      	add	r0, ip
 80009f6:	4683      	mov	fp, r0
 80009f8:	4356      	muls	r6, r2
 80009fa:	0021      	movs	r1, r4
 80009fc:	0c30      	lsrs	r0, r6, #16
 80009fe:	4680      	mov	r8, r0
 8000a00:	4658      	mov	r0, fp
 8000a02:	4379      	muls	r1, r7
 8000a04:	4440      	add	r0, r8
 8000a06:	9102      	str	r1, [sp, #8]
 8000a08:	4584      	cmp	ip, r0
 8000a0a:	d906      	bls.n	8000a1a <__aeabi_dmul+0x1f6>
 8000a0c:	4688      	mov	r8, r1
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	0249      	lsls	r1, r1, #9
 8000a12:	468c      	mov	ip, r1
 8000a14:	44e0      	add	r8, ip
 8000a16:	4641      	mov	r1, r8
 8000a18:	9102      	str	r1, [sp, #8]
 8000a1a:	0436      	lsls	r6, r6, #16
 8000a1c:	0c01      	lsrs	r1, r0, #16
 8000a1e:	0c36      	lsrs	r6, r6, #16
 8000a20:	0400      	lsls	r0, r0, #16
 8000a22:	468b      	mov	fp, r1
 8000a24:	1981      	adds	r1, r0, r6
 8000a26:	0c1e      	lsrs	r6, r3, #16
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	0c1b      	lsrs	r3, r3, #16
 8000a2c:	9103      	str	r1, [sp, #12]
 8000a2e:	0019      	movs	r1, r3
 8000a30:	4379      	muls	r1, r7
 8000a32:	468c      	mov	ip, r1
 8000a34:	0028      	movs	r0, r5
 8000a36:	4375      	muls	r5, r6
 8000a38:	4465      	add	r5, ip
 8000a3a:	46a8      	mov	r8, r5
 8000a3c:	4358      	muls	r0, r3
 8000a3e:	0c05      	lsrs	r5, r0, #16
 8000a40:	4445      	add	r5, r8
 8000a42:	4377      	muls	r7, r6
 8000a44:	42a9      	cmp	r1, r5
 8000a46:	d903      	bls.n	8000a50 <__aeabi_dmul+0x22c>
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0249      	lsls	r1, r1, #9
 8000a4c:	468c      	mov	ip, r1
 8000a4e:	4467      	add	r7, ip
 8000a50:	0c29      	lsrs	r1, r5, #16
 8000a52:	468c      	mov	ip, r1
 8000a54:	0039      	movs	r1, r7
 8000a56:	0400      	lsls	r0, r0, #16
 8000a58:	0c00      	lsrs	r0, r0, #16
 8000a5a:	042d      	lsls	r5, r5, #16
 8000a5c:	182d      	adds	r5, r5, r0
 8000a5e:	4461      	add	r1, ip
 8000a60:	44ab      	add	fp, r5
 8000a62:	9105      	str	r1, [sp, #20]
 8000a64:	4659      	mov	r1, fp
 8000a66:	9104      	str	r1, [sp, #16]
 8000a68:	9901      	ldr	r1, [sp, #4]
 8000a6a:	040f      	lsls	r7, r1, #16
 8000a6c:	0c3f      	lsrs	r7, r7, #16
 8000a6e:	0c08      	lsrs	r0, r1, #16
 8000a70:	0039      	movs	r1, r7
 8000a72:	4351      	muls	r1, r2
 8000a74:	4342      	muls	r2, r0
 8000a76:	4690      	mov	r8, r2
 8000a78:	0002      	movs	r2, r0
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	0c09      	lsrs	r1, r1, #16
 8000a7e:	468b      	mov	fp, r1
 8000a80:	4362      	muls	r2, r4
 8000a82:	437c      	muls	r4, r7
 8000a84:	4444      	add	r4, r8
 8000a86:	445c      	add	r4, fp
 8000a88:	45a0      	cmp	r8, r4
 8000a8a:	d903      	bls.n	8000a94 <__aeabi_dmul+0x270>
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0249      	lsls	r1, r1, #9
 8000a90:	4688      	mov	r8, r1
 8000a92:	4442      	add	r2, r8
 8000a94:	0c21      	lsrs	r1, r4, #16
 8000a96:	4688      	mov	r8, r1
 8000a98:	4661      	mov	r1, ip
 8000a9a:	0409      	lsls	r1, r1, #16
 8000a9c:	0c09      	lsrs	r1, r1, #16
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	0039      	movs	r1, r7
 8000aa2:	4359      	muls	r1, r3
 8000aa4:	4343      	muls	r3, r0
 8000aa6:	4370      	muls	r0, r6
 8000aa8:	437e      	muls	r6, r7
 8000aaa:	0c0f      	lsrs	r7, r1, #16
 8000aac:	18f6      	adds	r6, r6, r3
 8000aae:	0424      	lsls	r4, r4, #16
 8000ab0:	19be      	adds	r6, r7, r6
 8000ab2:	4464      	add	r4, ip
 8000ab4:	4442      	add	r2, r8
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	42b3      	cmp	r3, r6
 8000aba:	d903      	bls.n	8000ac4 <__aeabi_dmul+0x2a0>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	4440      	add	r0, r8
 8000ac4:	9b02      	ldr	r3, [sp, #8]
 8000ac6:	4661      	mov	r1, ip
 8000ac8:	4698      	mov	r8, r3
 8000aca:	9b04      	ldr	r3, [sp, #16]
 8000acc:	0437      	lsls	r7, r6, #16
 8000ace:	4443      	add	r3, r8
 8000ad0:	469b      	mov	fp, r3
 8000ad2:	45ab      	cmp	fp, r5
 8000ad4:	41ad      	sbcs	r5, r5
 8000ad6:	426b      	negs	r3, r5
 8000ad8:	040d      	lsls	r5, r1, #16
 8000ada:	9905      	ldr	r1, [sp, #20]
 8000adc:	0c2d      	lsrs	r5, r5, #16
 8000ade:	468c      	mov	ip, r1
 8000ae0:	197f      	adds	r7, r7, r5
 8000ae2:	4467      	add	r7, ip
 8000ae4:	18fd      	adds	r5, r7, r3
 8000ae6:	46a8      	mov	r8, r5
 8000ae8:	465d      	mov	r5, fp
 8000aea:	192d      	adds	r5, r5, r4
 8000aec:	42a5      	cmp	r5, r4
 8000aee:	41a4      	sbcs	r4, r4
 8000af0:	4693      	mov	fp, r2
 8000af2:	4264      	negs	r4, r4
 8000af4:	46a4      	mov	ip, r4
 8000af6:	44c3      	add	fp, r8
 8000af8:	44dc      	add	ip, fp
 8000afa:	428f      	cmp	r7, r1
 8000afc:	41bf      	sbcs	r7, r7
 8000afe:	4598      	cmp	r8, r3
 8000b00:	419b      	sbcs	r3, r3
 8000b02:	4593      	cmp	fp, r2
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	41a4      	sbcs	r4, r4
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	427f      	negs	r7, r7
 8000b0e:	431f      	orrs	r7, r3
 8000b10:	0c36      	lsrs	r6, r6, #16
 8000b12:	4252      	negs	r2, r2
 8000b14:	4264      	negs	r4, r4
 8000b16:	19bf      	adds	r7, r7, r6
 8000b18:	4322      	orrs	r2, r4
 8000b1a:	18bf      	adds	r7, r7, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	1838      	adds	r0, r7, r0
 8000b20:	0243      	lsls	r3, r0, #9
 8000b22:	0dd2      	lsrs	r2, r2, #23
 8000b24:	9903      	ldr	r1, [sp, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	026a      	lsls	r2, r5, #9
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	1e50      	subs	r0, r2, #1
 8000b2e:	4182      	sbcs	r2, r0
 8000b30:	4661      	mov	r1, ip
 8000b32:	0ded      	lsrs	r5, r5, #23
 8000b34:	432a      	orrs	r2, r5
 8000b36:	024e      	lsls	r6, r1, #9
 8000b38:	4332      	orrs	r2, r6
 8000b3a:	01d9      	lsls	r1, r3, #7
 8000b3c:	d400      	bmi.n	8000b40 <__aeabi_dmul+0x31c>
 8000b3e:	e0b3      	b.n	8000ca8 <__aeabi_dmul+0x484>
 8000b40:	2601      	movs	r6, #1
 8000b42:	0850      	lsrs	r0, r2, #1
 8000b44:	4032      	ands	r2, r6
 8000b46:	4302      	orrs	r2, r0
 8000b48:	07de      	lsls	r6, r3, #31
 8000b4a:	4332      	orrs	r2, r6
 8000b4c:	085b      	lsrs	r3, r3, #1
 8000b4e:	4c22      	ldr	r4, [pc, #136]	; (8000bd8 <__aeabi_dmul+0x3b4>)
 8000b50:	4454      	add	r4, sl
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	dd62      	ble.n	8000c1c <__aeabi_dmul+0x3f8>
 8000b56:	0751      	lsls	r1, r2, #29
 8000b58:	d009      	beq.n	8000b6e <__aeabi_dmul+0x34a>
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	4010      	ands	r0, r2
 8000b5e:	2804      	cmp	r0, #4
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dmul+0x34a>
 8000b62:	1d10      	adds	r0, r2, #4
 8000b64:	4290      	cmp	r0, r2
 8000b66:	4192      	sbcs	r2, r2
 8000b68:	4252      	negs	r2, r2
 8000b6a:	189b      	adds	r3, r3, r2
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	01d9      	lsls	r1, r3, #7
 8000b70:	d504      	bpl.n	8000b7c <__aeabi_dmul+0x358>
 8000b72:	2480      	movs	r4, #128	; 0x80
 8000b74:	4819      	ldr	r0, [pc, #100]	; (8000bdc <__aeabi_dmul+0x3b8>)
 8000b76:	00e4      	lsls	r4, r4, #3
 8000b78:	4003      	ands	r3, r0
 8000b7a:	4454      	add	r4, sl
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <__aeabi_dmul+0x3bc>)
 8000b7e:	4284      	cmp	r4, r0
 8000b80:	dd00      	ble.n	8000b84 <__aeabi_dmul+0x360>
 8000b82:	e727      	b.n	80009d4 <__aeabi_dmul+0x1b0>
 8000b84:	075e      	lsls	r6, r3, #29
 8000b86:	025b      	lsls	r3, r3, #9
 8000b88:	08d2      	lsrs	r2, r2, #3
 8000b8a:	0b1f      	lsrs	r7, r3, #12
 8000b8c:	0563      	lsls	r3, r4, #21
 8000b8e:	4316      	orrs	r6, r2
 8000b90:	0d5b      	lsrs	r3, r3, #21
 8000b92:	e6b2      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000b94:	2300      	movs	r3, #0
 8000b96:	4699      	mov	r9, r3
 8000b98:	3301      	adds	r3, #1
 8000b9a:	2704      	movs	r7, #4
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	469b      	mov	fp, r3
 8000ba0:	e664      	b.n	800086c <__aeabi_dmul+0x48>
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	9701      	str	r7, [sp, #4]
 8000ba6:	4681      	mov	r9, r0
 8000ba8:	270c      	movs	r7, #12
 8000baa:	469b      	mov	fp, r3
 8000bac:	e65e      	b.n	800086c <__aeabi_dmul+0x48>
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4317      	orrs	r7, r2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	e676      	b.n	80008a6 <__aeabi_dmul+0x82>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	2003      	movs	r0, #3
 8000bbc:	431f      	orrs	r7, r3
 8000bbe:	4643      	mov	r3, r8
 8000bc0:	e671      	b.n	80008a6 <__aeabi_dmul+0x82>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	000007ff 	.word	0x000007ff
 8000bc8:	fffffc01 	.word	0xfffffc01
 8000bcc:	08003760 	.word	0x08003760
 8000bd0:	800fffff 	.word	0x800fffff
 8000bd4:	fffffc0d 	.word	0xfffffc0d
 8000bd8:	000003ff 	.word	0x000003ff
 8000bdc:	feffffff 	.word	0xfeffffff
 8000be0:	000007fe 	.word	0x000007fe
 8000be4:	2300      	movs	r3, #0
 8000be6:	2780      	movs	r7, #128	; 0x80
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	033f      	lsls	r7, r7, #12
 8000bec:	2600      	movs	r6, #0
 8000bee:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000bf0:	e683      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000bf2:	9b01      	ldr	r3, [sp, #4]
 8000bf4:	0032      	movs	r2, r6
 8000bf6:	46a4      	mov	ip, r4
 8000bf8:	4658      	mov	r0, fp
 8000bfa:	e670      	b.n	80008de <__aeabi_dmul+0xba>
 8000bfc:	46ac      	mov	ip, r5
 8000bfe:	e66e      	b.n	80008de <__aeabi_dmul+0xba>
 8000c00:	2780      	movs	r7, #128	; 0x80
 8000c02:	9901      	ldr	r1, [sp, #4]
 8000c04:	033f      	lsls	r7, r7, #12
 8000c06:	4239      	tst	r1, r7
 8000c08:	d02d      	beq.n	8000c66 <__aeabi_dmul+0x442>
 8000c0a:	423b      	tst	r3, r7
 8000c0c:	d12b      	bne.n	8000c66 <__aeabi_dmul+0x442>
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	033f      	lsls	r7, r7, #12
 8000c12:	0b3f      	lsrs	r7, r7, #12
 8000c14:	9500      	str	r5, [sp, #0]
 8000c16:	0016      	movs	r6, r2
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000c1a:	e66e      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000c1c:	2501      	movs	r5, #1
 8000c1e:	1b2d      	subs	r5, r5, r4
 8000c20:	2d38      	cmp	r5, #56	; 0x38
 8000c22:	dd00      	ble.n	8000c26 <__aeabi_dmul+0x402>
 8000c24:	e666      	b.n	80008f4 <__aeabi_dmul+0xd0>
 8000c26:	2d1f      	cmp	r5, #31
 8000c28:	dc40      	bgt.n	8000cac <__aeabi_dmul+0x488>
 8000c2a:	4835      	ldr	r0, [pc, #212]	; (8000d00 <__aeabi_dmul+0x4dc>)
 8000c2c:	001c      	movs	r4, r3
 8000c2e:	4450      	add	r0, sl
 8000c30:	0016      	movs	r6, r2
 8000c32:	4082      	lsls	r2, r0
 8000c34:	4084      	lsls	r4, r0
 8000c36:	40ee      	lsrs	r6, r5
 8000c38:	1e50      	subs	r0, r2, #1
 8000c3a:	4182      	sbcs	r2, r0
 8000c3c:	4334      	orrs	r4, r6
 8000c3e:	4314      	orrs	r4, r2
 8000c40:	40eb      	lsrs	r3, r5
 8000c42:	0762      	lsls	r2, r4, #29
 8000c44:	d009      	beq.n	8000c5a <__aeabi_dmul+0x436>
 8000c46:	220f      	movs	r2, #15
 8000c48:	4022      	ands	r2, r4
 8000c4a:	2a04      	cmp	r2, #4
 8000c4c:	d005      	beq.n	8000c5a <__aeabi_dmul+0x436>
 8000c4e:	0022      	movs	r2, r4
 8000c50:	1d14      	adds	r4, r2, #4
 8000c52:	4294      	cmp	r4, r2
 8000c54:	4180      	sbcs	r0, r0
 8000c56:	4240      	negs	r0, r0
 8000c58:	181b      	adds	r3, r3, r0
 8000c5a:	021a      	lsls	r2, r3, #8
 8000c5c:	d53e      	bpl.n	8000cdc <__aeabi_dmul+0x4b8>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	2700      	movs	r7, #0
 8000c62:	2600      	movs	r6, #0
 8000c64:	e649      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000c66:	2780      	movs	r7, #128	; 0x80
 8000c68:	9b01      	ldr	r3, [sp, #4]
 8000c6a:	033f      	lsls	r7, r7, #12
 8000c6c:	431f      	orrs	r7, r3
 8000c6e:	033f      	lsls	r7, r7, #12
 8000c70:	0b3f      	lsrs	r7, r7, #12
 8000c72:	9400      	str	r4, [sp, #0]
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000c76:	e640      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	465a      	mov	r2, fp
 8000c7c:	3b28      	subs	r3, #40	; 0x28
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	2600      	movs	r6, #0
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	e66d      	b.n	8000962 <__aeabi_dmul+0x13e>
 8000c86:	4658      	mov	r0, fp
 8000c88:	f000 f8a6 	bl	8000dd8 <__clzsi2>
 8000c8c:	3020      	adds	r0, #32
 8000c8e:	e657      	b.n	8000940 <__aeabi_dmul+0x11c>
 8000c90:	0003      	movs	r3, r0
 8000c92:	4652      	mov	r2, sl
 8000c94:	3b28      	subs	r3, #40	; 0x28
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e693      	b.n	80009c6 <__aeabi_dmul+0x1a2>
 8000c9e:	4650      	mov	r0, sl
 8000ca0:	f000 f89a 	bl	8000dd8 <__clzsi2>
 8000ca4:	3020      	adds	r0, #32
 8000ca6:	e67b      	b.n	80009a0 <__aeabi_dmul+0x17c>
 8000ca8:	46ca      	mov	sl, r9
 8000caa:	e750      	b.n	8000b4e <__aeabi_dmul+0x32a>
 8000cac:	201f      	movs	r0, #31
 8000cae:	001e      	movs	r6, r3
 8000cb0:	4240      	negs	r0, r0
 8000cb2:	1b04      	subs	r4, r0, r4
 8000cb4:	40e6      	lsrs	r6, r4
 8000cb6:	2d20      	cmp	r5, #32
 8000cb8:	d003      	beq.n	8000cc2 <__aeabi_dmul+0x49e>
 8000cba:	4c12      	ldr	r4, [pc, #72]	; (8000d04 <__aeabi_dmul+0x4e0>)
 8000cbc:	4454      	add	r4, sl
 8000cbe:	40a3      	lsls	r3, r4
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	1e50      	subs	r0, r2, #1
 8000cc4:	4182      	sbcs	r2, r0
 8000cc6:	4332      	orrs	r2, r6
 8000cc8:	2607      	movs	r6, #7
 8000cca:	2700      	movs	r7, #0
 8000ccc:	4016      	ands	r6, r2
 8000cce:	d009      	beq.n	8000ce4 <__aeabi_dmul+0x4c0>
 8000cd0:	200f      	movs	r0, #15
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	4010      	ands	r0, r2
 8000cd6:	0014      	movs	r4, r2
 8000cd8:	2804      	cmp	r0, #4
 8000cda:	d1b9      	bne.n	8000c50 <__aeabi_dmul+0x42c>
 8000cdc:	0022      	movs	r2, r4
 8000cde:	075e      	lsls	r6, r3, #29
 8000ce0:	025b      	lsls	r3, r3, #9
 8000ce2:	0b1f      	lsrs	r7, r3, #12
 8000ce4:	08d2      	lsrs	r2, r2, #3
 8000ce6:	4316      	orrs	r6, r2
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e606      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000cec:	2780      	movs	r7, #128	; 0x80
 8000cee:	033f      	lsls	r7, r7, #12
 8000cf0:	431f      	orrs	r7, r3
 8000cf2:	033f      	lsls	r7, r7, #12
 8000cf4:	0b3f      	lsrs	r7, r7, #12
 8000cf6:	0016      	movs	r6, r2
 8000cf8:	4b00      	ldr	r3, [pc, #0]	; (8000cfc <__aeabi_dmul+0x4d8>)
 8000cfa:	e5fe      	b.n	80008fa <__aeabi_dmul+0xd6>
 8000cfc:	000007ff 	.word	0x000007ff
 8000d00:	0000041e 	.word	0x0000041e
 8000d04:	0000043e 	.word	0x0000043e

08000d08 <__aeabi_d2iz>:
 8000d08:	b530      	push	{r4, r5, lr}
 8000d0a:	4d14      	ldr	r5, [pc, #80]	; (8000d5c <__aeabi_d2iz+0x54>)
 8000d0c:	030a      	lsls	r2, r1, #12
 8000d0e:	004b      	lsls	r3, r1, #1
 8000d10:	0b12      	lsrs	r2, r2, #12
 8000d12:	0d5b      	lsrs	r3, r3, #21
 8000d14:	0fc9      	lsrs	r1, r1, #31
 8000d16:	2400      	movs	r4, #0
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	dd11      	ble.n	8000d40 <__aeabi_d2iz+0x38>
 8000d1c:	4c10      	ldr	r4, [pc, #64]	; (8000d60 <__aeabi_d2iz+0x58>)
 8000d1e:	42a3      	cmp	r3, r4
 8000d20:	dc10      	bgt.n	8000d44 <__aeabi_d2iz+0x3c>
 8000d22:	2480      	movs	r4, #128	; 0x80
 8000d24:	0364      	lsls	r4, r4, #13
 8000d26:	4322      	orrs	r2, r4
 8000d28:	4c0e      	ldr	r4, [pc, #56]	; (8000d64 <__aeabi_d2iz+0x5c>)
 8000d2a:	1ae4      	subs	r4, r4, r3
 8000d2c:	2c1f      	cmp	r4, #31
 8000d2e:	dd0c      	ble.n	8000d4a <__aeabi_d2iz+0x42>
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <__aeabi_d2iz+0x60>)
 8000d32:	1ac3      	subs	r3, r0, r3
 8000d34:	40da      	lsrs	r2, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	425c      	negs	r4, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_d2iz+0x38>
 8000d3e:	001c      	movs	r4, r3
 8000d40:	0020      	movs	r0, r4
 8000d42:	bd30      	pop	{r4, r5, pc}
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <__aeabi_d2iz+0x64>)
 8000d46:	18cc      	adds	r4, r1, r3
 8000d48:	e7fa      	b.n	8000d40 <__aeabi_d2iz+0x38>
 8000d4a:	4d09      	ldr	r5, [pc, #36]	; (8000d70 <__aeabi_d2iz+0x68>)
 8000d4c:	40e0      	lsrs	r0, r4
 8000d4e:	46ac      	mov	ip, r5
 8000d50:	4463      	add	r3, ip
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	4303      	orrs	r3, r0
 8000d58:	e7ee      	b.n	8000d38 <__aeabi_d2iz+0x30>
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	000003fe 	.word	0x000003fe
 8000d60:	0000041d 	.word	0x0000041d
 8000d64:	00000433 	.word	0x00000433
 8000d68:	00000413 	.word	0x00000413
 8000d6c:	7fffffff 	.word	0x7fffffff
 8000d70:	fffffbed 	.word	0xfffffbed

08000d74 <__aeabi_ui2d>:
 8000d74:	b510      	push	{r4, lr}
 8000d76:	1e04      	subs	r4, r0, #0
 8000d78:	d025      	beq.n	8000dc6 <__aeabi_ui2d+0x52>
 8000d7a:	f000 f82d 	bl	8000dd8 <__clzsi2>
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <__aeabi_ui2d+0x5c>)
 8000d80:	1a1b      	subs	r3, r3, r0
 8000d82:	055b      	lsls	r3, r3, #21
 8000d84:	0d5b      	lsrs	r3, r3, #21
 8000d86:	280a      	cmp	r0, #10
 8000d88:	dd12      	ble.n	8000db0 <__aeabi_ui2d+0x3c>
 8000d8a:	380b      	subs	r0, #11
 8000d8c:	4084      	lsls	r4, r0
 8000d8e:	2200      	movs	r2, #0
 8000d90:	0324      	lsls	r4, r4, #12
 8000d92:	0b24      	lsrs	r4, r4, #12
 8000d94:	2100      	movs	r1, #0
 8000d96:	0010      	movs	r0, r2
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	0d0a      	lsrs	r2, r1, #20
 8000d9c:	0b24      	lsrs	r4, r4, #12
 8000d9e:	0512      	lsls	r2, r2, #20
 8000da0:	4322      	orrs	r2, r4
 8000da2:	4c0c      	ldr	r4, [pc, #48]	; (8000dd4 <__aeabi_ui2d+0x60>)
 8000da4:	051b      	lsls	r3, r3, #20
 8000da6:	4022      	ands	r2, r4
 8000da8:	4313      	orrs	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	0859      	lsrs	r1, r3, #1
 8000dae:	bd10      	pop	{r4, pc}
 8000db0:	0002      	movs	r2, r0
 8000db2:	0021      	movs	r1, r4
 8000db4:	3215      	adds	r2, #21
 8000db6:	4091      	lsls	r1, r2
 8000db8:	000a      	movs	r2, r1
 8000dba:	210b      	movs	r1, #11
 8000dbc:	1a08      	subs	r0, r1, r0
 8000dbe:	40c4      	lsrs	r4, r0
 8000dc0:	0324      	lsls	r4, r4, #12
 8000dc2:	0b24      	lsrs	r4, r4, #12
 8000dc4:	e7e6      	b.n	8000d94 <__aeabi_ui2d+0x20>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	2400      	movs	r4, #0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e7e2      	b.n	8000d94 <__aeabi_ui2d+0x20>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	0000041e 	.word	0x0000041e
 8000dd4:	800fffff 	.word	0x800fffff

08000dd8 <__clzsi2>:
 8000dd8:	211c      	movs	r1, #28
 8000dda:	2301      	movs	r3, #1
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d301      	bcc.n	8000de6 <__clzsi2+0xe>
 8000de2:	0c00      	lsrs	r0, r0, #16
 8000de4:	3910      	subs	r1, #16
 8000de6:	0a1b      	lsrs	r3, r3, #8
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d301      	bcc.n	8000df0 <__clzsi2+0x18>
 8000dec:	0a00      	lsrs	r0, r0, #8
 8000dee:	3908      	subs	r1, #8
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d301      	bcc.n	8000dfa <__clzsi2+0x22>
 8000df6:	0900      	lsrs	r0, r0, #4
 8000df8:	3904      	subs	r1, #4
 8000dfa:	a202      	add	r2, pc, #8	; (adr r2, 8000e04 <__clzsi2+0x2c>)
 8000dfc:	5c10      	ldrb	r0, [r2, r0]
 8000dfe:	1840      	adds	r0, r0, r1
 8000e00:	4770      	bx	lr
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	02020304 	.word	0x02020304
 8000e08:	01010101 	.word	0x01010101
	...

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e18:	f000 fb30 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f81c 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 f948 	bl	80010b4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000e24:	f000 f868 	bl	8000ef8 <MX_ADC_Init>
  MX_TIM3_Init();
 8000e28:	f000 f8c2 	bl	8000fb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc);
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <main+0x3c>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fcea 	bl	8001808 <HAL_ADC_Start_IT>
  //HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <main+0x40>)
 8000e36:	2100      	movs	r1, #0
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 fecf 	bl	8002bdc <HAL_TIM_PWM_Start>
	  HAL_Delay(3000);
	  */

	  /////////////////////// Potentiometer & LEDs ///////////////////////

	  HAL_ADC_Start_IT(&hadc);
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <main+0x3c>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fce1 	bl	8001808 <HAL_ADC_Start_IT>
	  HAL_Delay(50);
 8000e46:	2032      	movs	r0, #50	; 0x32
 8000e48:	f000 fb7c 	bl	8001544 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc);
 8000e4c:	e7f7      	b.n	8000e3e <main+0x2a>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	2000006c 	.word	0x2000006c
 8000e54:	20000028 	.word	0x20000028

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b091      	sub	sp, #68	; 0x44
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	2410      	movs	r4, #16
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	0018      	movs	r0, r3
 8000e64:	2330      	movs	r3, #48	; 0x30
 8000e66:	001a      	movs	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f002 fc35 	bl	80036d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6e:	003b      	movs	r3, r7
 8000e70:	0018      	movs	r0, r3
 8000e72:	2310      	movs	r3, #16
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	f002 fc2e 	bl	80036d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000e7c:	0021      	movs	r1, r4
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2212      	movs	r2, #18
 8000e82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2201      	movs	r2, #1
 8000e88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2210      	movs	r2, #16
 8000e94:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2210      	movs	r2, #16
 8000e9a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	22a0      	movs	r2, #160	; 0xa0
 8000eac:	0392      	lsls	r2, r2, #14
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 f9e1 	bl	8002280 <HAL_RCC_OscConfig>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ec2:	f000 f9b1 	bl	8001228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2202      	movs	r2, #2
 8000ed0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 fce8 	bl	80028b8 <HAL_RCC_ClockConfig>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eec:	f000 f99c 	bl	8001228 <Error_Handler>
  }
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b011      	add	sp, #68	; 0x44
 8000ef6:	bd90      	pop	{r4, r7, pc}

08000ef8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	0018      	movs	r0, r3
 8000f02:	230c      	movs	r3, #12
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f002 fbe6 	bl	80036d8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f0e:	4a27      	ldr	r2, [pc, #156]	; (8000fac <MX_ADC_Init+0xb4>)
 8000f10:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f4a:	22c2      	movs	r2, #194	; 0xc2
 8000f4c:	32ff      	adds	r2, #255	; 0xff
 8000f4e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f58:	2224      	movs	r2, #36	; 0x24
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fb0e 	bl	8001588 <HAL_ADC_Init>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000f70:	f000 f95a 	bl	8001228 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	0152      	lsls	r2, r2, #5
 8000f80:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	0552      	lsls	r2, r2, #21
 8000f88:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_ADC_Init+0xb0>)
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 fd7f 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000f9a:	f000 f945 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	2000006c 	.word	0x2000006c
 8000fac:	40012400 	.word	0x40012400

08000fb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08e      	sub	sp, #56	; 0x38
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	2328      	movs	r3, #40	; 0x28
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f002 fb89 	bl	80036d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2308      	movs	r3, #8
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f002 fb81 	bl	80036d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	0018      	movs	r0, r3
 8000fda:	231c      	movs	r3, #28
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f002 fb7a 	bl	80036d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8000fe6:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <MX_TIM3_Init+0xf8>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8000fec:	220a      	movs	r2, #10
 8000fee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 23999;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <MX_TIM3_Init+0xfc>)
 8000ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_TIM3_Init+0xf4>)
 800100a:	0018      	movs	r0, r3
 800100c:	f001 fd86 	bl	8002b1c <HAL_TIM_Base_Init>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001014:	f000 f908 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	2128      	movs	r1, #40	; 0x28
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	0152      	lsls	r2, r2, #5
 8001020:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001022:	187a      	adds	r2, r7, r1
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f001 fedb 	bl	8002de4 <HAL_TIM_ConfigClockSource>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001032:	f000 f8f9 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8001038:	0018      	movs	r0, r3
 800103a:	f001 fd9b 	bl	8002b74 <HAL_TIM_PWM_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001042:	f000 f8f1 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2120      	movs	r1, #32
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001054:	187a      	adds	r2, r7, r1
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8001058:	0011      	movs	r1, r2
 800105a:	0018      	movs	r0, r3
 800105c:	f002 faba 	bl	80035d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001064:	f000 f8e0 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2260      	movs	r2, #96	; 0x60
 800106c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 11999;
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <MX_TIM3_Init+0x100>)
 8001072:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	1d39      	adds	r1, r7, #4
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8001084:	2200      	movs	r2, #0
 8001086:	0018      	movs	r0, r3
 8001088:	f001 fdf4 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 800108c:	1e03      	subs	r3, r0, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001090:	f000 f8ca 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <MX_TIM3_Init+0xf4>)
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f95c 	bl	8001354 <HAL_TIM_MspPostInit>

}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b00e      	add	sp, #56	; 0x38
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000028 	.word	0x20000028
 80010a8:	40000400 	.word	0x40000400
 80010ac:	00005dbf 	.word	0x00005dbf
 80010b0:	00002edf 	.word	0x00002edf

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	240c      	movs	r4, #12
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	0018      	movs	r0, r3
 80010c0:	2314      	movs	r3, #20
 80010c2:	001a      	movs	r2, r3
 80010c4:	2100      	movs	r1, #0
 80010c6:	f002 fb07 	bl	80036d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	4b32      	ldr	r3, [pc, #200]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0289      	lsls	r1, r1, #10
 80010d4:	430a      	orrs	r2, r1
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	0309      	lsls	r1, r1, #12
 80010f0:	430a      	orrs	r2, r1
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_GPIO_Init+0xe4>)
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	031b      	lsls	r3, r3, #12
 80010fc:	4013      	ands	r3, r2
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001102:	2390      	movs	r3, #144	; 0x90
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2200      	movs	r2, #0
 8001108:	213c      	movs	r1, #60	; 0x3c
 800110a:	0018      	movs	r0, r3
 800110c:	f001 f89a 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001110:	23c0      	movs	r3, #192	; 0xc0
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4821      	ldr	r0, [pc, #132]	; (800119c <MX_GPIO_Init+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	0019      	movs	r1, r3
 800111a:	f001 f893 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_GPIO_Init+0xec>)
 8001128:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001130:	193a      	adds	r2, r7, r4
 8001132:	2390      	movs	r3, #144	; 0x90
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f000 ff13 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800113e:	0021      	movs	r1, r4
 8001140:	187b      	adds	r3, r7, r1
 8001142:	223c      	movs	r2, #60	; 0x3c
 8001144:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2201      	movs	r2, #1
 800114a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	000c      	movs	r4, r1
 800115a:	187a      	adds	r2, r7, r1
 800115c:	2390      	movs	r3, #144	; 0x90
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fefe 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001168:	0021      	movs	r1, r4
 800116a:	187b      	adds	r3, r7, r1
 800116c:	22c0      	movs	r2, #192	; 0xc0
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2201      	movs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	187b      	adds	r3, r7, r1
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <MX_GPIO_Init+0xe8>)
 8001188:	0019      	movs	r1, r3
 800118a:	0010      	movs	r0, r2
 800118c:	f000 feea 	bl	8001f64 <HAL_GPIO_Init>

}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b009      	add	sp, #36	; 0x24
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	48000800 	.word	0x48000800
 80011a0:	10110000 	.word	0x10110000

080011a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	int scaledValue;
	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2204      	movs	r2, #4
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d12b      	bne.n	8001212 <HAL_ADC_ConvCpltCallback+0x6e>
		ADC_val = HAL_ADC_GetValue(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	0018      	movs	r0, r3
 80011be:	f000 fb95 	bl	80018ec <HAL_ADC_GetValue>
 80011c2:	0002      	movs	r2, r0
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_ADC_ConvCpltCallback+0x78>)
 80011c6:	601a      	str	r2, [r3, #0]
		scaledValue = (ADC_val / 4095.0) * __HAL_TIM_GET_AUTORELOAD(&htim3);
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_ADC_ConvCpltCallback+0x78>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff fdd1 	bl	8000d74 <__aeabi_ui2d>
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_ADC_ConvCpltCallback+0x7c>)
 80011d6:	f7ff f823 	bl	8000220 <__aeabi_ddiv>
 80011da:	0003      	movs	r3, r0
 80011dc:	000c      	movs	r4, r1
 80011de:	0025      	movs	r5, r4
 80011e0:	001c      	movs	r4, r3
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_ConvCpltCallback+0x80>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fdc3 	bl	8000d74 <__aeabi_ui2d>
 80011ee:	0002      	movs	r2, r0
 80011f0:	000b      	movs	r3, r1
 80011f2:	0020      	movs	r0, r4
 80011f4:	0029      	movs	r1, r5
 80011f6:	f7ff fb15 	bl	8000824 <__aeabi_dmul>
 80011fa:	0003      	movs	r3, r0
 80011fc:	000c      	movs	r4, r1
 80011fe:	0018      	movs	r0, r3
 8001200:	0021      	movs	r1, r4
 8001202:	f7ff fd81 	bl	8000d08 <__aeabi_d2iz>
 8001206:	0003      	movs	r3, r0
 8001208:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, scaledValue);
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_ADC_ConvCpltCallback+0x80>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b004      	add	sp, #16
 8001218:	bdb0      	pop	{r4, r5, r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	20000068 	.word	0x20000068
 8001220:	40affe00 	.word	0x40affe00
 8001224:	20000028 	.word	0x20000028

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_MspInit+0x44>)
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_MspInit+0x44>)
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_MspInit+0x44>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x44>)
 8001254:	69da      	ldr	r2, [r3, #28]
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_MspInit+0x44>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	0549      	lsls	r1, r1, #21
 800125c:	430a      	orrs	r2, r1
 800125e:	61da      	str	r2, [r3, #28]
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_MspInit+0x44>)
 8001262:	69da      	ldr	r2, [r3, #28]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	055b      	lsls	r3, r3, #21
 8001268:	4013      	ands	r3, r2
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	2314      	movs	r3, #20
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	0018      	movs	r0, r3
 800128a:	2314      	movs	r3, #20
 800128c:	001a      	movs	r2, r3
 800128e:	2100      	movs	r1, #0
 8001290:	f002 fa22 	bl	80036d8 <memset>
  if(hadc->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_ADC_MspInit+0x94>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d134      	bne.n	8001308 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_ADC_MspInit+0x98>)
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_ADC_MspInit+0x98>)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	0089      	lsls	r1, r1, #2
 80012a8:	430a      	orrs	r2, r1
 80012aa:	619a      	str	r2, [r3, #24]
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_ADC_MspInit+0x98>)
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_ADC_MspInit+0x98>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_ADC_MspInit+0x98>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0289      	lsls	r1, r1, #10
 80012c4:	430a      	orrs	r2, r1
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_ADC_MspInit+0x98>)
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012d6:	2114      	movs	r1, #20
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2202      	movs	r2, #2
 80012dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2203      	movs	r2, #3
 80012e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	187a      	adds	r2, r7, r1
 80012ec:	2390      	movs	r3, #144	; 0x90
 80012ee:	05db      	lsls	r3, r3, #23
 80012f0:	0011      	movs	r1, r2
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 fe36 	bl	8001f64 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	200c      	movs	r0, #12
 80012fe:	f000 fdff 	bl	8001f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001302:	200c      	movs	r0, #12
 8001304:	f000 fe11 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b00a      	add	sp, #40	; 0x28
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40012400 	.word	0x40012400
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_TIM_Base_MspInit+0x34>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x38>)
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_TIM_Base_MspInit+0x38>)
 8001330:	2102      	movs	r1, #2
 8001332:	430a      	orrs	r2, r1
 8001334:	61da      	str	r2, [r3, #28]
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_TIM_Base_MspInit+0x38>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	40000400 	.word	0x40000400
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	230c      	movs	r3, #12
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	0018      	movs	r0, r3
 8001362:	2314      	movs	r3, #20
 8001364:	001a      	movs	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	f002 f9b6 	bl	80036d8 <memset>
  if(htim->Instance==TIM3)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <HAL_TIM_MspPostInit+0x74>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d124      	bne.n	80013c0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_TIM_MspPostInit+0x78>)
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_TIM_MspPostInit+0x78>)
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	0289      	lsls	r1, r1, #10
 8001380:	430a      	orrs	r2, r1
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_TIM_MspPostInit+0x78>)
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	029b      	lsls	r3, r3, #10
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001392:	210c      	movs	r1, #12
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2202      	movs	r2, #2
 800139e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2201      	movs	r2, #1
 80013b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	187a      	adds	r2, r7, r1
 80013b4:	2390      	movs	r3, #144	; 0x90
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fdd2 	bl	8001f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b008      	add	sp, #32
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f8:	f000 f888 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <ADC1_COMP_IRQHandler+0x14>)
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fa7a 	bl	8001904 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	2000006c 	.word	0x2000006c

0800141c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001452:	f7ff ffe3 	bl	800141c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001456:	f002 f91b 	bl	8003690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fcdb 	bl	8000e14 <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   r0, =_estack
 8001460:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800146c:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8001470:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001474:	200000b0 	.word	0x200000b0

08001478 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <CEC_CAN_IRQHandler>
	...

0800147c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_Init+0x24>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_Init+0x24>)
 8001486:	2110      	movs	r1, #16
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f809 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001492:	f7ff fecf 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_InitTick+0x5c>)
 80014ae:	681c      	ldr	r4, [r3, #0]
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_InitTick+0x60>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0019      	movs	r1, r3
 80014b6:	23fa      	movs	r3, #250	; 0xfa
 80014b8:	0098      	lsls	r0, r3, #2
 80014ba:	f7fe fe25 	bl	8000108 <__udivsi3>
 80014be:	0003      	movs	r3, r0
 80014c0:	0019      	movs	r1, r3
 80014c2:	0020      	movs	r0, r4
 80014c4:	f7fe fe20 	bl	8000108 <__udivsi3>
 80014c8:	0003      	movs	r3, r0
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 fd3d 	bl	8001f4a <HAL_SYSTICK_Config>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00f      	b.n	80014f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d80b      	bhi.n	80014f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fd0a 	bl	8001f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_InitTick+0x64>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b003      	add	sp, #12
 80014fe:	bd90      	pop	{r4, r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	001a      	movs	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	18d2      	adds	r2, r2, r3
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_IncTick+0x20>)
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	20000008 	.word	0x20000008
 800152c:	200000ac 	.word	0x200000ac

08001530 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	200000ac 	.word	0x200000ac

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fff0 	bl	8001530 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_Delay+0x40>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	001a      	movs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	189b      	adds	r3, r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	f7ff ffe0 	bl	8001530 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b004      	add	sp, #16
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e125      	b.n	80017f2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10a      	bne.n	80015c4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2234      	movs	r2, #52	; 0x34
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff fe5c 	bl	800127c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c8:	2210      	movs	r2, #16
 80015ca:	4013      	ands	r3, r2
 80015cc:	d000      	beq.n	80015d0 <HAL_ADC_Init+0x48>
 80015ce:	e103      	b.n	80017d8 <HAL_ADC_Init+0x250>
 80015d0:	230f      	movs	r3, #15
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d000      	beq.n	80015dc <HAL_ADC_Init+0x54>
 80015da:	e0fd      	b.n	80017d8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80015e6:	d000      	beq.n	80015ea <HAL_ADC_Init+0x62>
 80015e8:	e0f6      	b.n	80017d8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	4a83      	ldr	r2, [pc, #524]	; (80017fc <HAL_ADC_Init+0x274>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	2202      	movs	r2, #2
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2203      	movs	r2, #3
 8001602:	4013      	ands	r3, r2
 8001604:	2b01      	cmp	r3, #1
 8001606:	d112      	bne.n	800162e <HAL_ADC_Init+0xa6>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	4013      	ands	r3, r2
 8001612:	2b01      	cmp	r3, #1
 8001614:	d009      	beq.n	800162a <HAL_ADC_Init+0xa2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	401a      	ands	r2, r3
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	429a      	cmp	r2, r3
 8001628:	d101      	bne.n	800162e <HAL_ADC_Init+0xa6>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_ADC_Init+0xa8>
 800162e:	2300      	movs	r3, #0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d116      	bne.n	8001662 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2218      	movs	r2, #24
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	0899      	lsrs	r1, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4964      	ldr	r1, [pc, #400]	; (8001800 <HAL_ADC_Init+0x278>)
 800166e:	400a      	ands	r2, r1
 8001670:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7e1b      	ldrb	r3, [r3, #24]
 8001676:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e5b      	ldrb	r3, [r3, #25]
 800167c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800167e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e9b      	ldrb	r3, [r3, #26]
 8001684:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001686:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	2b01      	cmp	r3, #1
 800168e:	d002      	beq.n	8001696 <HAL_ADC_Init+0x10e>
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	e000      	b.n	8001698 <HAL_ADC_Init+0x110>
 8001696:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001698:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800169e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_Init+0x124>
 80016a8:	2304      	movs	r3, #4
 80016aa:	e000      	b.n	80016ae <HAL_ADC_Init+0x126>
 80016ac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80016ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2124      	movs	r1, #36	; 0x24
 80016b4:	5c5b      	ldrb	r3, [r3, r1]
 80016b6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7edb      	ldrb	r3, [r3, #27]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d115      	bne.n	80016f4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7e9b      	ldrb	r3, [r3, #26]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	0252      	lsls	r2, r2, #9
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	e00b      	b.n	80016f4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	2220      	movs	r2, #32
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	2201      	movs	r2, #1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69da      	ldr	r2, [r3, #28]
 80016f8:	23c2      	movs	r3, #194	; 0xc2
 80016fa:	33ff      	adds	r3, #255	; 0xff
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d007      	beq.n	8001710 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001708:	4313      	orrs	r3, r2
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4313      	orrs	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68d9      	ldr	r1, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	055b      	lsls	r3, r3, #21
 8001728:	429a      	cmp	r2, r3
 800172a:	d01b      	beq.n	8001764 <HAL_ADC_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	2b01      	cmp	r3, #1
 8001732:	d017      	beq.n	8001764 <HAL_ADC_Init+0x1dc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	2b02      	cmp	r3, #2
 800173a:	d013      	beq.n	8001764 <HAL_ADC_Init+0x1dc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	2b03      	cmp	r3, #3
 8001742:	d00f      	beq.n	8001764 <HAL_ADC_Init+0x1dc>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	2b04      	cmp	r3, #4
 800174a:	d00b      	beq.n	8001764 <HAL_ADC_Init+0x1dc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b05      	cmp	r3, #5
 8001752:	d007      	beq.n	8001764 <HAL_ADC_Init+0x1dc>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	2b06      	cmp	r3, #6
 800175a:	d003      	beq.n	8001764 <HAL_ADC_Init+0x1dc>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	2b07      	cmp	r3, #7
 8001762:	d112      	bne.n	800178a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2107      	movs	r1, #7
 8001770:	438a      	bics	r2, r1
 8001772:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6959      	ldr	r1, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	2207      	movs	r2, #7
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_ADC_Init+0x27c>)
 8001792:	4013      	ands	r3, r2
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	429a      	cmp	r2, r3
 8001798:	d10b      	bne.n	80017b2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	2203      	movs	r2, #3
 80017a6:	4393      	bics	r3, r2
 80017a8:	2201      	movs	r2, #1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017b0:	e01c      	b.n	80017ec <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	2212      	movs	r2, #18
 80017b8:	4393      	bics	r3, r2
 80017ba:	2210      	movs	r2, #16
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2201      	movs	r2, #1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80017ce:	230f      	movs	r3, #15
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017d6:	e009      	b.n	80017ec <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	2210      	movs	r2, #16
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80017e4:	230f      	movs	r3, #15
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ec:	230f      	movs	r3, #15
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	781b      	ldrb	r3, [r3, #0]
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	fffffefd 	.word	0xfffffefd
 8001800:	fffe0219 	.word	0xfffe0219
 8001804:	833fffe7 	.word	0x833fffe7

08001808 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2204      	movs	r2, #4
 8001820:	4013      	ands	r3, r2
 8001822:	d156      	bne.n	80018d2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2234      	movs	r2, #52	; 0x34
 8001828:	5c9b      	ldrb	r3, [r3, r2]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_ADC_Start_IT+0x2a>
 800182e:	2302      	movs	r3, #2
 8001830:	e056      	b.n	80018e0 <HAL_ADC_Start_IT+0xd8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2234      	movs	r2, #52	; 0x34
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7e5b      	ldrb	r3, [r3, #25]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d007      	beq.n	8001852 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001842:	230f      	movs	r3, #15
 8001844:	18fc      	adds	r4, r7, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	f000 fa31 	bl	8001cb0 <ADC_Enable>
 800184e:	0003      	movs	r3, r0
 8001850:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001852:	230f      	movs	r3, #15
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d13e      	bne.n	80018da <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_ADC_Start_IT+0xe0>)
 8001862:	4013      	ands	r3, r2
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	0052      	lsls	r2, r2, #1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2234      	movs	r2, #52	; 0x34
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	221c      	movs	r2, #28
 8001882:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	2b08      	cmp	r3, #8
 800188a:	d110      	bne.n	80018ae <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2104      	movs	r1, #4
 8001898:	438a      	bics	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2118      	movs	r1, #24
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
          break;
 80018ac:	e008      	b.n	80018c0 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	211c      	movs	r1, #28
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
          break;
 80018be:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2104      	movs	r1, #4
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	e003      	b.n	80018da <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018d2:	230f      	movs	r3, #15
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80018da:	230f      	movs	r3, #15
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	781b      	ldrb	r3, [r3, #0]
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b005      	add	sp, #20
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	fffff0fe 	.word	0xfffff0fe

080018ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2204      	movs	r2, #4
 8001914:	4013      	ands	r3, r2
 8001916:	2b04      	cmp	r3, #4
 8001918:	d106      	bne.n	8001928 <HAL_ADC_IRQHandler+0x24>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	4013      	ands	r3, r2
 8001924:	2b04      	cmp	r3, #4
 8001926:	d00d      	beq.n	8001944 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2208      	movs	r2, #8
 8001930:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001932:	2b08      	cmp	r3, #8
 8001934:	d14f      	bne.n	80019d6 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2208      	movs	r2, #8
 800193e:	4013      	ands	r3, r2
 8001940:	2b08      	cmp	r3, #8
 8001942:	d148      	bne.n	80019d6 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	2210      	movs	r2, #16
 800194a:	4013      	ands	r3, r2
 800194c:	d106      	bne.n	800195c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4013      	ands	r3, r2
 8001968:	d12d      	bne.n	80019c6 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800196e:	2b00      	cmp	r3, #0
 8001970:	d129      	bne.n	80019c6 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2208      	movs	r2, #8
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d122      	bne.n	80019c6 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2204      	movs	r2, #4
 8001988:	4013      	ands	r3, r2
 800198a:	d110      	bne.n	80019ae <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	210c      	movs	r1, #12
 8001998:	438a      	bics	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	4a33      	ldr	r2, [pc, #204]	; (8001a70 <HAL_ADC_IRQHandler+0x16c>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	2201      	movs	r2, #1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	639a      	str	r2, [r3, #56]	; 0x38
 80019ac:	e00b      	b.n	80019c6 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	2220      	movs	r2, #32
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019be:	2201      	movs	r2, #1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff fbeb 	bl	80011a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	4013      	ands	r3, r2
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d115      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x10c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b80      	cmp	r3, #128	; 0x80
 80019f0:	d10e      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	0252      	lsls	r2, r2, #9
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 f836 	bl	8001a74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2210      	movs	r2, #16
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d123      	bne.n	8001a66 <HAL_ADC_IRQHandler+0x162>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2210      	movs	r2, #16
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d11c      	bne.n	8001a66 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d006      	beq.n	8001a42 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a46:	2202      	movs	r2, #2
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f000 f813 	bl	8001a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2210      	movs	r2, #16
 8001a64:	601a      	str	r2, [r3, #0]
  }

}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	fffffefe 	.word	0xfffffefe

08001a74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d011      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x46>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d00d      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x46>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d009      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x46>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d005      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x46>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d001      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x46>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2234      	movs	r2, #52	; 0x34
 8001ade:	5c9b      	ldrb	r3, [r3, r2]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x54>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e0d0      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x1f6>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2234      	movs	r2, #52	; 0x34
 8001aec:	2101      	movs	r1, #1
 8001aee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2204      	movs	r2, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	d000      	beq.n	8001afe <HAL_ADC_ConfigChannel+0x6a>
 8001afc:	e0b4      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a64      	ldr	r2, [pc, #400]	; (8001c94 <HAL_ADC_ConfigChannel+0x200>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d100      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x76>
 8001b08:	e082      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d037      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d033      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d02f      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d02b      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d027      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d023      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d01f      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	d01b      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2107      	movs	r1, #7
 8001b70:	400b      	ands	r3, r1
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d012      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2107      	movs	r1, #7
 8001b82:	438a      	bics	r2, r1
 8001b84:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6959      	ldr	r1, [r3, #20]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2207      	movs	r2, #7
 8001b92:	401a      	ands	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d007      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0x120>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b11      	cmp	r3, #17
 8001baa:	d003      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0x120>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d163      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_ADC_ConfigChannel+0x204>)
 8001bb6:	6819      	ldr	r1, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d009      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0x140>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b11      	cmp	r3, #17
 8001bc6:	d102      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x13a>
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	03db      	lsls	r3, r3, #15
 8001bcc:	e004      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x144>
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	045b      	lsls	r3, r3, #17
 8001bd2:	e001      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x144>
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_ADC_ConfigChannel+0x204>)
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d14a      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_ADC_ConfigChannel+0x208>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	492d      	ldr	r1, [pc, #180]	; (8001ca0 <HAL_ADC_ConfigChannel+0x20c>)
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7fe fa8b 	bl	8000108 <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	189b      	adds	r3, r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x16e>
 8001c0e:	e035      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4099      	lsls	r1, r3
 8001c1e:	000b      	movs	r3, r1
 8001c20:	43d9      	mvns	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	400a      	ands	r2, r1
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d007      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x1ae>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x1ae>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d11c      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_ADC_ConfigChannel+0x204>)
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d007      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x1ca>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b11      	cmp	r3, #17
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x1c6>
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_ADC_ConfigChannel+0x210>)
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1cc>
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_ADC_ConfigChannel+0x214>)
 8001c5c:	e000      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1cc>
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_ADC_ConfigChannel+0x218>)
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_ADC_ConfigChannel+0x204>)
 8001c62:	400b      	ands	r3, r1
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e009      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001c74:	230f      	movs	r3, #15
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2234      	movs	r2, #52	; 0x34
 8001c80:	2100      	movs	r1, #0
 8001c82:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001c84:	230f      	movs	r3, #15
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	00001001 	.word	0x00001001
 8001c98:	40012708 	.word	0x40012708
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	000f4240 	.word	0x000f4240
 8001ca4:	ffbfffff 	.word	0xffbfffff
 8001ca8:	feffffff 	.word	0xfeffffff
 8001cac:	ff7fffff 	.word	0xff7fffff

08001cb0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d112      	bne.n	8001cf4 <ADC_Enable+0x44>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d009      	beq.n	8001cf0 <ADC_Enable+0x40>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d101      	bne.n	8001cf4 <ADC_Enable+0x44>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <ADC_Enable+0x46>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d14b      	bne.n	8001d92 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <ADC_Enable+0xec>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	2201      	movs	r2, #1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e038      	b.n	8001d94 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d32:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <ADC_Enable+0xf0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	491b      	ldr	r1, [pc, #108]	; (8001da4 <ADC_Enable+0xf4>)
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7fe f9e5 	bl	8000108 <__udivsi3>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d42:	e002      	b.n	8001d4a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f9      	bne.n	8001d44 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fbee 	bl	8001530 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d58:	e014      	b.n	8001d84 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d5a:	f7ff fbe9 	bl	8001530 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d90d      	bls.n	8001d84 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	2201      	movs	r2, #1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e007      	b.n	8001d94 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d1e3      	bne.n	8001d5a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	80000017 	.word	0x80000017
 8001da0:	20000000 	.word	0x20000000
 8001da4:	000f4240 	.word	0x000f4240

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	0002      	movs	r2, r0
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dba:	d809      	bhi.n	8001dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	231f      	movs	r3, #31
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_EnableIRQ+0x30>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4091      	lsls	r1, r2
 8001dcc:	000a      	movs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
  }
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	0002      	movs	r2, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b7f      	cmp	r3, #127	; 0x7f
 8001df0:	d828      	bhi.n	8001e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df2:	4a2f      	ldr	r2, [pc, #188]	; (8001eb0 <__NVIC_SetPriority+0xd4>)
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	33c0      	adds	r3, #192	; 0xc0
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	589b      	ldr	r3, [r3, r2]
 8001e02:	1dfa      	adds	r2, r7, #7
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	0011      	movs	r1, r2
 8001e08:	2203      	movs	r2, #3
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	21ff      	movs	r1, #255	; 0xff
 8001e10:	4091      	lsls	r1, r2
 8001e12:	000a      	movs	r2, r1
 8001e14:	43d2      	mvns	r2, r2
 8001e16:	401a      	ands	r2, r3
 8001e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	22ff      	movs	r2, #255	; 0xff
 8001e20:	401a      	ands	r2, r3
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	0018      	movs	r0, r3
 8001e28:	2303      	movs	r3, #3
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e30:	481f      	ldr	r0, [pc, #124]	; (8001eb0 <__NVIC_SetPriority+0xd4>)
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	33c0      	adds	r3, #192	; 0xc0
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e42:	e031      	b.n	8001ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e44:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <__NVIC_SetPriority+0xd8>)
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	400b      	ands	r3, r1
 8001e50:	3b08      	subs	r3, #8
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3306      	adds	r3, #6
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	18d3      	adds	r3, r2, r3
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	1dfa      	adds	r2, r7, #7
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	0011      	movs	r1, r2
 8001e64:	2203      	movs	r2, #3
 8001e66:	400a      	ands	r2, r1
 8001e68:	00d2      	lsls	r2, r2, #3
 8001e6a:	21ff      	movs	r1, #255	; 0xff
 8001e6c:	4091      	lsls	r1, r2
 8001e6e:	000a      	movs	r2, r1
 8001e70:	43d2      	mvns	r2, r2
 8001e72:	401a      	ands	r2, r3
 8001e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	0018      	movs	r0, r3
 8001e84:	2303      	movs	r3, #3
 8001e86:	4003      	ands	r3, r0
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e8c:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <__NVIC_SetPriority+0xd8>)
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	001c      	movs	r4, r3
 8001e94:	230f      	movs	r3, #15
 8001e96:	4023      	ands	r3, r4
 8001e98:	3b08      	subs	r3, #8
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	3306      	adds	r3, #6
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	18c3      	adds	r3, r0, r3
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b003      	add	sp, #12
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <SysTick_Config+0x40>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e010      	b.n	8001ef0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <SysTick_Config+0x44>)
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3a01      	subs	r2, #1
 8001ed4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	425b      	negs	r3, r3
 8001eda:	2103      	movs	r1, #3
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff ff7d 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <SysTick_Config+0x44>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x44>)
 8001eea:	2207      	movs	r2, #7
 8001eec:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	00ffffff 	.word	0x00ffffff
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	1c02      	adds	r2, r0, #0
 8001f10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b004      	add	sp, #16
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	0002      	movs	r2, r0
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff ff33 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ffaf 	bl	8001eb8 <SysTick_Config>
 8001f5a:	0003      	movs	r3, r0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f72:	e14f      	b.n	8002214 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4091      	lsls	r1, r2
 8001f7e:	000a      	movs	r2, r1
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d100      	bne.n	8001f8c <HAL_GPIO_Init+0x28>
 8001f8a:	e140      	b.n	800220e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d00b      	beq.n	8001fac <HAL_GPIO_Init+0x48>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa0:	2b11      	cmp	r3, #17
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b12      	cmp	r3, #18
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	0013      	movs	r3, r2
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	0013      	movs	r3, r2
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	43da      	mvns	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
 8002000:	0013      	movs	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	43da      	mvns	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	0013      	movs	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0xea>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b12      	cmp	r3, #18
 800204c:	d123      	bne.n	8002096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	58d3      	ldr	r3, [r2, r3]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2207      	movs	r2, #7
 8002060:	4013      	ands	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	409a      	lsls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	43da      	mvns	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2107      	movs	r1, #7
 800207a:	400b      	ands	r3, r1
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	6939      	ldr	r1, [r7, #16]
 8002094:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	43da      	mvns	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	401a      	ands	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	055b      	lsls	r3, r3, #21
 80020d2:	4013      	ands	r3, r2
 80020d4:	d100      	bne.n	80020d8 <HAL_GPIO_Init+0x174>
 80020d6:	e09a      	b.n	800220e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d8:	4b54      	ldr	r3, [pc, #336]	; (800222c <HAL_GPIO_Init+0x2c8>)
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_GPIO_Init+0x2c8>)
 80020de:	2101      	movs	r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	619a      	str	r2, [r3, #24]
 80020e4:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_GPIO_Init+0x2c8>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020f0:	4a4f      	ldr	r2, [pc, #316]	; (8002230 <HAL_GPIO_Init+0x2cc>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	589b      	ldr	r3, [r3, r2]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2203      	movs	r2, #3
 8002102:	4013      	ands	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	409a      	lsls	r2, r3
 800210a:	0013      	movs	r3, r2
 800210c:	43da      	mvns	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	2390      	movs	r3, #144	; 0x90
 8002118:	05db      	lsls	r3, r3, #23
 800211a:	429a      	cmp	r2, r3
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0x1e2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a44      	ldr	r2, [pc, #272]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00d      	beq.n	8002142 <HAL_GPIO_Init+0x1de>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a43      	ldr	r2, [pc, #268]	; (8002238 <HAL_GPIO_Init+0x2d4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <HAL_GPIO_Init+0x1da>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a42      	ldr	r2, [pc, #264]	; (800223c <HAL_GPIO_Init+0x2d8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_GPIO_Init+0x1d6>
 8002136:	2303      	movs	r3, #3
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x1e4>
 800213a:	2305      	movs	r3, #5
 800213c:	e004      	b.n	8002148 <HAL_GPIO_Init+0x1e4>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_Init+0x1e4>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x1e4>
 8002146:	2300      	movs	r3, #0
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	2103      	movs	r1, #3
 800214c:	400a      	ands	r2, r1
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002158:	4935      	ldr	r1, [pc, #212]	; (8002230 <HAL_GPIO_Init+0x2cc>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43da      	mvns	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	025b      	lsls	r3, r3, #9
 800217e:	4013      	ands	r3, r2
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43da      	mvns	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43da      	mvns	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	035b      	lsls	r3, r3, #13
 80021d2:	4013      	ands	r3, r2
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	039b      	lsls	r3, r3, #14
 80021fc:	4013      	ands	r3, r2
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_GPIO_Init+0x2dc>)
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	40da      	lsrs	r2, r3
 800221c:	1e13      	subs	r3, r2, #0
 800221e:	d000      	beq.n	8002222 <HAL_GPIO_Init+0x2be>
 8002220:	e6a8      	b.n	8001f74 <HAL_GPIO_Init+0x10>
  } 
}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b006      	add	sp, #24
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	48000400 	.word	0x48000400
 8002238:	48000800 	.word	0x48000800
 800223c:	48000c00 	.word	0x48000c00
 8002240:	40010400 	.word	0x40010400

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	0008      	movs	r0, r1
 800224e:	0011      	movs	r1, r2
 8002250:	1cbb      	adds	r3, r7, #2
 8002252:	1c02      	adds	r2, r0, #0
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	1c7b      	adds	r3, r7, #1
 8002258:	1c0a      	adds	r2, r1, #0
 800225a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225c:	1c7b      	adds	r3, r7, #1
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002264:	1cbb      	adds	r3, r7, #2
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800226c:	e003      	b.n	8002276 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226e:	1cbb      	adds	r3, r7, #2
 8002270:	881a      	ldrh	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e303      	b.n	800289a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d100      	bne.n	800229e <HAL_RCC_OscConfig+0x1e>
 800229c:	e08d      	b.n	80023ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800229e:	4bc4      	ldr	r3, [pc, #784]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	220c      	movs	r2, #12
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d00e      	beq.n	80022c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022aa:	4bc1      	ldr	r3, [pc, #772]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	220c      	movs	r2, #12
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x64>
 80022b6:	4bbe      	ldr	r3, [pc, #760]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	025b      	lsls	r3, r3, #9
 80022be:	401a      	ands	r2, r3
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10d      	bne.n	80022e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4bb9      	ldr	r3, [pc, #740]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4013      	ands	r3, r2
 80022d2:	d100      	bne.n	80022d6 <HAL_RCC_OscConfig+0x56>
 80022d4:	e070      	b.n	80023b8 <HAL_RCC_OscConfig+0x138>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d000      	beq.n	80022e0 <HAL_RCC_OscConfig+0x60>
 80022de:	e06b      	b.n	80023b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e2da      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x7c>
 80022ec:	4bb0      	ldr	r3, [pc, #704]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4baf      	ldr	r3, [pc, #700]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	0249      	lsls	r1, r1, #9
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e02f      	b.n	800235c <HAL_RCC_OscConfig+0xdc>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x9e>
 8002304:	4baa      	ldr	r3, [pc, #680]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4ba9      	ldr	r3, [pc, #676]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 800230a:	49aa      	ldr	r1, [pc, #680]	; (80025b4 <HAL_RCC_OscConfig+0x334>)
 800230c:	400a      	ands	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	4ba7      	ldr	r3, [pc, #668]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4ba6      	ldr	r3, [pc, #664]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002316:	49a8      	ldr	r1, [pc, #672]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e01e      	b.n	800235c <HAL_RCC_OscConfig+0xdc>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d10e      	bne.n	8002344 <HAL_RCC_OscConfig+0xc4>
 8002326:	4ba2      	ldr	r3, [pc, #648]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4ba1      	ldr	r3, [pc, #644]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 800232c:	2180      	movs	r1, #128	; 0x80
 800232e:	02c9      	lsls	r1, r1, #11
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	4b9e      	ldr	r3, [pc, #632]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b9d      	ldr	r3, [pc, #628]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	0249      	lsls	r1, r1, #9
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xdc>
 8002344:	4b9a      	ldr	r3, [pc, #616]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b99      	ldr	r3, [pc, #612]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 800234a:	499a      	ldr	r1, [pc, #616]	; (80025b4 <HAL_RCC_OscConfig+0x334>)
 800234c:	400a      	ands	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	4b97      	ldr	r3, [pc, #604]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b96      	ldr	r3, [pc, #600]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002356:	4998      	ldr	r1, [pc, #608]	; (80025b8 <HAL_RCC_OscConfig+0x338>)
 8002358:	400a      	ands	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d014      	beq.n	800238e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff f8e4 	bl	8001530 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236e:	f7ff f8df 	bl	8001530 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e28c      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002380:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	4013      	ands	r3, r2
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0xee>
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff f8cf 	bl	8001530 <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff f8ca 	bl	8001530 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e277      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	4013      	ands	r3, r2
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x118>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	d100      	bne.n	80023c6 <HAL_RCC_OscConfig+0x146>
 80023c4:	e069      	b.n	800249a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023c6:	4b7a      	ldr	r3, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	220c      	movs	r2, #12
 80023cc:	4013      	ands	r3, r2
 80023ce:	d00b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023d0:	4b77      	ldr	r3, [pc, #476]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	220c      	movs	r2, #12
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d11c      	bne.n	8002416 <HAL_RCC_OscConfig+0x196>
 80023dc:	4b74      	ldr	r3, [pc, #464]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	4013      	ands	r3, r2
 80023e6:	d116      	bne.n	8002416 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e8:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x17e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e24d      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b6c      	ldr	r3, [pc, #432]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	22f8      	movs	r2, #248	; 0xf8
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	00da      	lsls	r2, r3, #3
 800240e:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002414:	e041      	b.n	800249a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d024      	beq.n	8002468 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241e:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002424:	2101      	movs	r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff f881 	bl	8001530 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff f87c 	bl	8001530 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e229      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2202      	movs	r2, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d0f1      	beq.n	8002434 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	22f8      	movs	r2, #248	; 0xf8
 8002456:	4393      	bics	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00da      	lsls	r2, r3, #3
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	e018      	b.n	800249a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002468:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 800246e:	2101      	movs	r1, #1
 8002470:	438a      	bics	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff f85c 	bl	8001530 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247e:	f7ff f857 	bl	8001530 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e204      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002490:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d1f1      	bne.n	800247e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2208      	movs	r2, #8
 80024a0:	4013      	ands	r3, r2
 80024a2:	d036      	beq.n	8002512 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d019      	beq.n	80024e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80024ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7ff f83a 	bl	8001530 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c2:	f7ff f835 	bl	8001530 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1e2      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d0f1      	beq.n	80024c2 <HAL_RCC_OscConfig+0x242>
 80024de:	e018      	b.n	8002512 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80024e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	438a      	bics	r2, r1
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7ff f820 	bl	8001530 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f6:	f7ff f81b 	bl	8001530 <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1c8      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	2202      	movs	r2, #2
 800250e:	4013      	ands	r3, r2
 8002510:	d1f1      	bne.n	80024f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2204      	movs	r2, #4
 8002518:	4013      	ands	r3, r2
 800251a:	d100      	bne.n	800251e <HAL_RCC_OscConfig+0x29e>
 800251c:	e0b6      	b.n	800268c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	231f      	movs	r3, #31
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	055b      	lsls	r3, r3, #21
 800252e:	4013      	ands	r3, r2
 8002530:	d111      	bne.n	8002556 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0549      	lsls	r1, r1, #21
 800253c:	430a      	orrs	r2, r1
 800253e:	61da      	str	r2, [r3, #28]
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	055b      	lsls	r3, r3, #21
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_OscConfig+0x33c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4013      	ands	r3, r2
 8002560:	d11a      	bne.n	8002598 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_RCC_OscConfig+0x33c>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_RCC_OscConfig+0x33c>)
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	0049      	lsls	r1, r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002570:	f7fe ffde 	bl	8001530 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7fe ffd9 	bl	8001530 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e186      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x33c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4013      	ands	r3, r2
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10f      	bne.n	80025c0 <HAL_RCC_OscConfig+0x340>
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <HAL_RCC_OscConfig+0x330>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	621a      	str	r2, [r3, #32]
 80025ac:	e036      	b.n	800261c <HAL_RCC_OscConfig+0x39c>
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000
 80025b4:	fffeffff 	.word	0xfffeffff
 80025b8:	fffbffff 	.word	0xfffbffff
 80025bc:	40007000 	.word	0x40007000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x362>
 80025c8:	4bb6      	ldr	r3, [pc, #728]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025ca:	6a1a      	ldr	r2, [r3, #32]
 80025cc:	4bb5      	ldr	r3, [pc, #724]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025ce:	2101      	movs	r1, #1
 80025d0:	438a      	bics	r2, r1
 80025d2:	621a      	str	r2, [r3, #32]
 80025d4:	4bb3      	ldr	r3, [pc, #716]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	4bb2      	ldr	r3, [pc, #712]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025da:	2104      	movs	r1, #4
 80025dc:	438a      	bics	r2, r1
 80025de:	621a      	str	r2, [r3, #32]
 80025e0:	e01c      	b.n	800261c <HAL_RCC_OscConfig+0x39c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x384>
 80025ea:	4bae      	ldr	r3, [pc, #696]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	4bad      	ldr	r3, [pc, #692]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025f0:	2104      	movs	r1, #4
 80025f2:	430a      	orrs	r2, r1
 80025f4:	621a      	str	r2, [r3, #32]
 80025f6:	4bab      	ldr	r3, [pc, #684]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025f8:	6a1a      	ldr	r2, [r3, #32]
 80025fa:	4baa      	ldr	r3, [pc, #680]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	430a      	orrs	r2, r1
 8002600:	621a      	str	r2, [r3, #32]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0x39c>
 8002604:	4ba7      	ldr	r3, [pc, #668]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	4ba6      	ldr	r3, [pc, #664]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800260a:	2101      	movs	r1, #1
 800260c:	438a      	bics	r2, r1
 800260e:	621a      	str	r2, [r3, #32]
 8002610:	4ba4      	ldr	r3, [pc, #656]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	4ba3      	ldr	r3, [pc, #652]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002616:	2104      	movs	r1, #4
 8002618:	438a      	bics	r2, r1
 800261a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d014      	beq.n	800264e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7fe ff84 	bl	8001530 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	e009      	b.n	8002642 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe ff7f 	bl	8001530 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	4a9b      	ldr	r2, [pc, #620]	; (80028a8 <HAL_RCC_OscConfig+0x628>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e12b      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	4b98      	ldr	r3, [pc, #608]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x3ae>
 800264c:	e013      	b.n	8002676 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7fe ff6f 	bl	8001530 <HAL_GetTick>
 8002652:	0003      	movs	r3, r0
 8002654:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	e009      	b.n	800266c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7fe ff6a 	bl	8001530 <HAL_GetTick>
 800265c:	0002      	movs	r2, r0
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	4a91      	ldr	r2, [pc, #580]	; (80028a8 <HAL_RCC_OscConfig+0x628>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e116      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	4b8d      	ldr	r3, [pc, #564]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002676:	231f      	movs	r3, #31
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4b88      	ldr	r3, [pc, #544]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	4b87      	ldr	r3, [pc, #540]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002686:	4989      	ldr	r1, [pc, #548]	; (80028ac <HAL_RCC_OscConfig+0x62c>)
 8002688:	400a      	ands	r2, r1
 800268a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	4013      	ands	r3, r2
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d12a      	bne.n	80026f4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800269e:	4b81      	ldr	r3, [pc, #516]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a2:	4b80      	ldr	r3, [pc, #512]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026a4:	2104      	movs	r1, #4
 80026a6:	430a      	orrs	r2, r1
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026aa:	4b7e      	ldr	r3, [pc, #504]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ae:	4b7d      	ldr	r3, [pc, #500]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe ff3b 	bl	8001530 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026c0:	f7fe ff36 	bl	8001530 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0e3      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026d2:	4b74      	ldr	r3, [pc, #464]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	2202      	movs	r2, #2
 80026d8:	4013      	ands	r3, r2
 80026da:	d0f1      	beq.n	80026c0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026dc:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	22f8      	movs	r2, #248	; 0xf8
 80026e2:	4393      	bics	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	00da      	lsls	r2, r3, #3
 80026ec:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	635a      	str	r2, [r3, #52]	; 0x34
 80026f2:	e034      	b.n	800275e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	3305      	adds	r3, #5
 80026fa:	d111      	bne.n	8002720 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80026fc:	4b69      	ldr	r3, [pc, #420]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80026fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002702:	2104      	movs	r1, #4
 8002704:	438a      	bics	r2, r1
 8002706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002708:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	22f8      	movs	r2, #248	; 0xf8
 800270e:	4393      	bics	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	00da      	lsls	r2, r3, #3
 8002718:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	; 0x34
 800271e:	e01e      	b.n	800275e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002720:	4b60      	ldr	r3, [pc, #384]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002724:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002726:	2104      	movs	r1, #4
 8002728:	430a      	orrs	r2, r1
 800272a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800272c:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800272e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002730:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002732:	2101      	movs	r1, #1
 8002734:	438a      	bics	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7fe fefa 	bl	8001530 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002742:	f7fe fef5 	bl	8001530 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0a2      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002754:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002758:	2202      	movs	r2, #2
 800275a:	4013      	ands	r3, r2
 800275c:	d1f1      	bne.n	8002742 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d100      	bne.n	8002768 <HAL_RCC_OscConfig+0x4e8>
 8002766:	e097      	b.n	8002898 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002768:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	220c      	movs	r2, #12
 800276e:	4013      	ands	r3, r2
 8002770:	2b08      	cmp	r3, #8
 8002772:	d100      	bne.n	8002776 <HAL_RCC_OscConfig+0x4f6>
 8002774:	e06b      	b.n	800284e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d14c      	bne.n	8002818 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002784:	494a      	ldr	r1, [pc, #296]	; (80028b0 <HAL_RCC_OscConfig+0x630>)
 8002786:	400a      	ands	r2, r1
 8002788:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe fed1 	bl	8001530 <HAL_GetTick>
 800278e:	0003      	movs	r3, r0
 8002790:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fecc 	bl	8001530 <HAL_GetTick>
 8002798:	0002      	movs	r2, r0
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e079      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	049b      	lsls	r3, r3, #18
 80027ae:	4013      	ands	r3, r2
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b2:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	220f      	movs	r2, #15
 80027b8:	4393      	bics	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c6:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a3a      	ldr	r2, [pc, #232]	; (80028b4 <HAL_RCC_OscConfig+0x634>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	431a      	orrs	r2, r3
 80027da:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	0449      	lsls	r1, r1, #17
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fe9f 	bl	8001530 <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fe9a 	bl	8001530 <HAL_GetTick>
 80027fc:	0002      	movs	r2, r0
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e047      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	049b      	lsls	r3, r3, #18
 8002812:	4013      	ands	r3, r2
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x578>
 8002816:	e03f      	b.n	8002898 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800281e:	4924      	ldr	r1, [pc, #144]	; (80028b0 <HAL_RCC_OscConfig+0x630>)
 8002820:	400a      	ands	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fe84 	bl	8001530 <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fe7f 	bl	8001530 <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e02c      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	049b      	lsls	r3, r3, #18
 8002848:	4013      	ands	r3, r2
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x5ae>
 800284c:	e024      	b.n	8002898 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e01f      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x624>)
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	429a      	cmp	r2, r3
 8002874:	d10e      	bne.n	8002894 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	220f      	movs	r2, #15
 800287a:	401a      	ands	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	23f0      	movs	r3, #240	; 0xf0
 8002888:	039b      	lsls	r3, r3, #14
 800288a:	401a      	ands	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b008      	add	sp, #32
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	40021000 	.word	0x40021000
 80028a8:	00001388 	.word	0x00001388
 80028ac:	efffffff 	.word	0xefffffff
 80028b0:	feffffff 	.word	0xfeffffff
 80028b4:	ffc2ffff 	.word	0xffc2ffff

080028b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0b3      	b.n	8002a34 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4013      	ands	r3, r2
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d911      	bls.n	80028fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b58      	ldr	r3, [pc, #352]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	4393      	bics	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	4b55      	ldr	r3, [pc, #340]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ec:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e09a      	b.n	8002a34 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d015      	beq.n	8002934 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2204      	movs	r2, #4
 800290e:	4013      	ands	r3, r2
 8002910:	d006      	beq.n	8002920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002912:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002918:	21e0      	movs	r1, #224	; 0xe0
 800291a:	00c9      	lsls	r1, r1, #3
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	22f0      	movs	r2, #240	; 0xf0
 8002926:	4393      	bics	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d040      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	029b      	lsls	r3, r3, #10
 800294e:	4013      	ands	r3, r2
 8002950:	d114      	bne.n	800297c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e06e      	b.n	8002a34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	049b      	lsls	r3, r3, #18
 8002966:	4013      	ands	r3, r2
 8002968:	d108      	bne.n	800297c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e062      	b.n	8002a34 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e05b      	b.n	8002a34 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297c:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	4393      	bics	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fe fdce 	bl	8001530 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002998:	e009      	b.n	80029ae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299a:	f7fe fdc9 	bl	8001530 <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <HAL_RCC_ClockConfig+0x18c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e042      	b.n	8002a34 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	220c      	movs	r2, #12
 80029b4:	401a      	ands	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1ec      	bne.n	800299a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d211      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2201      	movs	r2, #1
 80029d4:	4393      	bics	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCC_ClockConfig+0x184>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e020      	b.n	8002a34 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2204      	movs	r2, #4
 80029f8:	4013      	ands	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_RCC_ClockConfig+0x190>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a10:	f000 f820 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a14:	0001      	movs	r1, r0
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x188>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	4013      	ands	r3, r2
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <HAL_RCC_ClockConfig+0x194>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	000a      	movs	r2, r1
 8002a26:	40da      	lsrs	r2, r3
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x198>)
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe fd39 	bl	80014a4 <HAL_InitTick>
  
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40021000 	.word	0x40021000
 8002a44:	00001388 	.word	0x00001388
 8002a48:	fffff8ff 	.word	0xfffff8ff
 8002a4c:	080037a0 	.word	0x080037a0
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b08f      	sub	sp, #60	; 0x3c
 8002a58:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002a5a:	2314      	movs	r3, #20
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a62:	c313      	stmia	r3!, {r0, r1, r4}
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a6e:	c313      	stmia	r3!, {r0, r1, r4}
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	220c      	movs	r2, #12
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d002      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x4a>
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x50>
 8002a9c:	e02d      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aa2:	e02d      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	0c9b      	lsrs	r3, r3, #18
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2214      	movs	r2, #20
 8002aae:	18ba      	adds	r2, r7, r2
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	220f      	movs	r2, #15
 8002aba:	4013      	ands	r3, r2
 8002abc:	1d3a      	adds	r2, r7, #4
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ace:	4812      	ldr	r0, [pc, #72]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ad0:	f7fd fb1a 	bl	8000108 <__udivsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	4353      	muls	r3, r2
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ade:	e009      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae2:	000a      	movs	r2, r1
 8002ae4:	0152      	lsls	r2, r2, #5
 8002ae6:	1a52      	subs	r2, r2, r1
 8002ae8:	0193      	lsls	r3, r2, #6
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	185b      	adds	r3, r3, r1
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002af8:	e002      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002afe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b00f      	add	sp, #60	; 0x3c
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	08003700 	.word	0x08003700
 8002b10:	08003710 	.word	0x08003710
 8002b14:	40021000 	.word	0x40021000
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e01e      	b.n	8002b6c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	223d      	movs	r2, #61	; 0x3d
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223c      	movs	r2, #60	; 0x3c
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fe fbe7 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	; 0x3d
 8002b4e:	2102      	movs	r1, #2
 8002b50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	0010      	movs	r0, r2
 8002b5e:	f000 f9ff 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	223d      	movs	r2, #61	; 0x3d
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e01e      	b.n	8002bc4 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223d      	movs	r2, #61	; 0x3d
 8002b8a:	5c9b      	ldrb	r3, [r3, r2]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223c      	movs	r2, #60	; 0x3c
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f815 	bl	8002bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	223d      	movs	r2, #61	; 0x3d
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f000 f9d3 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223d      	movs	r2, #61	; 0x3d
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fccc 	bl	800358c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_TIM_PWM_Start+0x88>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00e      	beq.n	8002c1c <HAL_TIM_PWM_Start+0x40>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_TIM_PWM_Start+0x8c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d009      	beq.n	8002c1c <HAL_TIM_PWM_Start+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_TIM_PWM_Start+0x90>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_TIM_PWM_Start+0x40>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <HAL_TIM_PWM_Start+0x94>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIM_PWM_Start+0x44>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_TIM_PWM_Start+0x46>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	0209      	lsls	r1, r1, #8
 8002c34:	430a      	orrs	r2, r1
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2207      	movs	r2, #7
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d007      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	223c      	movs	r2, #60	; 0x3c
 8002c84:	5c9b      	ldrb	r3, [r3, r2]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0a4      	b.n	8002dd8 <HAL_TIM_PWM_ConfigChannel+0x164>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	223c      	movs	r2, #60	; 0x3c
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	223d      	movs	r2, #61	; 0x3d
 8002c9a:	2102      	movs	r1, #2
 8002c9c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d029      	beq.n	8002cf8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002ca4:	d802      	bhi.n	8002cac <HAL_TIM_PWM_ConfigChannel+0x38>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002caa:	e08c      	b.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d046      	beq.n	8002d3e <HAL_TIM_PWM_ConfigChannel+0xca>
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d065      	beq.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002cb4:	e087      	b.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	0011      	movs	r1, r2
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f000 f9ce 	bl	8003060 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2108      	movs	r1, #8
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2104      	movs	r1, #4
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	619a      	str	r2, [r3, #24]
      break;
 8002cf6:	e066      	b.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	0011      	movs	r1, r2
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 fa35 	bl	8003170 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2180      	movs	r1, #128	; 0x80
 8002d12:	0109      	lsls	r1, r1, #4
 8002d14:	430a      	orrs	r2, r1
 8002d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	492f      	ldr	r1, [pc, #188]	; (8002de0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002d24:	400a      	ands	r2, r1
 8002d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	021a      	lsls	r2, r3, #8
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	619a      	str	r2, [r3, #24]
      break;
 8002d3c:	e043      	b.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	0011      	movs	r1, r2
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 fa96 	bl	8003278 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2108      	movs	r1, #8
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2104      	movs	r1, #4
 8002d68:	438a      	bics	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69d9      	ldr	r1, [r3, #28]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	61da      	str	r2, [r3, #28]
      break;
 8002d7e:	e022      	b.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	0011      	movs	r1, r2
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 fafb 	bl	8003384 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	0109      	lsls	r1, r1, #4
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	490d      	ldr	r1, [pc, #52]	; (8002de0 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69d9      	ldr	r1, [r3, #28]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	021a      	lsls	r2, r3, #8
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	61da      	str	r2, [r3, #28]
      break;
 8002dc4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	223d      	movs	r2, #61	; 0x3d
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	223c      	movs	r2, #60	; 0x3c
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	fffffbff 	.word	0xfffffbff

08002de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	223c      	movs	r2, #60	; 0x3c
 8002df2:	5c9b      	ldrb	r3, [r3, r2]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_TIM_ConfigClockSource+0x18>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e0ab      	b.n	8002f54 <HAL_TIM_ConfigClockSource+0x170>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	223c      	movs	r2, #60	; 0x3c
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	223d      	movs	r2, #61	; 0x3d
 8002e08:	2102      	movs	r1, #2
 8002e0a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2277      	movs	r2, #119	; 0x77
 8002e18:	4393      	bics	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a4f      	ldr	r2, [pc, #316]	; (8002f5c <HAL_TIM_ConfigClockSource+0x178>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d100      	bne.n	8002e36 <HAL_TIM_ConfigClockSource+0x52>
 8002e34:	e06b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x12a>
 8002e36:	d80e      	bhi.n	8002e56 <HAL_TIM_ConfigClockSource+0x72>
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d100      	bne.n	8002e3e <HAL_TIM_ConfigClockSource+0x5a>
 8002e3c:	e077      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x14a>
 8002e3e:	d803      	bhi.n	8002e48 <HAL_TIM_ConfigClockSource+0x64>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d100      	bne.n	8002e46 <HAL_TIM_ConfigClockSource+0x62>
 8002e44:	e073      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e46:	e07c      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d100      	bne.n	8002e4e <HAL_TIM_ConfigClockSource+0x6a>
 8002e4c:	e06f      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x14a>
 8002e4e:	2b30      	cmp	r3, #48	; 0x30
 8002e50:	d100      	bne.n	8002e54 <HAL_TIM_ConfigClockSource+0x70>
 8002e52:	e06c      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002e54:	e075      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e56:	2b70      	cmp	r3, #112	; 0x70
 8002e58:	d00e      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0x94>
 8002e5a:	d804      	bhi.n	8002e66 <HAL_TIM_ConfigClockSource+0x82>
 8002e5c:	2b50      	cmp	r3, #80	; 0x50
 8002e5e:	d036      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0xea>
 8002e60:	2b60      	cmp	r3, #96	; 0x60
 8002e62:	d044      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002e64:	e06d      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	0152      	lsls	r2, r2, #5
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d068      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x15c>
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	0192      	lsls	r2, r2, #6
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d017      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002e76:	e064      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f000 fb60 	bl	800354c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2277      	movs	r2, #119	; 0x77
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
      break;
 8002ea4:	e04d      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6899      	ldr	r1, [r3, #8]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f000 fb49 	bl	800354c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	01c9      	lsls	r1, r1, #7
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
      break;
 8002ecc:	e039      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	001a      	movs	r2, r3
 8002edc:	f000 fabc 	bl	8003458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2150      	movs	r1, #80	; 0x50
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fb16 	bl	8003518 <TIM_ITRx_SetConfig>
      break;
 8002eec:	e029      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	001a      	movs	r2, r3
 8002efc:	f000 fada 	bl	80034b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2160      	movs	r1, #96	; 0x60
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fb06 	bl	8003518 <TIM_ITRx_SetConfig>
      break;
 8002f0c:	e019      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	001a      	movs	r2, r3
 8002f1c:	f000 fa9c 	bl	8003458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2140      	movs	r1, #64	; 0x40
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 faf6 	bl	8003518 <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e009      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	0019      	movs	r1, r3
 8002f38:	0010      	movs	r0, r2
 8002f3a:	f000 faed 	bl	8003518 <TIM_ITRx_SetConfig>
      break;
 8002f3e:	e000      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002f40:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	223d      	movs	r2, #61	; 0x3d
 8002f46:	2101      	movs	r1, #1
 8002f48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223c      	movs	r2, #60	; 0x3c
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b004      	add	sp, #16
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	ffff00ff 	.word	0xffff00ff

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a34      	ldr	r2, [pc, #208]	; (8003044 <TIM_Base_SetConfig+0xe4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d008      	beq.n	8002f8a <TIM_Base_SetConfig+0x2a>
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d003      	beq.n	8002f8a <TIM_Base_SetConfig+0x2a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a30      	ldr	r2, [pc, #192]	; (8003048 <TIM_Base_SetConfig+0xe8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d108      	bne.n	8002f9c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2270      	movs	r2, #112	; 0x70
 8002f8e:	4393      	bics	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a29      	ldr	r2, [pc, #164]	; (8003044 <TIM_Base_SetConfig+0xe4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d018      	beq.n	8002fd6 <TIM_Base_SetConfig+0x76>
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d013      	beq.n	8002fd6 <TIM_Base_SetConfig+0x76>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a25      	ldr	r2, [pc, #148]	; (8003048 <TIM_Base_SetConfig+0xe8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00f      	beq.n	8002fd6 <TIM_Base_SetConfig+0x76>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <TIM_Base_SetConfig+0xec>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_Base_SetConfig+0x76>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <TIM_Base_SetConfig+0xf0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_Base_SetConfig+0x76>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a22      	ldr	r2, [pc, #136]	; (8003054 <TIM_Base_SetConfig+0xf4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0x76>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <TIM_Base_SetConfig+0xf8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d108      	bne.n	8002fe8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a20      	ldr	r2, [pc, #128]	; (800305c <TIM_Base_SetConfig+0xfc>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	4393      	bics	r3, r2
 8002fee:	001a      	movs	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <TIM_Base_SetConfig+0xe4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0xce>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <TIM_Base_SetConfig+0xf0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0xce>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <TIM_Base_SetConfig+0xf4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0xce>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <TIM_Base_SetConfig+0xf8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d103      	bne.n	8003036 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	615a      	str	r2, [r3, #20]
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400
 800304c:	40002000 	.word	0x40002000
 8003050:	40014000 	.word	0x40014000
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800
 800305c:	fffffcff 	.word	0xfffffcff

08003060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	2201      	movs	r2, #1
 8003070:	4393      	bics	r3, r2
 8003072:	001a      	movs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2270      	movs	r2, #112	; 0x70
 800308e:	4393      	bics	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2203      	movs	r2, #3
 8003096:	4393      	bics	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2202      	movs	r2, #2
 80030a8:	4393      	bics	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <TIM_OC1_SetConfig+0xf8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <TIM_OC1_SetConfig+0x76>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <TIM_OC1_SetConfig+0xfc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_OC1_SetConfig+0x76>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <TIM_OC1_SetConfig+0x100>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_OC1_SetConfig+0x76>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a24      	ldr	r2, [pc, #144]	; (8003164 <TIM_OC1_SetConfig+0x104>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2208      	movs	r2, #8
 80030da:	4393      	bics	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4393      	bics	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <TIM_OC1_SetConfig+0xf8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_OC1_SetConfig+0xb0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <TIM_OC1_SetConfig+0xfc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <TIM_OC1_SetConfig+0xb0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <TIM_OC1_SetConfig+0x100>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_OC1_SetConfig+0xb0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a16      	ldr	r2, [pc, #88]	; (8003164 <TIM_OC1_SetConfig+0x104>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d111      	bne.n	8003134 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <TIM_OC1_SetConfig+0x108>)
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4a14      	ldr	r2, [pc, #80]	; (800316c <TIM_OC1_SetConfig+0x10c>)
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b006      	add	sp, #24
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40014000 	.word	0x40014000
 8003160:	40014400 	.word	0x40014400
 8003164:	40014800 	.word	0x40014800
 8003168:	fffffeff 	.word	0xfffffeff
 800316c:	fffffdff 	.word	0xfffffdff

08003170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	2210      	movs	r2, #16
 8003180:	4393      	bics	r3, r2
 8003182:	001a      	movs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <TIM_OC2_SetConfig+0xe8>)
 800319e:	4013      	ands	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4a2d      	ldr	r2, [pc, #180]	; (800325c <TIM_OC2_SetConfig+0xec>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2220      	movs	r2, #32
 80031ba:	4393      	bics	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a24      	ldr	r2, [pc, #144]	; (8003260 <TIM_OC2_SetConfig+0xf0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10d      	bne.n	80031ee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	4393      	bics	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2240      	movs	r2, #64	; 0x40
 80031ea:	4393      	bics	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <TIM_OC2_SetConfig+0xf0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00b      	beq.n	800320e <TIM_OC2_SetConfig+0x9e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <TIM_OC2_SetConfig+0xf4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <TIM_OC2_SetConfig+0x9e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <TIM_OC2_SetConfig+0xf8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d003      	beq.n	800320e <TIM_OC2_SetConfig+0x9e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a18      	ldr	r2, [pc, #96]	; (800326c <TIM_OC2_SetConfig+0xfc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d113      	bne.n	8003236 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4a17      	ldr	r2, [pc, #92]	; (8003270 <TIM_OC2_SetConfig+0x100>)
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4a16      	ldr	r2, [pc, #88]	; (8003274 <TIM_OC2_SetConfig+0x104>)
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	621a      	str	r2, [r3, #32]
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b006      	add	sp, #24
 8003256:	bd80      	pop	{r7, pc}
 8003258:	ffff8fff 	.word	0xffff8fff
 800325c:	fffffcff 	.word	0xfffffcff
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	fffffbff 	.word	0xfffffbff
 8003274:	fffff7ff 	.word	0xfffff7ff

08003278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a35      	ldr	r2, [pc, #212]	; (800335c <TIM_OC3_SetConfig+0xe4>)
 8003288:	401a      	ands	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2270      	movs	r2, #112	; 0x70
 80032a4:	4393      	bics	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2203      	movs	r2, #3
 80032ac:	4393      	bics	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	4a28      	ldr	r2, [pc, #160]	; (8003360 <TIM_OC3_SetConfig+0xe8>)
 80032be:	4013      	ands	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <TIM_OC3_SetConfig+0xec>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d10d      	bne.n	80032f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	4a23      	ldr	r2, [pc, #140]	; (8003368 <TIM_OC3_SetConfig+0xf0>)
 80032da:	4013      	ands	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <TIM_OC3_SetConfig+0xf4>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <TIM_OC3_SetConfig+0xec>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_OC3_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <TIM_OC3_SetConfig+0xf8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_OC3_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <TIM_OC3_SetConfig+0xfc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_OC3_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <TIM_OC3_SetConfig+0x100>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d113      	bne.n	800333a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4a19      	ldr	r2, [pc, #100]	; (800337c <TIM_OC3_SetConfig+0x104>)
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <TIM_OC3_SetConfig+0x108>)
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b006      	add	sp, #24
 800335a:	bd80      	pop	{r7, pc}
 800335c:	fffffeff 	.word	0xfffffeff
 8003360:	fffffdff 	.word	0xfffffdff
 8003364:	40012c00 	.word	0x40012c00
 8003368:	fffff7ff 	.word	0xfffff7ff
 800336c:	fffffbff 	.word	0xfffffbff
 8003370:	40014000 	.word	0x40014000
 8003374:	40014400 	.word	0x40014400
 8003378:	40014800 	.word	0x40014800
 800337c:	ffffefff 	.word	0xffffefff
 8003380:	ffffdfff 	.word	0xffffdfff

08003384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4a28      	ldr	r2, [pc, #160]	; (8003434 <TIM_OC4_SetConfig+0xb0>)
 8003394:	401a      	ands	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a22      	ldr	r2, [pc, #136]	; (8003438 <TIM_OC4_SetConfig+0xb4>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <TIM_OC4_SetConfig+0xb8>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <TIM_OC4_SetConfig+0xbc>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	031b      	lsls	r3, r3, #12
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a19      	ldr	r2, [pc, #100]	; (8003444 <TIM_OC4_SetConfig+0xc0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <TIM_OC4_SetConfig+0x78>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a18      	ldr	r2, [pc, #96]	; (8003448 <TIM_OC4_SetConfig+0xc4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_OC4_SetConfig+0x78>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a17      	ldr	r2, [pc, #92]	; (800344c <TIM_OC4_SetConfig+0xc8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_OC4_SetConfig+0x78>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a16      	ldr	r2, [pc, #88]	; (8003450 <TIM_OC4_SetConfig+0xcc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d109      	bne.n	8003410 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <TIM_OC4_SetConfig+0xd0>)
 8003400:	4013      	ands	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b006      	add	sp, #24
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	ffffefff 	.word	0xffffefff
 8003438:	ffff8fff 	.word	0xffff8fff
 800343c:	fffffcff 	.word	0xfffffcff
 8003440:	ffffdfff 	.word	0xffffdfff
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	ffffbfff 	.word	0xffffbfff

08003458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	2201      	movs	r2, #1
 8003470:	4393      	bics	r3, r2
 8003472:	001a      	movs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	22f0      	movs	r2, #240	; 0xf0
 8003482:	4393      	bics	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	220a      	movs	r2, #10
 8003494:	4393      	bics	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b006      	add	sp, #24
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	2210      	movs	r2, #16
 80034c6:	4393      	bics	r3, r2
 80034c8:	001a      	movs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <TIM_TI2_ConfigInputStage+0x60>)
 80034de:	4013      	ands	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	031b      	lsls	r3, r3, #12
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	22a0      	movs	r2, #160	; 0xa0
 80034f0:	4393      	bics	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	46bd      	mov	sp, r7
 800350e:	b006      	add	sp, #24
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	ffff0fff 	.word	0xffff0fff

08003518 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2270      	movs	r2, #112	; 0x70
 800352c:	4393      	bics	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	2207      	movs	r2, #7
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <TIM_ETR_SetConfig+0x3c>)
 8003564:	4013      	ands	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	021a      	lsls	r2, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	431a      	orrs	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b006      	add	sp, #24
 8003586:	bd80      	pop	{r7, pc}
 8003588:	ffff00ff 	.word	0xffff00ff

0800358c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	221f      	movs	r2, #31
 800359c:	4013      	ands	r3, r2
 800359e:	2201      	movs	r2, #1
 80035a0:	409a      	lsls	r2, r3
 80035a2:	0013      	movs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	43d2      	mvns	r2, r2
 80035ae:	401a      	ands	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1a      	ldr	r2, [r3, #32]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	211f      	movs	r1, #31
 80035bc:	400b      	ands	r3, r1
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4099      	lsls	r1, r3
 80035c2:	000b      	movs	r3, r1
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b006      	add	sp, #24
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	223c      	movs	r2, #60	; 0x3c
 80035e2:	5c9b      	ldrb	r3, [r3, r2]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e047      	b.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	223c      	movs	r2, #60	; 0x3c
 80035f0:	2101      	movs	r1, #1
 80035f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	223d      	movs	r2, #61	; 0x3d
 80035f8:	2102      	movs	r1, #2
 80035fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2270      	movs	r2, #112	; 0x70
 8003610:	4393      	bics	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00f      	beq.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	05db      	lsls	r3, r3, #23
 8003638:	429a      	cmp	r2, r3
 800363a:	d009      	beq.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a11      	ldr	r2, [pc, #68]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10c      	bne.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	4393      	bics	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	4313      	orrs	r3, r2
 8003660:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	223d      	movs	r2, #61	; 0x3d
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	223c      	movs	r2, #60	; 0x3c
 8003676:	2100      	movs	r1, #0
 8003678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40014000 	.word	0x40014000

08003690 <__libc_init_array>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	2600      	movs	r6, #0
 8003694:	4d0c      	ldr	r5, [pc, #48]	; (80036c8 <__libc_init_array+0x38>)
 8003696:	4c0d      	ldr	r4, [pc, #52]	; (80036cc <__libc_init_array+0x3c>)
 8003698:	1b64      	subs	r4, r4, r5
 800369a:	10a4      	asrs	r4, r4, #2
 800369c:	42a6      	cmp	r6, r4
 800369e:	d109      	bne.n	80036b4 <__libc_init_array+0x24>
 80036a0:	2600      	movs	r6, #0
 80036a2:	f000 f821 	bl	80036e8 <_init>
 80036a6:	4d0a      	ldr	r5, [pc, #40]	; (80036d0 <__libc_init_array+0x40>)
 80036a8:	4c0a      	ldr	r4, [pc, #40]	; (80036d4 <__libc_init_array+0x44>)
 80036aa:	1b64      	subs	r4, r4, r5
 80036ac:	10a4      	asrs	r4, r4, #2
 80036ae:	42a6      	cmp	r6, r4
 80036b0:	d105      	bne.n	80036be <__libc_init_array+0x2e>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	00b3      	lsls	r3, r6, #2
 80036b6:	58eb      	ldr	r3, [r5, r3]
 80036b8:	4798      	blx	r3
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7ee      	b.n	800369c <__libc_init_array+0xc>
 80036be:	00b3      	lsls	r3, r6, #2
 80036c0:	58eb      	ldr	r3, [r5, r3]
 80036c2:	4798      	blx	r3
 80036c4:	3601      	adds	r6, #1
 80036c6:	e7f2      	b.n	80036ae <__libc_init_array+0x1e>
 80036c8:	080037b0 	.word	0x080037b0
 80036cc:	080037b0 	.word	0x080037b0
 80036d0:	080037b0 	.word	0x080037b0
 80036d4:	080037b4 	.word	0x080037b4

080036d8 <memset>:
 80036d8:	0003      	movs	r3, r0
 80036da:	1812      	adds	r2, r2, r0
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	7019      	strb	r1, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <_init>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ee:	bc08      	pop	{r3}
 80036f0:	469e      	mov	lr, r3
 80036f2:	4770      	bx	lr

080036f4 <_fini>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr
